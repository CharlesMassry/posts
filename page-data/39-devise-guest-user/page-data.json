{"componentChunkName":"component---src-templates-blog-post-js","path":"/39-devise-guest-user/","webpackCompilationHash":"ee13614abdca802b29ea","result":{"data":{"site":{"siteMetadata":{"title":"Charlie Massry","author":"Charlie Massry"}},"markdownRemark":{"id":"927e62e3-9db5-5e7b-beb5-ae3fd50986cb","excerpt":"Using Devise in Ruby on Rails can be very convenient for authentication, but there are some necessary workarounds that you must be aware of, specifically when…","html":"<p>Using Devise in Ruby on Rails can be very convenient for authentication, but there are some necessary workarounds that you must be aware of, specifically when you introduce the Null Object Pattern. I had described in a <a href=\"/posts/27\">previous post</a> how to use the Null Object Pattern with <a href=\"https://github.com/halogenandtoast/monban\">Monban</a>, which was very simple. Using this pattern with <a href=\"http://devise.plataformatec.com.br/\">Devise</a> however is not so simple.</p>\n<p>If you follow the Devise guide on <a href=\"https://github.com/plataformatec/devise/wiki/How-To:-Create-a-guest-user\">how to create a guest user</a> it encourages you to create a guest user in the database, which can be useful for certain circumstances, like when you need your Guest User transfer over information when they actually sign up, but if not, we can just create a Null User.  </p>\n<p>You might have in your app a bunch of checks like <code class=\"language-text\">&lt;% if current_user.admin %&gt;</code> and if you allow guest users, with Devise, you need to either wrap everything in a <code class=\"language-text\">&lt;% if user_signed_in? %&gt;</code>, or create a Guest User. Having a Guest User object with all the same method names return false can be very helpful for this situation, as you can just create a dummy method everytime you get a <code class=\"language-text\">NoMethodError: undefined method admin? for nil:NilClass</code>. To begin, we would write in our <code class=\"language-text\">ApplicationController</code></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">def current_user\n  super || GuestUser.new\nend</code></pre></div>\n<p>There is still a Devise gotcha here. The method <code class=\"language-text\">user_signed_in?</code> only returns a falsy value if <code class=\"language-text\">current_user</code> is falsy. Since a Guest User is not nil it won’t return nil. What we must do is create <code class=\"language-text\">User#signed_in?</code> and <code class=\"language-text\">GuestUser#signed_in?</code> methods that respond with true and false respectively. and use that for our checks, which will look like</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&lt;% if current_user.signed_in? %&gt;\n  &lt;% link_to &quot;Sign out&quot;, destroy_user_session_path %&gt;\n&lt;% end %&gt;</code></pre></div>\n<p>This will help keep your code <a href=\"http://en.wikipedia.org/wiki/SOLID_(object-oriented_design)\">SOLID</a> and you won’t even touch your database.</p>","frontmatter":{"title":"Devise Guest User","date":"October 09, 2014"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/39-devise-guest-user/","previous":{"fields":{"slug":"/38-devise-on-rails/"},"frontmatter":{"title":"Devise on Rails","id":38}},"next":{"fields":{"slug":"/40-mock-external-services-with-a-vcr/"},"frontmatter":{"title":"Mock external services with a VCR","id":40}}}}}