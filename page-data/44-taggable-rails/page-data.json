{"componentChunkName":"component---src-templates-blog-post-js","path":"/44-taggable-rails/","webpackCompilationHash":"a108278f805070d0238a","result":{"data":{"site":{"siteMetadata":{"title":"Charlie Massry","author":"Charlie Massry"}},"markdownRemark":{"id":"0165f64a-42b1-5020-b757-8c78bedf69b9","excerpt":"The popular social media website Twitter has made features such as tagging through their system of hashtags very intuitive and fun. You can add similar…","html":"<p>The popular social media website Twitter has made features such as tagging through their system of hashtags very intuitive and fun. You can add similar functionality in your Rails app with relative ease using a gem called <a href=\"https://github.com/mbleigh/acts-as-taggable-on\">Acts-As-Taggable-On</a>. First you must add the gem to your Gemfile.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">gem &quot;acts-as-taggable-on&quot;, &quot;~&gt; 3.4&quot;</code></pre></div>\n<p>Then</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ bundle install</code></pre></div>\n<p>Now you can run the migration generator</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">rake acts_as_taggable_on_engine:install:migrations</code></pre></div>\n<p>This copies some files from the gem to your <code class=\"language-text\">db/migrations</code> folder. When you look through these migrations, you’ll notice that the tags are polymorphic, which is good so you can easily just slap a <code class=\"language-text\">acts_as_taggable</code> on your taggable model. You should then go ahead and migrate your newly generated files.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">rake db:migrate</code></pre></div>\n<p>Now in the model you want taggable just add the aforementioned class method.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">class Post &lt; ActiveRecord::Base\n  acts_as_taggable\n  ...\nend</code></pre></div>\n<p>Now you can tag your posts, at least in the console. To get it working in the browser requires a little configuration but it shouldn’t be too difficult. In your form, just add</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&lt;p&gt;\n  &lt;%= form.label :tag_list %&gt;\n  &lt;%= form.text_field :tag_list %&gt;\n&lt;/p&gt;</code></pre></div>\n<p>Now you must configure it for strong params</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">def post_params\n  params.require(:post).permit(:title, :text, :tag_list)\nend</code></pre></div>\n<p>Now you can add tags, but how do you display them?</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&lt;% @post.tags.each do |tag| %&gt;\n  &lt;%= link_to tag, tag_path(tag.name) %&gt;\n&lt;% end %&gt;</code></pre></div>\n<p>So you are looping through your tags and making a separate <code class=\"language-text\">tags#show</code> page for each of them. this will generate paths like <code class=\"language-text\">/tags/ruby</code>. Next you need to make a path and a controller for the <code class=\"language-text\">tags#show</code> action. In <code class=\"language-text\">config/routes.rb</code> add</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">resources :tags, only: [:show]</code></pre></div>\n<p>Then make the controller.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">class TagsController &lt; ApplicationController\n  def show\n   @posts = Post.tagged_with(params[:id]).page(params[:page]).includes(:tags)\n  end\nend</code></pre></div>\n<p>What this method chain is doing is finding the tags by their name, which is in <code class=\"language-text\">params[:id]</code>, which you’ll remember we linked to the tag name to give us paths like <code class=\"language-text\">/tags/ruby</code> and not <code class=\"language-text\">tags/1</code>, <code class=\"language-text\">.tagged_with</code> finds tags by name and probably uses polymorphism internally to determine the type of tags it should find. The <code class=\"language-text\">#page</code> method is for pagination with <a href=\"https://github.com/amatsuda/kaminari\">Kaminari</a> as this feature still works because a tag collection is just an ActiveRecord Relation object, albeit a modified one. And you’ll want to slap an <code class=\"language-text\">#includes</code> method to the end to get rid of any N+1 queries. The view would look the same as the posts view but you might want to add the name of the tag which you can get without even setting an instance variable of using a SQL query by just adding <code class=\"language-text\">params[:id]</code> where you want the name to be displayed. Now your Rails app can act as taggable.</p>\n<p>But wait, there’s more. This gem also includes this cool feature called a tag cloud which changes the css class based on the tags frequency. You can leverage this to create larger links for more frequent tags for a cool effect. You can see this result on my <a href=\"/posts/posts\">posts page</a>.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&lt;% tag_cloud(@tags, %w(sm md lg xl)) do |tag, css_class| %&gt;\n  &lt;%= link_to tag.name, tag_path(tag.name), class: css_class %&gt;\n&lt;% end %&gt;</code></pre></div>\n<p>What this does is add the different css classes to your html links and you can style them by adding to your stylesheet.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">.sm {\n  font-size: 1em;\n}\n\n.md {\n  font-size: 1.33em;\n}\n\n.lg {\n  font-size: 1.66em;\n}\n\n.xl {\n  font-size: 2em;\n}</code></pre></div>\n<p>Now the more frequent tags will be larger and the less frequent will be smaller. Pretty cool feature I’d say.</p>","frontmatter":{"title":"Taggable Rails","date":"October 30, 2014"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/44-taggable-rails/","previous":{"fields":{"slug":"/43-you-got-your-params-in-my-url/"},"frontmatter":{"title":"You Got Your Params in My URL","id":43}},"next":{"fields":{"slug":"/45-when-is-it-okay-to-monkey-patch/"},"frontmatter":{"title":"When Is It Okay to Monkey Patch?","id":45}}}}}