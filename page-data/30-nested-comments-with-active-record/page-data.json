{"componentChunkName":"component---src-templates-blog-post-js","path":"/30-nested-comments-with-active-record/","webpackCompilationHash":"fef329071fa7503060c9","result":{"data":{"site":{"siteMetadata":{"title":"Charlie Massry","author":"Charlie Massry"}},"markdownRemark":{"id":"bbd1e4ae-3719-5637-820d-c7aa24ecbcb5","excerpt":"There are a couple of ways to let your users nest comments with Active Record. The main issue is the comments must start from somewhere, such as the first…","html":"<p>There are a couple of ways to let your users nest comments with Active Record. The main issue is the comments must start from somewhere, such as the first comment on a post. What would that database look like?</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Column     | Type    | Modifiers\n-----------------+-----------------------------+---------------------\nid         | integer | not null\nbody       | text    | not null\nuser_id    | integer | not null\ncomment_id | integer | not null</code></pre></div>\n<p>But wait, <code class=\"language-text\">comment_id</code> can’t be null because the comment tree won’t be able to start. Lets try that again.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Column     | Type    | Modifiers\n-----------------+-----------------------------+---------------------\nid         | integer | not null\nbody       | text    | not null\nuser_id    | integer | not null\ncomment_id | integer | </code></pre></div>\n<p>There. We’ll also need a post_id to reference the post it falls under, so lets do that right quick.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Column     | Type    | Modifiers\n-----------------+-----------------------------+---------------------\nid         | integer | not null\nbody       | text    | not null\nuser_id    | integer | not null\ncomment_id | integer |\npost_id    | integer | not null</code></pre></div>\n<p>This’ll work, but there is a column that is guaranteed to be null for quite a few records as it will apply to all top-level comments. Surely Active Record has a better way to model this data.</p>\n<p><img src=\"http://i.imgur.com/vZqytd1.png?1\" alt=\"Polymorphism\"></p>\n<p>A new challenger approaches.</p>\n<p>Polymorphism can allow the users to comment on multiple types of records and are very easily extendable, so you can start off with users being able to comment on posts or other comments, and then you can let them comment on any other database table by just changing a few lines of code around (just don’t forget to update your <a href=\"http://en.wikipedia.org/wiki/Entity%E2%80%93relationship_model\">ERD</a>).</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Column           | Type                   | Modifiers\n-----------------+-----------------------------+---------------------\nid               | integer                | not null \nbody             | text                   | not null\nuser_id          | integer                | not null\ncommentable_id   | integer                | not null\ncommentable_type | character varying(255) | not null</code></pre></div>\n<p>Now doesn’t that look a lot better. We don’t have any records that can be null, and the <code class=\"language-text\">not null</code> lines up a lot better. There is one downside to this method; when <code class=\"language-text\">comment.comments</code> is called, it fires off an extra query:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">SELECT &quot;comments&quot;.* FROM &quot;comments&quot;\n  WHERE &quot;comments&quot;.&quot;commentable_id&quot; = $1\n  AND &quot;comments&quot;.&quot;commentable_type&quot; = $2\n  [[&quot;commentable_id&quot;, 1], [&quot;commentable_type&quot;, &quot;Comment&quot;]].</code></pre></div>\n<p>This can be taxing on a server, but there are ways around it, such as adding a column to identify how far deep the nest is that defaults to 0 and only display a certain number of comments initially, but force the user to request more comments.</p>","frontmatter":{"title":"Nested Comments with Active Record","date":"August 29, 2014"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/30-nested-comments-with-active-record/","previous":{"fields":{"slug":"/29-testing-paperclip-with-rspec-capybara-and-factory-girl/"},"frontmatter":{"title":"Testing Paperclip with RSpec, Capybara, and Factory Girl","id":29}},"next":{"fields":{"slug":"/31-send-email-on-rails-with-actionmailer/"},"frontmatter":{"title":"Send Email on Rails with ActionMailer","id":31}}}}}