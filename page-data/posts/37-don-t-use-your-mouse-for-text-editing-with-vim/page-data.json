{"componentChunkName":"component---src-templates-blog-post-js","path":"/posts/37-don-t-use-your-mouse-for-text-editing-with-vim/","webpackCompilationHash":"8ad048b9041a01a887b8","result":{"data":{"site":{"siteMetadata":{"title":"Charlie Massry","author":"Charlie Massry"}},"markdownRemark":{"id":"e0d4b663-9540-58a3-a06f-0be8749fdcb3","excerpt":"Sublime Text is a very popular editor, but you must use your mouse at times, which takes some time away from your hands being at the keyboard, thus slowing you…","html":"<p>Sublime Text is a very popular editor, but you must use your mouse at times, which takes some time away from your hands being at the keyboard, thus slowing you down. <a href=\"http://www.vim.org\">Vim</a> solves this problem and so much more. As you do not use your mouse, Vim has a steep learning curve, to get started with vim</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ vimtutor</code></pre></div>\n<p>This introduces you to the basic movement commands, like moving around with <code class=\"language-text\">h</code>, <code class=\"language-text\">j</code>, <code class=\"language-text\">k</code>, <code class=\"language-text\">l</code>, or moving forward or backwards in words with <code class=\"language-text\">e</code> and <code class=\"language-text\">b</code> and combine these commands with numbers so you’ll DRY up your keystrokes. It also shows you the basics of entering insert mode to enter characters into the buffer, visual mode, which allows you to select characters, and replace mode, where you can replace the character your cursor is over with your keypress.  </p>\n<p>Once you have the basics down, you’ll realize you can combine motions, for example <code class=\"language-text\">ciw</code>(change in word) lets you start typing and when you press <code class=\"language-text\">ESC</code> the word you typed replaces the word the cursor was over. Another cool command is <code class=\"language-text\">A</code>, which brings you into insert mode at the end of the line, and <code class=\"language-text\">I</code>, which brings you into insert mode at the beginning of the line.</p>\n<p>Once you get a little more advanced, you might want to create macros that run shell commands for you. For example, I’d like a command that run all my tests for me in a Rails project. I use <a href=\"https://github.com/rails/spring\">Spring</a> so my Rails environment doesn’t have to start up every time I run RSpec, so I would just type in Vim when I want to run my tests</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">:!spring rspec</code></pre></div>\n<p>This can get annoying as that is 14 keystrokes not including <code class=\"language-text\">SHIFT</code>. Fortunately you can write macros using VimScript. While not nearly as elegant as Ruby, VimScript gets the job done easily enough. In your .vimrc file</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">function RunSpringRSpec()\n  execute &quot;!spring rspec&quot;\nendfunction\nmap &lt;Leader&gt;s :call RunSpringRSpec()&lt;CR&gt;</code></pre></div>\n<p><code class=\"language-text\">function</code> declares a new function and its name is <code class=\"language-text\">RunSpringRSpec</code> and the parentheses are necessary. It executes <code class=\"language-text\">!spring rspec</code>, the <code class=\"language-text\">!</code> is to execute terminal commands in vim and anything after that gets executed. After the function is declared, <code class=\"language-text\">&lt;LEADER&gt;s</code> is mapped to the function. <code class=\"language-text\">&lt;LEADER&gt;</code> is whatever key you designate as the <code class=\"language-text\">&lt;LEADER&gt;</code> key, <code class=\"language-text\">\\\\</code> by default. Every time I press <code class=\"language-text\">\\\\s</code> the function gets executed. <code class=\"language-text\">&lt;CR&gt;</code> or carriage return is simply the enter key. Once you get the hang of it, Vim is very intuitive, robust, text editor.</p>","frontmatter":{"title":"Don't Use Your Mouse for Text Editing with Vim","date":"October 06, 2014"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/posts/37-don-t-use-your-mouse-for-text-editing-with-vim/","previous":{"fields":{"slug":"/posts/36-using-redis-for-autocompletion-on-rails/"},"frontmatter":{"title":"Using Redis for Autocompletion on Rails","id":36}},"next":{"fields":{"slug":"/posts/38-devise-on-rails/"},"frontmatter":{"title":"Devise on Rails","id":38}}}}}