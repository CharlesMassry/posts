{"componentChunkName":"component---src-templates-blog-post-js","path":"/posts/27-nulluser-on-rails/","webpackCompilationHash":"3db41bdd2dfa647b85ad","result":{"data":{"site":{"siteMetadata":{"title":"Charlie Massry","author":"Charlie Massry"}},"markdownRemark":{"id":"9577365a-313a-535a-8d5e-206e9b03bb45","excerpt":"The Null Object Pattern is a popular software pattern that can be very useful as it can get rid of many nil checks in Ruby. Throughout your application, you may…","html":"<p>The Null Object Pattern is a popular software pattern that can be very useful as it can get rid of many nil checks in Ruby. Throughout your application, you may have many clauses like <code class=\"language-text\">if current_user.admin?</code>. If you require everyone who uses your application to log in, you won’t have any problems, but if you don’t, <code class=\"language-text\">NoMethodError: undefined method &#39;admin?&#39; for nil:NilClass</code>. So how would you get rid of this error? Well, you could simply wrap your <code class=\"language-text\">if current_user.admin?</code> in a <code class=\"language-text\">if current_user</code> check, but you have to do this everywhere <code class=\"language-text\">if current_user.admin?</code> is called. This can be annoying and time consuming to track down and fix. Luckily, the aforementioned Null Object Pattern can get rid of all these checks. Depending on which authentication system you used, you may have to tweak this method a little bit but in <a href=\"https://www.github.com/halogenandtoast/monban\">Monban</a>:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">class ApplicationController &lt; ActionController::Base\n  include Monban::ControllerHelpers\n\n  ...\n\n  def current_user\n    super || NullUser.new\n  end\nend\n\nclass NullUser\n  def admin?\n    false\n  end\nend</code></pre></div>\n<p>What’s happening is in <code class=\"language-text\">ApplicationController</code>, <code class=\"language-text\">current_user</code> is being redefined to either the superclass of <code class=\"language-text\">current_user</code>, or a new instance of <code class=\"language-text\">NullUser</code>, if the superclass returns nil. The reason why this works is because in Ruby, when you include a module in your class, the chain of inheritance actually gets changed so it checks the module first, then the parent object, so feel free to call <code class=\"language-text\">super</code> as much as you want. Now, throughout the application, you won’t have to change anything, and you won’t get that ugly <code class=\"language-text\">NoMethodError</code> message.</p>","frontmatter":{"title":"NullUser On Rails","date":"August 11, 2014"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/posts/27-nulluser-on-rails/","previous":{"fields":{"slug":"/posts/26-you-re-so-vain-you-probably-think-this-url-is-about-you/"},"frontmatter":{"title":"You're so vain, you probably think this URL is about you.","id":26}},"next":{"fields":{"slug":"/posts/28-multiple-images-with-paperclip/"},"frontmatter":{"title":"Multiple Images with PaperClip","id":28}}}}}