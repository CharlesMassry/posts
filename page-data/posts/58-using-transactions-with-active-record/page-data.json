{"componentChunkName":"component---src-templates-blog-post-js","path":"/posts/58-using-transactions-with-active-record/","webpackCompilationHash":"b345033e32c71e3a88cb","result":{"data":{"site":{"siteMetadata":{"title":"Charlie Massry","author":"Charlie Massry"}},"markdownRemark":{"id":"abd06541-b230-5c80-95f7-5b7fb1af0f73","excerpt":"A transaction is a database feature where you can create, update, or delete multiple records from a database and if just one of them fails, everything rolls…","html":"<p>A transaction is a database feature where you can create, update, or delete multiple records from a database and if just one of them fails, everything rolls back. For example, Postgres would roll everything back if there was some type of failure. ActiveRecord also provides support for this by allowing you to rollback if it is told to rollback. \\n \\n</p>\n<p>In a previous <a href=\"http://www.charliemassry.com/posts/56\">post</a>, I described why you would want to use service objects to encapsulate controller logic using an AirBnB style example application. Inside of this particular service object is exactly where you would want to use a transaction.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">class ReserveListing\n  def initialize(tenant, landlord, residence, date_range)\n    @tenant = tenant\n    @landlord = landlord\n    @residence = residence\n    @start_time = date_range.start_time\n    @end_time = date_range.end_time\n  end\n\n  def book\n    ActiveRecord::Base.transaction do\n      if residence_unavailable?\n        raise ActiveRecord::Rollback\n      end\n      remove_time_from_residence\n      create_reservation\n    end\n  end\nend</code></pre></div>\n<p>When a user reserves a residence, the model is responsible for checking if it is available, and if it isn’t, rollback the transaction. You can imagine that these very broad methods that the service object is using can be really complex, especially for a controller. Also, it wouldn’t fit in either of those ActiveRecord models because each model would become dependent on the other. with Another thing to note is in the above example, the conditional <code class=\"language-text\">if residence_unavailable?</code> method can trigger this <code class=\"language-text\">raise ActiveRecord::Rollback</code> exception. Normally you don’t want to explicitly raise an exception in your code, but whenever you <code class=\"language-text\">raise ActiveRecord::Rollback</code> within a transaction, everything is cancelled and you can then handle what happens next.</p>\n<p>Next, you may have to retrieve other information from this particular service object, such as sending out notifications. When you do this, you will need access to the reservation in this case. An easy way to gain access is to have a getter method and return self in the transaction.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">class ReserveListing\n  attr_reader :reservation\n  ...\n  def book\n    ActiveRecord::Base.transaction do\n      if residence_unavailable?\n        raise ActiveRecord::Rollback\n      end\n      remove_time_from_residence\n      create_reservation\n      self\n    end\n  end\nend</code></pre></div>\n<p>Now, inside of the controller action, you can then handle that reservation and pass it off to the <code class=\"language-text\">Notification</code> model, which is another service object to handle notifications.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">class ReserveListing\n  ...\n  def send_notifications\n    Notification.new(self).broadcast\n    # code that sends out notifications (email, text message, etc.)\n  end\n  ...\nend</code></pre></div>\n<p>Because you are returning self from <code class=\"language-text\">#book</code>, you can then call <code class=\"language-text\">#send_notifications</code> easily from the object.</p>\n<p>One thing to note about transactions is that if it fails, it returns <code class=\"language-text\">nil</code>, which is actually perfect for this particular pattern.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">class ReservationsController &lt; ApplicationController\n  def create\n    ...\n    reserve_listing = ReserveListing.new(\n      tenant,\n      landlord,\n      residence,\n      date_range\n    ) || NullReserveListing.new\n    ...\n  end\nend</code></pre></div>\n<p>Here we are using the Null Object Pattern, which I discussed in a previous <a href=\"http://www.charliemassry.com/posts/27\">post</a>. All you have to do is implement the public methods that get triggered on <code class=\"language-text\">ReserveListing</code> which will be very simple as you will just return nil.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">class NullReserveListing\n  def reservation\n  end\nend</code></pre></div>\n<p>Now when you go to handle the redirect or response in <code class=\"language-text\">reservations#create</code> you can check the truthiness of the reservation getter method on whatever type of object <code class=\"language-text\">reserve_listing</code> is and this will tell you if your transaction succeeded or failed.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">class ReservationsController &lt; ApplicationController\n  def create\n    ...\n    if reserve_listing.reservation\n      reserve_listing.send_notifications\n      render &quot;success&quot;\n    else\n      render &quot;error&quot;\n    end\n  end\nend</code></pre></div>\n<p>Working with transactions can be difficult at first, but with a little work, you can leverage ActiveRecord’s behavior to make your code very easy to come back to.</p>","frontmatter":{"title":"Using Transactions with Active Record","date":"March 06, 2015"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/posts/58-using-transactions-with-active-record/","previous":{"fields":{"slug":"/posts/57-pass-data-around-ios-with-nsuserdefaults/"},"frontmatter":{"title":"Pass Data Around iOS With NSUserDefaults","id":57}},"next":null}}}