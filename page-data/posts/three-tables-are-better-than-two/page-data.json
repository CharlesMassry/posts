{"componentChunkName":"component---src-templates-blog-post-js","path":"/posts/three-tables-are-better-than-two/","webpackCompilationHash":"","result":{"data":{"site":{"siteMetadata":{"title":"Charlie Massry","author":"Charlie Massry"}},"markdownRemark":{"id":"dcab47e0-00e4-5d62-9609-74b5a658a27d","excerpt":"In SQL, you can’t have two tables that have each other’s foreign key, you must use a third table to hold the foreign keys of the relationship. There are two…","html":"<p>In SQL, you can’t have two tables that have each other’s foreign key, you must use a third table to hold the foreign keys of the relationship. There are two ways to do this when using Ruby on Rails.</p>\n<p>The first and most common way is to use the <code class=\"language-text\">has_many :through</code> Active Record Association. You must create the third table and create an <code class=\"language-text\">ActiveRecord::Base</code> model. This is beneficial because you can add to it later if you need to.</p>\n<p>The other, less popular way is to use the <code class=\"language-text\">has_and_belongs_to_many</code> Active Record Association. This requires just a database migration and not a new model. The main problem with this is you cannot customize the association with any business logic, such as validations and callbacks, so it doesn’t lend itself to future-proofing code. Either method however, will allow you to call a getter method on the other tables objects it is associated with. </p>","frontmatter":{"title":"Three Tables Are Better Than Two","date":"July 10, 2014"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/posts/three-tables-are-better-than-two/","previous":{"fields":{"slug":"/posts/light-authentication-with-monban/"},"frontmatter":{"title":"Light Authentication With Monban","id":14}},"next":{"fields":{"slug":"/posts/how-to-work-with-le-gems-in-ruby-on-rails/"},"frontmatter":{"title":"How to Work With Le Gems in Ruby on Rails","id":16}}}}}