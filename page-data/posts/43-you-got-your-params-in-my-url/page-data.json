{"componentChunkName":"component---src-templates-blog-post-js","path":"/posts/43-you-got-your-params-in-my-url/","webpackCompilationHash":"dad2a5a98014bbbe5737","result":{"data":{"site":{"siteMetadata":{"title":"Charlie Massry","author":"Charlie Massry"}},"markdownRemark":{"id":"0131c958-1713-5524-b120-6e73f74145d0","excerpt":"Oftentimes as Rails developers, we will run into a situation where we are making something polymorphic, and we won’t want to make any more controllers than…","html":"<p>Oftentimes as Rails developers, we will run into a situation where we are making something polymorphic, and we won’t want to make any more controllers than models. I had described in an <a href=\"/posts/posts/21\">earlier post</a> to get around this by parsing the URL with a Regular Expression. This can get messy and confusing, so I want to show you an alternative. The popular URL helper method <code class=\"language-text\">#button_to</code> as well as <code class=\"language-text\">#link_to</code> can take a bunch of options, and when specified with a hash, passes that into the params hash, which is stored in the URL.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">button_to &quot;Like&quot;, like_path(likeable_type: &quot;image&quot;, likeable_id: 1)</code></pre></div>\n<p>This would produce a path like <code class=\"language-text\">/likes?likeable_type=image&amp;likeable_id=1</code>. While this will look messy for the client, there is no more URL parsing.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">params[:likeable_type] # =&gt; &quot;image&quot;\nparams[:likeable_id] # =&gt; 1</code></pre></div>\n<p>All you have left to do is setup strong params with it and you’re good to go.</p>","frontmatter":{"title":"You Got Your Params in My URL","date":"October 29, 2014"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/posts/43-you-got-your-params-in-my-url/","previous":{"fields":{"slug":"/posts/42-don-t-use-metaprogramming-when-you-can-just-throw-classes-at-things/"},"frontmatter":{"title":"Don't use Metaprogramming When You Can Just Throw Classes at Things","id":42}},"next":{"fields":{"slug":"/posts/44-taggable-rails/"},"frontmatter":{"title":"Taggable Rails","id":44}}}}}