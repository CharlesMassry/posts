{"componentChunkName":"component---src-templates-blog-post-js","path":"/posts/35-google-maps-on-rails/","webpackCompilationHash":"9bd9275ec41b64705887","result":{"data":{"site":{"siteMetadata":{"title":"Charlie Massry","author":"Charlie Massry"}},"markdownRemark":{"id":"368434a4-e791-57cb-a008-bdddad3472a6","excerpt":"Previously, I had blogged about how to set up your website to make requests to match string addresses to latitude and longitude coordinates. I had wrote about…","html":"<p>Previously, I had blogged about how to set up your website to make requests to match string addresses to latitude and longitude coordinates. I had <a href=\"/posts/34\">wrote about</a> how to use the <a href=\"http://www.rubygeocoder.com\">Geocoder</a> gem to accomplish this task. Now, to pull it all together with <a href=\"https://developers.google.com/maps/web/\">Google Maps</a>. Getting started is simple, first I recommend getting an API key from Google Maps. I also recommend installing the <a href=\"https://github.com/bkeepers/dotenv\">dotenv-rails</a> gem for easy API key management. Now simply create a <code class=\"language-text\">.env</code> file in the root of your Rails directory and enter your Google Maps API key in it like</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">GOOGLE_MAPS_API_KEY=your_api_key</code></pre></div>\n<p>Now, in the file where you want to display the map, you would want the files in your <code class=\"language-text\">&lt;head&gt;</code> tag so to easily do that in rails you can add a <code class=\"language-text\">content_for</code> erb tag which takes a block like</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&lt;% content_for :google_maps do %&gt;\n  ...\n&lt;% end %&gt;</code></pre></div>\n<p>In <code class=\"language-text\">layouts/application</code> add <code class=\"language-text\">&lt;%= yield :google_maps %&gt;</code> to above the standard <code class=\"language-text\">javascript_include_tag</code>.</p>\n<p>Inside this block, you’ll want to add the Google Maps logic and styling to get the map working. You’ll need to have a starting point, how deep of a zoom, and optionally markers that display location of specific items. As for the actual <code class=\"language-text\">&lt;body&gt;</code> tag, you’ll need to set a div with a particular id and reference that in your javascript to display the map at that part of the page like <code class=\"language-text\">&lt;div id=&quot;map-canvas&quot;&gt;&lt;/div&gt;</code>.</p>\n<p>You’ll want to add something for the style so it displays, like</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">html, body, #map-canvas {\n  height: 100%; margin: 0; padding: 0;\n}</code></pre></div>\n<p>And for your Javascript</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">var latLng = new google.maps.LatLng(\n  &lt;%= @current_location.latitude %&gt;,\n  &lt;%= @current_location.latitude %&gt;\n);\nvar mapOptions = {\n  center: latLng,\n  zoom: 12\n};\n\nvar map = new google.maps.Map(\n  document.getElementById(&#39;map-canvas&#39;),\n  mapOptions\n);\n\nsetMarkers(map, locations);</code></pre></div>\n<p>A few things of note, you can get the user’s current location a few ways, one of which is to get the request object and call location on it like <code class=\"language-text\">request.location</code>. The request object is an instance of the <code class=\"language-text\">ActionDispatch::Request</code> class that has a lot of data about the request such as the IP address and the path, as well as a bunch of constants like what url the request was coming from. If you have the <code class=\"language-text\">pry-rails</code> gem installed, you can simple add <code class=\"language-text\">binding.pry</code> into your controller, refresh the page, go into your terminal and type in <code class=\"language-text\">request</code> to see the entire object. Additionally, Geocoder adds a location method to this object which looks up the object based on the IP address, which is an expensive lookup but is not obtrusive to the user. Also it won’t work in development as <code class=\"language-text\">request.location</code> will return <code class=\"language-text\">[0.0, 0.0]</code> because it is coming from <code class=\"language-text\">127.0.0.1</code> or <code class=\"language-text\">localhost</code>. It will put you at those coordinates which is where the Equator and the Prime Meridian intersect; off the coast of Africa in the Atlantic Ocean.</p>\n<p>Another thing to note is the <code class=\"language-text\">locations</code> variable that I show being passed into the <code class=\"language-text\">setMarkers</code> function. Ideally this locations variable is valid JSON and <code class=\"language-text\">setMarkers</code> iterates through the JSON feed.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">function setMarkers(map, locations) {\n  for (var i = 0; i &lt; locations.length; i++) {\n    var location = locations[i];\n    var locationLatLng = new google.maps.LatLng(location[1], location[2]);\n\n    var marker = new google.maps.Marker({\n      position: locationLatLng,\n      map: map,\n      title: location[0],\n      zIndex: location[3]\n    });\n\n    var contentString = &#39;&lt;a href=&quot;/locations/&#39; + location[4] + &#39;&quot;&gt;&#39; + location[0] + &#39;&lt;/a&gt;&#39;\n\n    var infoWindow = new google.maps.InfoWindow({\n      content: contentString\n    });\n\n    google.maps.event.addListener(marker, &#39;click&#39;, function(){\n      infoWindow.open(map, marker);\n    });\n\n    marker.setMap(map);\n  };\n}</code></pre></div>\n<p>You can the nearby locations using the Geocoder method <code class=\"language-text\">#near</code> which takes two arguments, one of which is where it originates from and the other one is the number of miles in the radius. So in your controller you might have</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">def index\n  @current_location = request.location\n  @locations = Location.near(@current_location.coordinates, 15)\nend</code></pre></div>\n<p>Once you have all of this set up you can call</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">google.maps.event.addDomListener(window, &#39;load&#39;, initialize);</code></pre></div>\n<p>and your all set.</p>","frontmatter":{"title":"Google Maps on Rails","date":"September 29, 2014"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/posts/35-google-maps-on-rails/","previous":{"fields":{"slug":"/posts/34-geolocating-on-rails/"},"frontmatter":{"title":"Geolocating on Rails","id":34}},"next":{"fields":{"slug":"/posts/36-using-redis-for-autocompletion-on-rails/"},"frontmatter":{"title":"Using Redis for Autocompletion on Rails","id":36}}}}}