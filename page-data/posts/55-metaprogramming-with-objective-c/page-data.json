{"componentChunkName":"component---src-templates-blog-post-js","path":"/posts/55-metaprogramming-with-objective-c/","webpackCompilationHash":"f3fef4f01b7ec69c9efb","result":{"data":{"site":{"siteMetadata":{"title":"Charlie Massry","author":"Charlie Massry"}},"markdownRemark":{"id":"96c61ba8-861f-5c25-9ba6-16a4cd9b27e2","excerpt":"If you have fallen in love with Ruby’s support for metaprogramming like I did, but want to get into iOS development, fear not as there is some features of…","html":"<p>If you have fallen in love with Ruby’s support for metaprogramming like I did, but want to get into iOS development, fear not as there is some features of metaprogramming you can use in Objective C.</p>\n<p>In Ruby, if you want to dynamically send a message based on the value of a string, you can use <code class=\"language-text\">send</code>, which takes an argument and any parameters passed in. While this method might not be too useful for Ruby Standard Library Classes, you can use something like this to help out with similarly named methods on the same object. For example, when programming for iOS, you may need to manipulate the color of some view object, like a button. The traditional way to do this is to use <code class=\"language-text\">+colorWithRed:green:blue:alpha:</code> on <code class=\"language-text\">UIColor</code>. There are however convenient methods to get specific colors like <code class=\"language-text\">+redColor</code> and <code class=\"language-text\">+blackColor</code>. If you give an option to the user, say when a button is clicked it selects a color and sets it to an <code class=\"language-text\">NSString</code> instance variable.</p>\n<p>In Ruby this would not look like anything we haven’t seen before.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">@color # =&gt; &quot;red&quot;\ncolor_method = @color + &quot;Color&quot;\nui_color = UIColor.send(color_method)</code></pre></div>\n<p>Here you can see the instance variable <code class=\"language-text\">@color</code> is set to <code class=\"language-text\">&quot;red&quot;</code>, and what we want to do is append the string <code class=\"language-text\">&quot;Color&quot;</code> to it and send that method to <code class=\"language-text\">UIColor</code>. This solution in Objective C is not going to be nearly as elegant.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">_color; // =&gt; @&quot;red&quot;;\nNSString *colorNamed = [_color stringByAppendingString:@&quot;Color&quot;];\nSEL colorSelector = NSSelectorFromString(colorNamed);\nUIColor *uiColor = [UIColor performSelector:colorSelector];</code></pre></div>\n<p>Here you must use <code class=\"language-text\">-stringByAppendingString:</code> instead of <code class=\"language-text\">+</code>. Next, you must create a method object to be able to send it to the UIColor class by using the <code class=\"language-text\">NSSelectorFromString(colorNamed)</code> function. While rarely used, in both Objective C and Ruby, even methods themselves are objects. In Objective C, you can see this because you are declaring the type as a selector, which is what the Objective C runtime calls methods. Finally, you must perform that selector on the <code class=\"language-text\">UIColor</code> class by using <code class=\"language-text\">performSelector:</code> which takes a <code class=\"language-text\">selector</code> type and returns an <code class=\"language-text\">id</code> type and now you have the right UIColor. This method returns an <code class=\"language-text\">id</code> type because it doesn’t care what it returns as long as it inherits from <code class=\"language-text\">NSObject</code>, which takes advantage of Objective C’s optional dynamic typing. You must however, make sure that it only receives defined messages, or your app will crash.</p>","frontmatter":{"title":"Metaprogramming with Objective C","date":"February 23, 2015"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/posts/55-metaprogramming-with-objective-c/","previous":{"fields":{"slug":"/posts/54-building-a-blog-reader-in-ios-part-2/"},"frontmatter":{"title":"Building a Blog Reader in iOS, Part 2","id":54}},"next":{"fields":{"slug":"/posts/56-put-your-controllers-on-a-diet-with-service-objects/"},"frontmatter":{"title":"Put Your Controllers On a Diet With Service Objects","id":56}}}}}