{"componentChunkName":"component---src-templates-blog-post-js","path":"/posts/13-cookie-monster-would-not-be-impressed-by-these-cookies/","webpackCompilationHash":"6906578f74f2bac6e1b0","result":{"data":{"site":{"siteMetadata":{"title":"Charlie Massry","author":"Charlie Massry"}},"markdownRemark":{"id":"93ff8f3e-85af-5c84-a12f-a222c21d57b9","excerpt":"In every Internet Browser, there are what are called cookies. These are a way of overriding the fact that HTTP is a stateless protocol, meaning that each HTTP…","html":"<p>In every Internet Browser, there are what are called cookies. These are a way of overriding the fact that HTTP is a stateless protocol, meaning that each HTTP request stands on its own. Without cookies, you would have to manually type in your login information with every HTTP request, which would make the Internet a lot less fun. Cookies store this information in your browser so you don’t have to and send this information with every request.  </p>\n<p>Although this seems pretty simple, the web developer must include special code to tell your browser what to store as cookies. For example, in Ruby on Rails, a new <code class=\"language-text\">SessionsController</code> must be created to manage user sessions, and instead of creating a <code class=\"language-text\">Session</code> model to store information in the database, the information must be stored in the user’s browser as an encrypted string. this information must also be accessed when the user signs out.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">class SessionsController &lt; ApplicationController\n  def new\n  end\n\n  def create\n    user = User.find_by(email: params[:session][:email])\n    cookies.signed[:user_id] = user.id\n    redirect_to galleries_path\n  end\n\n    def destroy\n      cookies.delete(:user_id)\n      redirect_to galleries_path\n    end\n  end</code></pre></div>\n<p>What’s happening here is the new method just directs the user to the sign in form. Then, once the user signs in, it finds the user by the email address, which is stored in the session hash inside of the params hash as an encrypted string. This is then checked to see if the <code class=\"language-text\">user_id</code> is the same as the decrypted string. When signing out, <code class=\"language-text\">destroy</code> is called and the <code class=\"language-text\">user_id</code> field in the cookies is deleted.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">class ApplicationController &lt; ActionController::Base\n  def current_user\n    @user ||= User.find_by(id: cookies.signed[:user_id])\n  end\n  helper_method :current_user\n\n  def signed_in?\n    current_user\n  end\n  helper_method :signed_in?\nend</code></pre></div>\n<p>Here we have the application controller, which uses the cookies in the browser to tell the views which user is currently signed in, and if a user is signed in. It is helpful to have these two methods even though they do the same thing because you can use <code class=\"language-text\">current_user</code> to display the name of the current user, while you can use <code class=\"language-text\">signed_in?</code> for conditionals in <code class=\"language-text\">.erb</code>. Being the <code class=\"language-text\">ApplicationController</code>, it can be called from any view application wide by including <code class=\"language-text\">helper_method</code>, this leads to keeping your code DRY.</p>","frontmatter":{"title":"Cookie Monster Would Not Be Impressed By These Cookies","date":"July 07, 2014"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/posts/13-cookie-monster-would-not-be-impressed-by-these-cookies/","previous":{"fields":{"slug":"/posts/12-yo-dawg-i-heard-you-like-partials-so-i-put-a-partial-in-your-partial-so-you-can-refactor-while-you-refactor/"},"frontmatter":{"title":"Yo Dawg, I Heard You Like Partials So I Put a Partial In Your Partial So You Can Refactor While You Refactor.","id":12}},"next":{"fields":{"slug":"/posts/14-light-authentication-with-monban/"},"frontmatter":{"title":"Light Authentication With Monban","id":14}}}}}