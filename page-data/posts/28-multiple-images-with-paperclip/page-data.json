{"componentChunkName":"component---src-templates-blog-post-js","path":"/posts/28-multiple-images-with-paperclip/","webpackCompilationHash":"9bd9275ec41b64705887","result":{"data":{"site":{"siteMetadata":{"title":"Charlie Massry","author":"Charlie Massry"}},"markdownRemark":{"id":"50b68f48-8932-50a5-a654-d87c8776059c","excerpt":"For any given web application, you probably want your users to be able to embed pictures or other types of multimedia for a richer experience. This can be…","html":"<p>For any given web application, you probably want your users to be able to embed pictures or other types of multimedia for a richer experience. This can be difficult to do as you <strong>NEVER</strong> want to store files in the database (this is one of those rare absolute cases where there are no exceptions). Fortunately for you Ruby on Rails developers, there’s a gem for that. <a href=\"https://www.github.com/thoughtbot/paperclip\">Paperclip</a>, made by <a href=\"http://thoughtbot.com\">thoughtbot</a>, makes it easy to store files in your file system (or AWS if you want) and simply have the database store the path to the file. Another benefit of Paperclip is it integrates very nicely with <a href=\"http://www.imagemagick.org/\">imagemagick</a>, so you can process uploaded files with relative ease. If you aren’t sold on Paperclip yet, I should probably tell you that Paperclip is really simple to get up and running thanks to the robust documentation. While the documentation doesn’t go into detail about having a model that has many attachments, it can also be done with relative ease.</p>\n<p>If the main product of your website needs multiple photos, you can create a new table that just has the foreign key of your main product. For example, if the main product is <code class=\"language-text\">Listing</code>, and you want each <code class=\"language-text\">Listing</code> to have many photos, you can create a new table called <code class=\"language-text\">photos</code> and make sure it has a <code class=\"language-text\">listing_id</code> in your migration. In the listing model, you can add <code class=\"language-text\">has_many :photos</code> and you are ready to add attachments to photos with Paperclip, so simply read Paperclip documentation and you are good to go.</p>\n<p>One thing of note, the location that Paperclip stores files is in the <code class=\"language-text\">public/system/:class/:attachment/:id_partition/:style</code> folder, where the colons represent variables. You may want to add one of these subdirectories to your <code class=\"language-text\">.gitignore</code> file if you are using git as it will upload all your development files to your git server, such as Github.</p>","frontmatter":{"title":"Multiple Images with PaperClip","date":"August 14, 2014"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/posts/28-multiple-images-with-paperclip/","previous":{"fields":{"slug":"/posts/27-nulluser-on-rails/"},"frontmatter":{"title":"NullUser On Rails","id":27}},"next":{"fields":{"slug":"/posts/29-testing-paperclip-with-rspec-capybara-and-factory-girl/"},"frontmatter":{"title":"Testing Paperclip with RSpec, Capybara, and Factory Girl","id":29}}}}}