{"componentChunkName":"component---src-templates-blog-post-js","path":"/posts/26-you-re-so-vain-you-probably-think-this-url-is-about-you/","webpackCompilationHash":"99472ceeb0703c0d9ec0","result":{"data":{"site":{"siteMetadata":{"title":"Charlie Massry","author":"Charlie Massry"}},"markdownRemark":{"id":"50a47237-59ce-5ef9-bc87-27af08e2ad5d","excerpt":"In Ruby on Rails, when you want to make a particular route that has a parameter with spaces in it, you would typically get something like /regions/new%20york…","html":"<p>In Ruby on Rails, when you want to make a particular route that has a parameter with spaces in it, you would typically get something like /regions/new%20york for a region named new york. This however looks terrible and your users would be very upset about typing this out. Fortunately, there is a way to remedy this by creating a URL slug.</p>\n<p>First add a column called slug to the table of the resource you want to fix.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">rails generate migration AddSlugToRegion slug</code></pre></div>\n<p>This creates the migration that you MUST edit before running <code class=\"language-text\">rake db:migrate</code>.</p>\n<p>The preferred way is to copy and parameterize the name column of each entry after the column is created.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">class AddSlugToRegion &lt; ActiveRecord::Migration\n  class Region &lt; ActiveRecord::Base\n  end\n\n  def change\n    add_column :regions, :slug, :string, index: true\n\n    Region.all.each do |region|\n      region.slug = region.name.parameterize\n      region.save\n    end\n  end\nend</code></pre></div>\n<p>You don’t have to open up the Region model as you are just adding to a new column and you shouldn’t have any validations affecting it, but it can be a good habit to use. Then, you are adding a column called slug which is a string and is indexed. Lastly, you are iterating through each row and changing the column to the parameterized name.</p>\n<p>You must also edit the corresponding model.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">class Region &lt; ActiveRecord::Base\n  validates :name, uniqueness: true, presence: true\n  after_create :generate_slug\n  before_update :assign_slug\n\n  def to_param\n    slug\n  end\n\n  private\n\n  def assign_slug\n    self.slug = to_slug\n  end\n\n  def generate_slug\n    update_attributes(slug: to_slug)\n  end\n\n  def to_slug\n    name.parameterize\n  end\nend</code></pre></div>\n<p>This seems like a lot to add, but what is happening, during record creation, is it is updating the slug after the record is created. For updating, it must be before the record is saved because it would already have a url assigned to it.</p>\n<p>The controller must also be edited.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">class RegionsController &lt; ApplicationController\n  ...\n  def show\n    @region = Region.find_by(slug: params[:id])\n  end\n  ...\nend</code></pre></div>\n<p>Here it is finding the region by its slug value. So the slug value <code class=\"language-text\">new-york</code> would be equal to the record that has <code class=\"language-text\">new york</code> in the name field. Now you know how to combine <a href=\"http://www.charliemassry.com/posts/18-to_param-the-best-method-ever\">this post</a> to use the <code class=\"language-text\">to_param</code> method with the current post to really generate nice routes with any number of named records. I should note, make sure you validate that the name would not equal a path you would use, like <code class=\"language-text\">new</code> or <code class=\"language-text\">edit</code>. Look for more dynamic routes in a future post.</p>","frontmatter":{"title":"You're so vain, you probably think this URL is about you.","date":"August 08, 2014"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/posts/26-you-re-so-vain-you-probably-think-this-url-is-about-you/","previous":{"fields":{"slug":"/posts/25-ruby-enumerable-part-2/"},"frontmatter":{"title":"Ruby Enumerable, Part 2","id":25}},"next":{"fields":{"slug":"/posts/27-nulluser-on-rails/"},"frontmatter":{"title":"NullUser On Rails","id":27}}}}}