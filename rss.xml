<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Charlie Massry]]></title><description><![CDATA[Charlie Massry - a Software Engineer.]]></description><link>https://www.charliemassry.com</link><generator>GatsbyJS</generator><lastBuildDate>Mon, 14 Oct 2019 03:46:58 GMT</lastBuildDate><item><title><![CDATA[Using Transactions with Active Record]]></title><description><![CDATA[A transaction is a database feature where you can create, update, or delete multiple records from a database and if just one of them fails…]]></description><link>https://www.charliemassry.com/posts/58-using-transactions-with-active-record/</link><guid isPermaLink="false">https://www.charliemassry.com/posts/58-using-transactions-with-active-record/</guid><pubDate>Fri, 06 Mar 2015 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;A transaction is a database feature where you can create, update, or delete multiple records from a database and if just one of them fails, everything rolls back. For example, Postgres would roll everything back if there was some type of failure. ActiveRecord also provides support for this by allowing you to rollback if it is told to rollback. \n \n&lt;/p&gt;
&lt;p&gt;In a previous &lt;a href=&quot;http://www.charliemassry.com/posts/56&quot;&gt;post&lt;/a&gt;, I described why you would want to use service objects to encapsulate controller logic using an AirBnB style example application. Inside of this particular service object is exactly where you would want to use a transaction.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;class ReserveListing
  def initialize(tenant, landlord, residence, date_range)
    @tenant = tenant
    @landlord = landlord
    @residence = residence
    @start_time = date_range.start_time
    @end_time = date_range.end_time
  end

  def book
    ActiveRecord::Base.transaction do
      if residence_unavailable?
        raise ActiveRecord::Rollback
      end
      remove_time_from_residence
      create_reservation
    end
  end
end&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;When a user reserves a residence, the model is responsible for checking if it is available, and if it isn’t, rollback the transaction. You can imagine that these very broad methods that the service object is using can be really complex, especially for a controller. Also, it wouldn’t fit in either of those ActiveRecord models because each model would become dependent on the other. with Another thing to note is in the above example, the conditional &lt;code class=&quot;language-text&quot;&gt;if residence_unavailable?&lt;/code&gt; method can trigger this &lt;code class=&quot;language-text&quot;&gt;raise ActiveRecord::Rollback&lt;/code&gt; exception. Normally you don’t want to explicitly raise an exception in your code, but whenever you &lt;code class=&quot;language-text&quot;&gt;raise ActiveRecord::Rollback&lt;/code&gt; within a transaction, everything is cancelled and you can then handle what happens next.&lt;/p&gt;
&lt;p&gt;Next, you may have to retrieve other information from this particular service object, such as sending out notifications. When you do this, you will need access to the reservation in this case. An easy way to gain access is to have a getter method and return self in the transaction.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;class ReserveListing
  attr_reader :reservation
  ...
  def book
    ActiveRecord::Base.transaction do
      if residence_unavailable?
        raise ActiveRecord::Rollback
      end
      remove_time_from_residence
      create_reservation
      self
    end
  end
end&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now, inside of the controller action, you can then handle that reservation and pass it off to the &lt;code class=&quot;language-text&quot;&gt;Notification&lt;/code&gt; model, which is another service object to handle notifications.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;class ReserveListing
  ...
  def send_notifications
    Notification.new(self).broadcast
    # code that sends out notifications (email, text message, etc.)
  end
  ...
end&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Because you are returning self from &lt;code class=&quot;language-text&quot;&gt;#book&lt;/code&gt;, you can then call &lt;code class=&quot;language-text&quot;&gt;#send_notifications&lt;/code&gt; easily from the object.&lt;/p&gt;
&lt;p&gt;One thing to note about transactions is that if it fails, it returns &lt;code class=&quot;language-text&quot;&gt;nil&lt;/code&gt;, which is actually perfect for this particular pattern.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;class ReservationsController &amp;lt; ApplicationController
  def create
    ...
    reserve_listing = ReserveListing.new(
      tenant,
      landlord,
      residence,
      date_range
    ) || NullReserveListing.new
    ...
  end
end&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here we are using the Null Object Pattern, which I discussed in a previous &lt;a href=&quot;http://www.charliemassry.com/posts/27&quot;&gt;post&lt;/a&gt;. All you have to do is implement the public methods that get triggered on &lt;code class=&quot;language-text&quot;&gt;ReserveListing&lt;/code&gt; which will be very simple as you will just return nil.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;class NullReserveListing
  def reservation
  end
end&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now when you go to handle the redirect or response in &lt;code class=&quot;language-text&quot;&gt;reservations#create&lt;/code&gt; you can check the truthiness of the reservation getter method on whatever type of object &lt;code class=&quot;language-text&quot;&gt;reserve_listing&lt;/code&gt; is and this will tell you if your transaction succeeded or failed.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;class ReservationsController &amp;lt; ApplicationController
  def create
    ...
    if reserve_listing.reservation
      reserve_listing.send_notifications
      render &amp;quot;success&amp;quot;
    else
      render &amp;quot;error&amp;quot;
    end
  end
end&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Working with transactions can be difficult at first, but with a little work, you can leverage ActiveRecord’s behavior to make your code very easy to come back to.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Pass Data Around iOS With NSUserDefaults]]></title><description><![CDATA[When dealing with the Model-View-Controller pattern, one of the problems you will face is that it is stateless, while the application itself…]]></description><link>https://www.charliemassry.com/posts/57-pass-data-around-ios-with-nsuserdefaults/</link><guid isPermaLink="false">https://www.charliemassry.com/posts/57-pass-data-around-ios-with-nsuserdefaults/</guid><pubDate>Thu, 26 Feb 2015 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;When dealing with the Model-View-Controller pattern, one of the problems you will face is that it is stateless, while the application itself is a fluid object, and controllers are independent objects that have no knowledge of what called it. This can be a problem if you need data to be passed around. In iOS, you can pass data around by using &lt;code class=&quot;language-text&quot;&gt;-prepareForSegue:sender:&lt;/code&gt;. This however can get complicated if you need to pass data through a &lt;code class=&quot;language-text&quot;&gt;UITabBarController&lt;/code&gt; and a &lt;code class=&quot;language-text&quot;&gt;UINavigationController&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;In Rails, we might do something like pass around the params hash in the URL. This however can get really messy really quickly. A good approach in Rails would probably be to store this information to the database. In iOS, for primitive data types, there is NSUserDefaults, which is a key value store that is good for storing user preferences for your app. There is also Core Data, iOS’s ORM, which I will cover in a later post.&lt;/p&gt;
&lt;p&gt;When making an app where the user can match cards similar to concentration, one of the problems faced is how to allow the user to choose what the card back looks like. If you want to give the user that option, you need to make another View and another Controller. When a specific image is touched, set the value of the given key to a primitive data type that can be used to access the image.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;-(void)prepareForSegue:(UIStoryboardSegue *)segue sender:(id)sender {
    NSUserDefaults *schoolChoice = [NSUserDefaults standardUserDefaults];
    self.school = [self schoolForButton:sender];
    [schoolChoice setObject:self.school forKey:@&amp;quot;school&amp;quot;];
    [schoolChoice synchronize];
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In this method, &lt;code class=&quot;language-text&quot;&gt;NSUserDefaults&lt;/code&gt; is first instantiated with a factory method, &lt;code class=&quot;language-text&quot;&gt;+standardUserDefaults&lt;/code&gt;. Next, the &lt;code class=&quot;language-text&quot;&gt;-schoolForButton:&lt;/code&gt; method turns the button pressed into a string to retrieve the school later and just make sure that this image name is in the images folder. That string is then stored in the &lt;code class=&quot;language-text&quot;&gt;NSUserDefaults&lt;/code&gt; instance by sending it the &lt;code class=&quot;language-text&quot;&gt;-setObject:forKey:&lt;/code&gt;. Finally you must send it &lt;code class=&quot;language-text&quot;&gt;-synchronize&lt;/code&gt; so it saves it for use later.&lt;/p&gt;
&lt;p&gt;Now in the controller that will be responsible to play the game, we have to decide where we want to initialize this image name. A perfect place is in &lt;code class=&quot;language-text&quot;&gt;-viewDidLoad&lt;/code&gt; as the controller is already initialized, so you will have access to all its instance variables, and the user won’t even see the difference.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;-(void)viewDidLoad {
    NSUserDefaults *schoolChoice = [NSUserDefaults standardUserDefaults];
    self.school = [schoolChoice stringForKey:@&amp;quot;school&amp;quot;];
    [super viewDidLoad];
    [self updateUI];
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Again, we are instantiating &lt;code class=&quot;language-text&quot;&gt;NSUserDefaults&lt;/code&gt;, but this time we are retrieving the school and passing it to the instance variable. Then we just call &lt;code class=&quot;language-text&quot;&gt;super&lt;/code&gt; to have the default behavior. We do however need to tell it to update the card backs on all of the cards, and &lt;code class=&quot;language-text&quot;&gt;-updateUI&lt;/code&gt; will provide us with this exact behavior which calls a method that sets the card back to the appropriate school image.&lt;/p&gt;
&lt;p&gt;You can find the repository for this source code on &lt;a href=&quot;http://github.com/CharlesMassry/Machismo&quot;&gt;Github&lt;/a&gt;.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Put Your Controllers On a Diet With Service Objects]]></title><description><![CDATA[When you use the Model-View-Controller pattern with Rails, you can be dragged into a state of only making models for your ActiveRecord…]]></description><link>https://www.charliemassry.com/posts/56-put-your-controllers-on-a-diet-with-service-objects/</link><guid isPermaLink="false">https://www.charliemassry.com/posts/56-put-your-controllers-on-a-diet-with-service-objects/</guid><pubDate>Wed, 25 Feb 2015 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;When you use the Model-View-Controller pattern with Rails, you can be dragged into a state of only making models for your ActiveRecord objects. This can be bad if your controller needs to interact with two different models where either the logic doesn’t belong in one, or it is simply too cumbersome to fit into a single model. Take for example user sign up. If a bunch of actions need to be fired off when the user signs up, then you might think to put them into a controller or the user model, or even worse, as ActiveRecord Callbacks. Another example is an AirBnB type website where the user makes a reservation on a listing. Sure you could put it in the listing model but now the listing is responsible for deleting itself and creating a reservation, violating the Single Responsibility Principle. Because the models are supposed to describe a single piece of logic, you can make another model that simply glues all of the models together. You can think of this model as a way to do everything on a higher level as opposed to getting down to the base of the application. This is the purpose of a service object.There is also a significant benefit to testing when using service objects. If you put all your logic in your controller, then you can only test it with an integration test, which must fire up a headless web browser, which you know is going to be slow. Because you are using a service object, you can rigorously test the model quickly, which will lead to wider test coverage, getting all of those edge cases, and it will make you want to test that file more.Now that we know we need to use this, how would we go about building this. In the case of the AirBnB style website, we would make a &lt;code class=&quot;language-text&quot;&gt;ReserveListing&lt;/code&gt; model which would be initialized with the two parties and the parameters, such as start date and end date.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;class ReserveListing
 def initialize(tenant, landlord, residence, start_time, end_time)
   @tenant = tenant
   @landlord = landlord
   @start_time = start_time
   @end_time = end_time
 end
end&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is good so far, but that is quite a number of arguments that this service object depends on. We can cut this down easily by making a date range object and injecting it as an argument. This is called Dependency Injection, and the benefit is it forces us to separate the models even further so they are not too dependent on each other.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt; class ReserveListing
 def initialize(tenant, landlord, residence, date_range)
   @tenant = tenant
   @landlord = landlord
   @residence = residence
   @start_time = date_range.start_time
   @end_time = date_range.end_time
 end
end
 &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This makes interacting with this class from the outside easier as all you need is the parties that are involved and some object that responds to &lt;code class=&quot;language-text&quot;&gt;start_time&lt;/code&gt; and &lt;code class=&quot;language-text&quot;&gt;end_time&lt;/code&gt;. If you think about how this class will be instantiated and used, it will have a very nice API.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;residence = Residence.find(params[:residence_id])
landlord = residence.landlord
date_range = DateRange.new(reservation_params)
booking = ReserveListing.new(current_user, landlord, residence, date_range).book&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You must make this &lt;code class=&quot;language-text&quot;&gt;DateRange&lt;/code&gt; class that is a container and date parser for &lt;code class=&quot;language-text&quot;&gt;start_time&lt;/code&gt; and &lt;code class=&quot;language-text&quot;&gt;end_time&lt;/code&gt;. Also, you don’t want to put the logic of finding the landlord and residence inside of the service object because in this case it would be better to use Dependency Injection. Inside the &lt;code class=&quot;language-text&quot;&gt;ReserveListing&lt;/code&gt; class is where you must put the code to remove the listing at those times and create the reservation, probably using a transaction, with an added benefit of having any other actions you’d like fire off without using the appropriately hated ActiveRecord Callbacks. So use service objects and your controllers won’t even need a personal trainer to stay in shape.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Metaprogramming with Objective C]]></title><description><![CDATA[If you have fallen in love with Ruby’s support for metaprogramming like I did, but want to get into iOS development, fear not as there is…]]></description><link>https://www.charliemassry.com/posts/55-metaprogramming-with-objective-c/</link><guid isPermaLink="false">https://www.charliemassry.com/posts/55-metaprogramming-with-objective-c/</guid><pubDate>Mon, 23 Feb 2015 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;If you have fallen in love with Ruby’s support for metaprogramming like I did, but want to get into iOS development, fear not as there is some features of metaprogramming you can use in Objective C.&lt;/p&gt;
&lt;p&gt;In Ruby, if you want to dynamically send a message based on the value of a string, you can use &lt;code class=&quot;language-text&quot;&gt;send&lt;/code&gt;, which takes an argument and any parameters passed in. While this method might not be too useful for Ruby Standard Library Classes, you can use something like this to help out with similarly named methods on the same object. For example, when programming for iOS, you may need to manipulate the color of some view object, like a button. The traditional way to do this is to use &lt;code class=&quot;language-text&quot;&gt;+colorWithRed:green:blue:alpha:&lt;/code&gt; on &lt;code class=&quot;language-text&quot;&gt;UIColor&lt;/code&gt;. There are however convenient methods to get specific colors like &lt;code class=&quot;language-text&quot;&gt;+redColor&lt;/code&gt; and &lt;code class=&quot;language-text&quot;&gt;+blackColor&lt;/code&gt;. If you give an option to the user, say when a button is clicked it selects a color and sets it to an &lt;code class=&quot;language-text&quot;&gt;NSString&lt;/code&gt; instance variable.&lt;/p&gt;
&lt;p&gt;In Ruby this would not look like anything we haven’t seen before.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;@color # =&amp;gt; &amp;quot;red&amp;quot;
color_method = @color + &amp;quot;Color&amp;quot;
ui_color = UIColor.send(color_method)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here you can see the instance variable &lt;code class=&quot;language-text&quot;&gt;@color&lt;/code&gt; is set to &lt;code class=&quot;language-text&quot;&gt;&amp;quot;red&amp;quot;&lt;/code&gt;, and what we want to do is append the string &lt;code class=&quot;language-text&quot;&gt;&amp;quot;Color&amp;quot;&lt;/code&gt; to it and send that method to &lt;code class=&quot;language-text&quot;&gt;UIColor&lt;/code&gt;. This solution in Objective C is not going to be nearly as elegant.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;_color; // =&amp;gt; @&amp;quot;red&amp;quot;;
NSString *colorNamed = [_color stringByAppendingString:@&amp;quot;Color&amp;quot;];
SEL colorSelector = NSSelectorFromString(colorNamed);
UIColor *uiColor = [UIColor performSelector:colorSelector];&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here you must use &lt;code class=&quot;language-text&quot;&gt;-stringByAppendingString:&lt;/code&gt; instead of &lt;code class=&quot;language-text&quot;&gt;+&lt;/code&gt;. Next, you must create a method object to be able to send it to the UIColor class by using the &lt;code class=&quot;language-text&quot;&gt;NSSelectorFromString(colorNamed)&lt;/code&gt; function. While rarely used, in both Objective C and Ruby, even methods themselves are objects. In Objective C, you can see this because you are declaring the type as a selector, which is what the Objective C runtime calls methods. Finally, you must perform that selector on the &lt;code class=&quot;language-text&quot;&gt;UIColor&lt;/code&gt; class by using &lt;code class=&quot;language-text&quot;&gt;performSelector:&lt;/code&gt; which takes a &lt;code class=&quot;language-text&quot;&gt;selector&lt;/code&gt; type and returns an &lt;code class=&quot;language-text&quot;&gt;id&lt;/code&gt; type and now you have the right UIColor. This method returns an &lt;code class=&quot;language-text&quot;&gt;id&lt;/code&gt; type because it doesn’t care what it returns as long as it inherits from &lt;code class=&quot;language-text&quot;&gt;NSObject&lt;/code&gt;, which takes advantage of Objective C’s optional dynamic typing. You must however, make sure that it only receives defined messages, or your app will crash.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Building a Blog Reader in iOS, Part 2]]></title><description><![CDATA[In iOS, you may want to create a bottom tab bar navigation as seen in any app where the type of interface varies differently, for example in…]]></description><link>https://www.charliemassry.com/posts/54-building-a-blog-reader-in-ios-part-2/</link><guid isPermaLink="false">https://www.charliemassry.com/posts/54-building-a-blog-reader-in-ios-part-2/</guid><pubDate>Fri, 06 Feb 2015 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;In iOS, you may want to create a bottom tab bar navigation as seen in any app where the type of interface varies differently, for example in the default Clock app, it has a bottom bar with the World Clock, Timer and others. The World Clock clearly uses a Table View Controller, while the Timer uses what looks like a regular View Controller. To demonstrate this functionality, I will walk you through the process of building a tab bar controller by building on the &lt;a href=&quot;http://www.charliemassry.com/posts/53&quot;&gt;last part&lt;/a&gt; of this walkthrough, which was just a table view for my blog reader app.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/yoj7pSr.jpg&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;p&gt;As you can see the bottom tab bar has been added since last time and it helps you navigate to different parts of the app. To begin, in the &lt;code class=&quot;language-text&quot;&gt;AppDelegate.m&lt;/code&gt; file, you must instantiate the additional view controllers that you will use as the controllers of the tab bar.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;ArtViewController *artViewController = [[ArtViewController alloc] init];
artViewController.title = @&amp;quot;Art&amp;quot;;
UINavigationController *artNavController = [[UINavigationController alloc] initWithRootViewController:artViewController];

LinkViewController *linkViewController = [[LinkViewController alloc] init];
linkViewController.title = @&amp;quot;Links&amp;quot;;
UINavigationController *linksNavController = [[UINavigationController alloc] initWithRootViewController:linkViewController];&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We are creating a view controller for each tab bar item and then we are creating a navigation controller where it is the root controller. We do this because when we want to view sub controllers, the navigation controller will simply push the next view onto the stack.&lt;/p&gt;
&lt;p&gt;Next we take all of our navigation controllers, and put them in an array as the list of tab bar items. The order we put them in is the order they will display, from left to right.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;UITabBarController *tabBarController = [[UITabBarController alloc] init];
[tabBarController setViewControllers:@[postNavController, artNavController, linksNavController]];&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now we will change what the &lt;code class=&quot;language-text&quot;&gt;rootViewController&lt;/code&gt; of the entire app is.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;self.window.rootViewController = tabBarController;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If you think about this as an Entity Relationship Diagram, a tab bar controller sits at the top and it has many navigation controllers, each navigation controller has one sub controller. The navigation controller is really just a controller that controls other controllers with no view associated with it so the view controller it controls can push other views onto the navigation stack.&lt;/p&gt;
&lt;p&gt;Now when we launch our app, we will see the changes.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Building a Blog Reader in iOS, Part 1]]></title><description><![CDATA[In this post, we will be building an app that retrieves a collection from the web and view it as a table. The data is an index of my blog…]]></description><link>https://www.charliemassry.com/posts/53-building-a-blog-reader-in-ios-part-1/</link><guid isPermaLink="false">https://www.charliemassry.com/posts/53-building-a-blog-reader-in-ios-part-1/</guid><pubDate>Fri, 30 Jan 2015 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;In this post, we will be building an app that retrieves a collection from the web and view it as a table. The data is an index of my blog posts and can be found at &lt;a href=&quot;http://www.charliemassry.com/posts.json&quot;&gt;http://www.charliemassry.com/posts.json&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/pjJPsnE.png&quot; alt=&quot;finishedTableViewController&quot;&gt;&lt;/p&gt;
&lt;p&gt;To accomplish this we will need a way to render each cell in this table and fetch the data from the JSON feed. Luckily for use, this table view is a default in iOS development and there is a easy library to use for the fetching of the JSON feed called &lt;a href=&quot;http://afnetworking.com/&quot;&gt;AFNetworking&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;To begin, open up Xcode and create a new app. For this app we will simply use the single view application for learning purposes.&lt;/p&gt;
&lt;p&gt;In the &lt;code class=&quot;language-text&quot;&gt;application:didFinishLaunchingWithOptions:&lt;/code&gt; method in our &lt;code class=&quot;language-text&quot;&gt;AppDelegate.m&lt;/code&gt; file, there is some boilerplate code we must add to get started.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;UINavigationController *navController = [[UINavigationController alloc] init];
self.window = [[UIWindow alloc] initWithFrame:[[UIScreen mainScreen] bounds]];
self.window.rootViewController = navController;
[self.window makeKeyAndVisible];  &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This seems like a lot, but all this does is make a navigation controller the main controller of the application. When you compile and run the code, you will simply see a main screen that is black. Now how will we get the table?&lt;/p&gt;
&lt;p&gt;We must create the table view controller. In the menu, simply click on File &gt; New &gt; File. When prompted, make the new file a subclass of the &lt;code class=&quot;language-text&quot;&gt;UITableViewController&lt;/code&gt; and lets call it, &lt;code class=&quot;language-text&quot;&gt;PostsTableViewController&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;First we must initialize the posts in the interface.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;@property (strong, nonatomic) NSArray *posts;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In a table view, there are a few things you need to be aware of. There are properties like title, number of sections, and number of cells per section. In the &lt;code class=&quot;language-text&quot;&gt;viewDidLoad&lt;/code&gt; method, add the line &lt;code class=&quot;language-text&quot;&gt;self.title = @&amp;quot;Blog&amp;quot;;&lt;/code&gt; to add the title to the view. In the &lt;code class=&quot;language-text&quot;&gt;numberOfSectionsInTableView:&lt;/code&gt; method, you can set how many sections there are in the table by its return value; for this, just &lt;code class=&quot;language-text&quot;&gt;return 1;&lt;/code&gt;. The &lt;code class=&quot;language-text&quot;&gt;tableView:numberOfRowsInSection:&lt;/code&gt; method behaves similarly, although this one describes the number of cells in each section; &lt;code class=&quot;language-text&quot;&gt;return 20;&lt;/code&gt; for now.&lt;/p&gt;
&lt;p&gt;We now have to give the cells data, and we can do this in the &lt;code class=&quot;language-text&quot;&gt;tableView:cellForRowAtIndexPath:&lt;/code&gt; method.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath {
    UITableViewCell *cell = [tableView
        dequeueReusableCellWithIdentifier:@&amp;quot;cell&amp;quot;];

    if (cell == nil) {
        cell = [[UITableViewCell alloc]
            initWithStyle:UITableViewCellStyleDefault
            reuseIdentifier:@&amp;quot;cell&amp;quot;];
    }
    cell.textLabel.text = @&amp;quot;banana&amp;quot;;
    return cell;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This method can be very confusing. What we are doing is initializing a table cell and giving it a string to see if we can reuse the particular cell. The reason why we want to do this is to prevent a memory leak. Basically everytime you scroll up and down on a table view, it must recreate every table view cell and they won’t be freed from memory. There will always be a fixed number of table view cells, but they will each have different properties such as the title. To fix this you can give it a reusable identifier to know if it has been created. Either way, with this code, it will always give the display text of &lt;code class=&quot;language-text&quot;&gt;&amp;quot;banana&amp;quot;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;That’s a great start but we want to have it display a feed of data from the web, specifically a collection of posts. We can do this by creating a post model and have it loop over a collection of posts and displaying the title individually.&lt;/p&gt;
&lt;p&gt;Let’s create a new &lt;code class=&quot;language-text&quot;&gt;Post&lt;/code&gt; model and have it inherit from &lt;code class=&quot;language-text&quot;&gt;NSObject&lt;/code&gt;. Next we will want to give it the title, text, id, and comments count properties in the interface.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;@interface Post : NSObject
    @property(strong, nonatomic)NSString *title;
    @property(strong, nonatomic)NSString *text;
    @property(strong, nonatomic)NSNumber *idNo;
    @property(strong, nonatomic)NSNumber *commentsCount;
@end&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Because we will be getting data from the web in the form of a JSON feed, we should create a method to populate it with data. Objective-C has a class called NSDictionary which is almost identical to a Hash in Ruby or a JavaScript Object, but you won’t have to worry about JSON parsing with AFNetworking. We should create this method called &lt;code class=&quot;language-text&quot;&gt;initWithDictionary:&lt;/code&gt; that takes an NSDictionary, creates the relevent fields, and returns itself.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;-(id)initWithDictionary:(NSDictionary *)json {
    self = [super init];
    self.title = json[@&amp;quot;title&amp;quot;];
    self.text = json[@&amp;quot;text&amp;quot;];
    self.idNo = json[@&amp;quot;id&amp;quot;];
    self.commentsCount = json[@&amp;quot;comments_count&amp;quot;];
    return self;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This will make our lives much easier very shortly.&lt;/p&gt;
&lt;p&gt;Now we must get this data from the web, populate it in the model, and then display it in the view. This is perfect for AFNetworking to handle. To handle dependencies easily, we can use Cocoapods. Like RubyGems, Cocoapods lets you easily keep track of your external dependencies.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;$ gem install cocoapods
$ pod setup
$ pod init&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In the Podfile we just created, we want to list our dependencies.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;target &amp;#39;Blog&amp;#39; do
    source &amp;#39;https://github.com/CocoaPods/Specs.git&amp;#39;
    platform :ios, &amp;#39;~&amp;gt; 7.0&amp;#39;
    pod &amp;#39;AFNetworking&amp;#39;, &amp;#39;~&amp;gt; 2.4&amp;#39;
end&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Be sure to close Xcode and open it up through the &lt;code class=&quot;language-text&quot;&gt;.xcworkspace&lt;/code&gt; file for CocoaPods to work.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;$ open Blog.xcworkspace  &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now how will we fetch that data, I propose creating a separate client to better organize your code as you don’t want your model to be responsible for making web requests. Let’s make a new file called &lt;code class=&quot;language-text&quot;&gt;PostClient&lt;/code&gt; which also inherits from &lt;code class=&quot;language-text&quot;&gt;NSObject&lt;/code&gt;. Let’s make a class method called &lt;code class=&quot;language-text&quot;&gt;getPosts&lt;/code&gt;, which gets posts and creates an array of posts. Also we might want to define a base &lt;code class=&quot;language-text&quot;&gt;PostURL&lt;/code&gt; for reuse later.&lt;/p&gt;
&lt;p&gt;First be sure to add the two dependencies’ header files that you’ll need, &lt;code class=&quot;language-text&quot;&gt;AFNetworking&lt;/code&gt; and &lt;code class=&quot;language-text&quot;&gt;Post&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;#import &amp;quot;AFNetworking.h&amp;quot;
#import &amp;quot;Post.h&amp;quot;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then define the base &lt;code class=&quot;language-text&quot;&gt;postURL&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;NSString *const postURL = @&amp;quot;http://www.charliemassry.com/posts&amp;quot;;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now for the method implementation.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;+(void)getPosts {
    NSString *postIndexURL = [postURL stringByAppendingString:@&amp;quot;.json&amp;quot;];
    AFHTTPRequestOperationManager *manager = [AFHTTPRequestOperationManager manager];
    [manager GET:postIndexURL
        parameters:nil
        success:^(AFHTTPRequestOperation *operation, id JSON) {
        NSMutableArray *tmpPosts = [[NSMutableArray alloc] init];
            for (NSDictionary *tmpDictionary in JSON) {
                Post *tmpPost = [[Post alloc] initWithDictionary:tmpDictionary];
                [tmpPosts addObject:tmpPost];
            }
        NSArray *posts = [[NSArray alloc] initWithArray:tmpPosts];
        [[NSNotificationCenter defaultCenter]
            postNotificationName:@&amp;quot;postIndexFinishedLoading&amp;quot;
            object:posts];
        } failure:^(AFHTTPRequestOperation *operation, NSError *error) {
            NSLog(@&amp;quot;Error: %@&amp;quot;, error);
        }];
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I’ll take this one step at a time. First we are getting the constant and adding a &lt;code class=&quot;language-text&quot;&gt;.json&lt;/code&gt; to the end of it. This is because when we go later to make the request for each post individually, we won’t have to write the route again, and we won’t leave any room for error. We then initialize the AFNetworking request and send the method &lt;code class=&quot;language-text&quot;&gt;GET:parameters:success:failure:&lt;/code&gt;. &lt;code class=&quot;language-text&quot;&gt;GET&lt;/code&gt; is the URL, the parameters is nil because it is a simple GET request, but there is that weird caret for &lt;code class=&quot;language-text&quot;&gt;success:&lt;/code&gt; and &lt;code class=&quot;language-text&quot;&gt;failure:&lt;/code&gt;. This the Objective-C syntax for a block or anonymous function. The &lt;code class=&quot;language-text&quot;&gt;success:&lt;/code&gt; block is what it does with a successful web response, and you can see that it has the JSON parameter, which is your JSON feed and is either an NSDictionary or NSArray, depending on the request. In this case it is an NSArray of NSDictionaries. If you are familiar with making AJAX calls using jQuery, this should click for a couple of reasons; the parameters that need to be passed in are the same and it is done asynchronously.&lt;/p&gt;
&lt;p&gt;Inside of your success block, you have access to the JSON feed, and you’ll want to create an NSArray of posts using it. Because NSArrays are immutable, meaning once created they can not be modified, like appending or poping, you must initialize the NSArray after you’ve already built a temporary one using an NSMutableArray. So you’ll loop through the JSON feed, create a post, and add it to the temporary array. Once that’s done it will create the NSArray. Then a really tricky thing happens. Because of the way iOS works, it doesn’t leave you hanging on a web request, it runs the code asynchronously and the web response is not immediate, so you must give it a way to hook into your &lt;code class=&quot;language-text&quot;&gt;PostTableViewController&lt;/code&gt;. Fortunately this works pretty easily with &lt;code class=&quot;language-text&quot;&gt;NSNotificationCenter&lt;/code&gt;. You send the message &lt;code class=&quot;language-text&quot;&gt;postNotificationName:object:&lt;/code&gt; where the postNotificationName is a string that the controller will be listening for and the object is the object you just created. That’s it for the &lt;code class=&quot;language-text&quot;&gt;PostClient&lt;/code&gt;, all we have left is to tell the controller to execute this code and listen for the response.&lt;/p&gt;
&lt;p&gt;In the controller, in the &lt;code class=&quot;language-text&quot;&gt;viewDidLoad&lt;/code&gt; method, we will call this class method we just created to get the posts from the &lt;code class=&quot;language-text&quot;&gt;PostClient&lt;/code&gt; and we will have it listen for the &lt;code class=&quot;language-text&quot;&gt;&amp;quot;postIndexFinishedLoading&amp;quot;&lt;/code&gt; notification.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;[super viewDidLoad];
[PostClient getPostIndex];
[[NSNotificationCenter defaultCenter]
    addObserver:self
    selector:@selector(dataRetrieved:)
    name:@&amp;quot;initWithJSONFinishedLoading&amp;quot;
    object:nil];&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In &lt;code class=&quot;language-text&quot;&gt;viewDidLoad&lt;/code&gt; in the &lt;code class=&quot;language-text&quot;&gt;PostTableViewController&lt;/code&gt;, after we call &lt;code class=&quot;language-text&quot;&gt;[super viewDidLoad];&lt;/code&gt; we have the &lt;code class=&quot;language-text&quot;&gt;PostClient&lt;/code&gt; begin fetching the data from the server. It then listens for the message and calls the &lt;code class=&quot;language-text&quot;&gt;dataRetrieved:&lt;/code&gt; method that we have yet to implement.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;-(void)dataRetrieved:(NSNotification *)retrievedPosts; {
    self.posts = [retrievedPosts object];
    [self.tableView reloadData];
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This method gets called with the object that had been passed in to it when the &lt;code class=&quot;language-text&quot;&gt;success:&lt;/code&gt; block finished, so the &lt;code class=&quot;language-text&quot;&gt;retrievedPosts&lt;/code&gt; variable is a &lt;code class=&quot;language-text&quot;&gt;NSNotification&lt;/code&gt; instance, but when you send it the message &lt;code class=&quot;language-text&quot;&gt;object&lt;/code&gt; it returns whatever object that had been passed in. Next you &lt;strong&gt;MUST&lt;/strong&gt; tell the table to reload its data or you will never see the posts again.&lt;/p&gt;
&lt;p&gt;After all of this you should see your posts displaying and scrollable. Stay tuned for a future post when I go over how to select a post to be displayed individually.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Caching Rails Views]]></title><description><![CDATA[“There are only two hard things in Computer Science: cache invalidation, naming things, and off-by-one errors.” Fortunately for us, Rails…]]></description><link>https://www.charliemassry.com/posts/52-caching-rails-views/</link><guid isPermaLink="false">https://www.charliemassry.com/posts/52-caching-rails-views/</guid><pubDate>Tue, 13 Jan 2015 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;“There are only two hard things in Computer Science: cache invalidation, naming things, and off-by-one errors.” Fortunately for us, Rails makes &lt;a href=&quot;http://guides.rubyonrails.org/caching_with_rails.html&quot;&gt;caching&lt;/a&gt; quite simple.&lt;/p&gt;
&lt;p&gt;In your log files you might notice that the views take a lot longer to process than you might hope, but you can cache them easily. To get started in &lt;code class=&quot;language-text&quot;&gt;config/development.rb&lt;/code&gt; add the line &lt;code class=&quot;language-text&quot;&gt;config.action_controller.perform_caching = true&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Now, you can cache any ActiveRecord partial and it automatically expires when the &lt;code class=&quot;language-text&quot;&gt;updated_at&lt;/code&gt; column changes.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;&amp;lt;% cache post do %&amp;gt;
  &amp;lt;%= div_for post do %&amp;gt;
    &amp;lt;h3&amp;gt;&amp;lt;%= link_to post.title, post %&amp;gt;&amp;lt;/h3&amp;gt;
    &amp;lt;p&amp;gt;&amp;lt;%= truncate(post.text, length: 160, separator: &amp;#39;.&amp;#39;) %&amp;gt;&amp;lt;/p&amp;gt;
    &amp;lt;p&amp;gt;&amp;lt;%= display_time(post) %&amp;gt; on &amp;lt;% post. tags.each do |tag| %&amp;gt;
      &amp;lt;%= link_to capitalize_tag(tag.name), tag_path(tag.name) %&amp;gt;
    &amp;lt;% end %&amp;gt;
    &amp;lt;%= post.comments_count %&amp;gt;
  &amp;lt;% end %&amp;gt;
&amp;lt;% end %&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Because &lt;code class=&quot;language-text&quot;&gt;#comments_count&lt;/code&gt; is part of an association, we must update the comments model so the post gets updated whenever anyone comments on it.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;class Comment &amp;lt; ActiveRecord::Base
  belongs_to :post, counter_cache: true, touch: true
end&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;By adding &lt;code class=&quot;language-text&quot;&gt;touch: true&lt;/code&gt; whenever anyone comments on the post, the post will get updated.&lt;/p&gt;
&lt;p&gt;You can even add caches to static fragment views easily like say a navigation bar partial. Just wrap it in a &lt;code class=&quot;language-text&quot;&gt;cache&lt;/code&gt; block. You can specify which version of the cache you want as the argument, &lt;code class=&quot;language-text&quot;&gt;&amp;lt;% cache &amp;#39;v1&amp;#39; do %&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;One downside of this fragment caching is that when the partial gets updated it will take longer to render the first time because it must write the file to the filesystem and then read it, but every subsequent view will be significantly faster. For something that gets updated quite frequently, consider foregoing fragment caching, as this performance hit on updating the cache can be too big.&lt;/p&gt;
&lt;p&gt;When you are finished with this feature, go ahead and set &lt;code class=&quot;language-text&quot;&gt;config.action_controller.perform_caching = false&lt;/code&gt; in &lt;code class=&quot;language-text&quot;&gt;config/development.rb&lt;/code&gt;. It is automatically true on production, but can be a pain during development. With view caching, your performance can be greatly improved by having the views already generated, and you’ll get a really nice boost in performance.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Advanced Searching With SQL]]></title><description><![CDATA[Over on the left, you see that there is a nice little search box to search through my posts. When you search for something you might notice…]]></description><link>https://www.charliemassry.com/posts/51-advanced-searching-with-sql/</link><guid isPermaLink="false">https://www.charliemassry.com/posts/51-advanced-searching-with-sql/</guid><pubDate>Fri, 09 Jan 2015 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Over on the left, you see that there is a nice little search box to search through my posts. When you search for something you might notice the way that the posts are ordered are very helpful. This is because when you search, the results are sorted by the title of the post and then by the text. Implementing this was rather difficult as I had bounced around between a couple of solutions. My original solution was this.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;def self.search(query)
  text = search_text(query).select(:id)
  title = search_title(query).select(:id)
  results = title + text
  results.map do |result|
    find(result)
  end
end

def self.search_title(query)
  where(&amp;quot;title LIKE ?&amp;quot;, &amp;quot;%#{query}%&amp;quot;)
end

def self.search_text(query)
  where(&amp;quot;text LIKE ? AND title NOT LIKE ?&amp;quot;, &amp;quot;%#{query}%&amp;quot;, &amp;quot;%#{query}%&amp;quot;)
end&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This code is not great for a couple of reasons. First, you must use class methods for everything because of Ruby scoping, and making class methods private in Ruby is a &lt;a href=&quot;http://blog.roberteshleman.com/2014/08/22/private-class-methods-in-ruby/&quot;&gt;hassle&lt;/a&gt;. Second, It is a very inefficient search because it makes 2 original queries and then one additional query for every result that the first 2 queries found. This can be bad for performance if you have a lot of blog posts. Configuring this search for pagination is a little confusing because &lt;a href=&quot;https://github.com/amatsuda/kaminari&quot;&gt;kaminari&lt;/a&gt; isn’t setup for arrays as default but an ActiveRecord Relation. Also, the way ActiveRecord works is when you are chaining the queries it builds up the query and then executes as opposed to executing sequentially.&lt;/p&gt;
&lt;p&gt;One solution I came up with is to use a searching gem like Solr or ElasticSearch. This can be a difficult to set up and requires additional resources. Also, if you have anything against Java or the JVM, these solutions are not for you. Solr has it’s problems of configuration because it treats different data types differently even if they both contain characters. ElasticSearch has it’s problems of the default gem to integrate it into a Rails app has a terrible API. Both of these solutions however do allow you to boost the results depending on the column.&lt;/p&gt;
&lt;p&gt;The SQL solution to this problem is to use weighted searches. While not built into SQL you can add if statements to SQL and create a separate column in SQL on the fly.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;SELECT *,
  IF(title LIKE &amp;#39;%ruby%&amp;#39;, 20, 0) AS weight
  FROM `posts`
  WHERE (title LIKE &amp;#39;%ruby%&amp;#39; OR text LIKE &amp;#39;%ruby%&amp;#39;)
  ORDER BY weight DESC;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is how you would write a query in SQL that does this. Notice the syntax in the if statement, it’s saying if the title matches &lt;code class=&quot;language-text&quot;&gt;%ruby%&lt;/code&gt;, then put a 20 in the weight column, otherwise put a 0. Once it does this it then filters by the &lt;code class=&quot;language-text&quot;&gt;WHERE&lt;/code&gt; clause and orders it by weight. Now that that’s out of the way, how do you integrate this solution into a Rails app using ActiveRecord. &lt;a href=&quot;http://www.charliemassry.com/posts/41-raw-sql-on-rails&quot;&gt;Previously&lt;/a&gt;, I had talked about how to write raw SQL using ActiveRecord but there must be a more elegant solution for this issue, right? Well there is, but there is still the issue of figuring out how to write it.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;Post.select(&amp;quot;*, IF(title LIKE ? , 20, 0) AS weight&amp;quot;, &amp;quot;%#{query}%&amp;quot;).
  where(&amp;quot;title LIKE ? OR text LIKE ?&amp;quot;, &amp;quot;%#{query}%&amp;quot;, &amp;quot;%#{query}%&amp;quot;).
  order(&amp;quot;weight DESC&amp;quot;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This was my initial idea because it’s using the &lt;code class=&quot;language-text&quot;&gt;SELECT&lt;/code&gt; statement to create the additional column. This won’t work because the &lt;code class=&quot;language-text&quot;&gt;?&lt;/code&gt; the query afterwards to properly escape it only works for the &lt;code class=&quot;language-text&quot;&gt;where&lt;/code&gt; method and not just any SQL. The way around this is to just drop it in instead of the &lt;code class=&quot;language-text&quot;&gt;?&lt;/code&gt;. You must escape it because it’d be a shame if anyone was to drop your database using SQL injection. Luckily there is a class method on ActiveRecord::Base that sanitizes inputs for SQL.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;Post.select(&amp;quot;*, IF(title LIKE #{sanitize(&amp;quot;%#{query}%&amp;quot;)}, 20, 0) AS weight&amp;quot;).
  where(&amp;quot;title LIKE ? OR text LIKE ?&amp;quot;, &amp;quot;%#{query}%&amp;quot;, &amp;quot;%#{query}%&amp;quot;).
  order(&amp;quot;weight DESC&amp;quot;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is the final ActiveRecord query that is used and while it doesn’t read too elegantly, it works, and is much more maintainable and better performant than my original solution when you don’t want to add additional dependencies.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Getting Started With Objective C]]></title><description><![CDATA[If you have an iPhone, and want to be able to make apps for it, you might want to consider learning Objective C. For iPhone development, you…]]></description><link>https://www.charliemassry.com/posts/50-getting-started-with-objective-c/</link><guid isPermaLink="false">https://www.charliemassry.com/posts/50-getting-started-with-objective-c/</guid><pubDate>Thu, 08 Jan 2015 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;If you have an iPhone, and want to be able to make apps for it, you might want to consider learning Objective C. For iPhone development, you have a few options, you can use &lt;a href=&quot;https://developer.apple.com/swift/&quot;&gt;Swift&lt;/a&gt;, Apple’s newest programming language, you can try out &lt;a href=&quot;http://www.rubymotion.com/&quot;&gt;Ruby Motion&lt;/a&gt; to write Ruby code instead of Objective C, or you can just start out with Objective C. I recommend starting out with Objective C especially if you understand how a statically typed language works and are pretty good at an object oriented language like Ruby. I suggest this because this is where it all began, and you’ll find a lot of tutorials on how to get started with Objective C and iOS, which is definitely not the case with Ruby Motion or Swift. Also the iOS API was specifically created for Objective C, so it looks out of place in Ruby or Swift.&lt;/p&gt;
&lt;p&gt;For those not familiar with statically typed languages, Objective C forces you to consider what type of variables you are using. Objective C is a language that is on top of C by adding classes and methods to C. Since you are so close to the machine, you must do a lot of things yourself, like manually allocating memory for objects. Fortunately this is not too difficult.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;NSString *firstName = [[NSString alloc] init];&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This gives you a string object but it doesn’t contain anything. To do that you must initialize it with a string.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;NSString *firstName = [[NSString alloc] initWithString:@&amp;quot;Charlie&amp;quot;];&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;There are a few things to talk about here. First, you must call the type of object that you are creating when initializing the variable. Second, notice the &lt;code class=&quot;language-text&quot;&gt;*&lt;/code&gt; that precedes the &lt;code class=&quot;language-text&quot;&gt;firstName&lt;/code&gt; variable; that is actually a pointer to the memory location of that object; whenever you call it, you can simply use &lt;code class=&quot;language-text&quot;&gt;firstName&lt;/code&gt; and leave off the &lt;code class=&quot;language-text&quot;&gt;*&lt;/code&gt;. Third, you are sending the message &lt;code class=&quot;language-text&quot;&gt;alloc&lt;/code&gt; on &lt;code class=&quot;language-text&quot;&gt;NSString&lt;/code&gt; which is like a class method that allocates memory for a string. Fourth, you are sending the message &lt;code class=&quot;language-text&quot;&gt;initWithString&lt;/code&gt; with the argument &lt;code class=&quot;language-text&quot;&gt;@&amp;quot;Charlie&amp;quot;&lt;/code&gt; on the result of &lt;code class=&quot;language-text&quot;&gt;[NSString alloc]&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;If your familiar with Ruby you can think of this like &lt;code class=&quot;language-text&quot;&gt;NSString.alloc.initWithString(&amp;quot;Charlie&amp;quot;)&lt;/code&gt; as the square brackets are used instead of the periods on method calls. Also like Ruby, you can initialize these primitive objects literally.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;NSString *firstName = @&amp;quot;Charlie&amp;quot;;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;There is one caveat with Objective C; a method is defined by its arguments. In Ruby we have the much underused keyword arguments, and we have something similar in Objective C.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath {
    UITableViewCell *cell = [tableView dequeueReusableCellWithIdentifier:@&amp;quot;cell&amp;quot;];

    if (cell == nil) {
        cell = [[UITableViewCell alloc] initWithStyle:UITableViewCellStyleDefault reuseIdentifier:@&amp;quot;cell&amp;quot;];
        cell.textLabel.text = [self.posts[indexPath.row] heading];
    }

    return cell;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is what a method definition looks like in Objective C. This is from the iOS API where, if you are familiar with how the iPhone works, you have a list of items that you want to display, you would use this method for that. If you use the default mail client that comes with the iPhone, it uses this to display the mail. In the method signature you see that first you are declaring what the method will return, a &lt;code class=&quot;language-text&quot;&gt;UITableViewCell&lt;/code&gt; object. This means that the variable that gets returned must be a &lt;code class=&quot;language-text&quot;&gt;UITableViewCell&lt;/code&gt; instance, which &lt;code class=&quot;language-text&quot;&gt;cell&lt;/code&gt; is. Then you see that you pass in arguments with their keywords but you use the arguments as the local variables and the keywords as part of the method definition, so you have access to &lt;code class=&quot;language-text&quot;&gt;tableView&lt;/code&gt; and &lt;code class=&quot;language-text&quot;&gt;indexPath&lt;/code&gt;. The body of the method is unimportant for now and I’ll cover it later as it is very important to know how to make this particular view for iOS.&lt;/p&gt;
&lt;p&gt;Every Objective C object inherits from &lt;code class=&quot;language-text&quot;&gt;NSObject&lt;/code&gt;, but you can’t perform C operations on them like addition. For example, there exists a class called &lt;code class=&quot;language-text&quot;&gt;NSNumber&lt;/code&gt;, which is very similar to the Ruby &lt;code class=&quot;language-text&quot;&gt;Integer&lt;/code&gt; class. This means that you can all methods on &lt;code class=&quot;language-text&quot;&gt;NSNumber&lt;/code&gt; that you can’t on C &lt;code class=&quot;language-text&quot;&gt;int&lt;/code&gt;s. If you want to add two numbers in Objective C, you have to add them in a special manner.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;NSNumber *num1 = @1;
NSNumber *num2 = @2;
NSNumber *num3 = @([num1 intValue] + [num2 intValue]);&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Notice how you must call &lt;code class=&quot;language-text&quot;&gt;intValue&lt;/code&gt; on the numbers to get their literal integer value so you can add them together. This is because it uses C to add them together and not Objective C.&lt;/p&gt;
&lt;p&gt;Objective C can be a difficult language to pick up, but once you get the hang of it, it can be very useful to you in learning the iOS API and developing for iOS.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Javascript Gotchas]]></title><description><![CDATA[Coming from Ruby, Javascript can be quite intimidating for a couple of reasons, mainly focused on the object system that it implements…]]></description><link>https://www.charliemassry.com/posts/49-javascript-gotchas/</link><guid isPermaLink="false">https://www.charliemassry.com/posts/49-javascript-gotchas/</guid><pubDate>Tue, 06 Jan 2015 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Coming from Ruby, Javascript can be quite intimidating for a couple of reasons, mainly focused on the object system that it implements. While Javascript is an Object Oriented Language, it does not use classical inheritance, but instead uses &lt;a href=&quot;http://en.wikipedia.org/wiki/Prototype-based_programming&quot;&gt;Prototypical Inheritance&lt;/a&gt;, this means that all objects are actually clones of other objects and there is no abstract representation of classes. There are also a few different ways to define an object in Javascript. You can define it in the same way that you would a Ruby hash.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;var person = {};&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is now an object and you can add properties to it.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;person.firstName = &amp;quot;Charlie&amp;quot;;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is interesting but this doesn’t seem very Object Oriented as you can imagine this can lead to code duplication as you’ll have to add each property as a separate statement. Another way to create an Object is to define it as a function and make instances of that prototype.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;function Person (firstName) {
  this.firstName = firstName;
};

var person = new Person(&amp;quot;Charlie&amp;quot;);
person.firstName; //=&amp;gt; &amp;quot;Charlie&amp;quot;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This looks much better as you are able to define properties on this prototype.&lt;/p&gt;
&lt;p&gt;What if we wanted to add functions to this object? We can do that too.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;function Person (firstName) {
  this.firstName = firstName;
  this.sayHello = function() {
    return &amp;quot;Hello&amp;quot;
  };
};

var person = new Person(&amp;quot;Charlie&amp;quot;);
person.firstName; //=&amp;gt; &amp;quot;Charlie&amp;quot;
person.sayHello(); //=&amp;gt; &amp;quot;Hello&amp;quot;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Note the sayHello is a function and unlike Ruby, there is a differentiation between properties and functions so for &lt;code class=&quot;language-text&quot;&gt;person.firstName&lt;/code&gt; we didn’t have to add parenthesis to the end but we had to for the function &lt;code class=&quot;language-text&quot;&gt;person.sayHello()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;What if we had a bunch of functions that shouldn’t really be part of the public API for the class. We’d want to create private methods like we would in Ruby, right? Not so fast, Javascript doesn’t have the notion of private functions, but we can still acheive this through some trickery.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;function Person (firstName) {
  this.firstName = firstName;
  this.sayHello = function() {
    return hello();
  };
  var hello = function(){ return &amp;quot;Hello&amp;quot; };
};

var person = new Person(&amp;quot;Charlie&amp;quot;);
person.firstName; //=&amp;gt; &amp;quot;Charlie&amp;quot;
person.sayHello(); //=&amp;gt; &amp;quot;Hello&amp;quot;
person.hello(); //=&amp;gt; &amp;quot;Uncaught TypeError: undefined is not a function&amp;quot;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;By not binding &lt;code class=&quot;language-text&quot;&gt;hello()&lt;/code&gt; to the &lt;code class=&quot;language-text&quot;&gt;this&lt;/code&gt; keyword, we can leverage Javascript’s scope to make it not accessible outside the object. This is different from a language like Ruby where you must declare methods that are private explicitly or Objective C where you must declare methods publicly.&lt;/p&gt;
&lt;p&gt;Now that that is settled, how do we call these properties? Properties and functions can be called with either dot notation or bracket notation.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;person.firstName; // dot notation
person[&amp;quot;firstName&amp;quot;]; // bracket notation

person.sayHello(); // dot notation
person[&amp;quot;sayHello&amp;quot;](); // bracket notation&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The bracket notation looks like Ruby’s hash calling syntax but when you use it to call a function, I think we can all agree that it just looks ugly. If you want to make a dynamic call however, you must use the bracket notation.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;var numbers = {
  &amp;quot;1&amp;quot;: &amp;quot;One&amp;quot;,
  &amp;quot;2&amp;quot;: &amp;quot;Two&amp;quot;,
  &amp;quot;3&amp;quot;: &amp;quot;Three&amp;quot;,
  &amp;quot;4&amp;quot;: &amp;quot;Four&amp;quot;,
  &amp;quot;5&amp;quot;: &amp;quot;Five&amp;quot;,
  &amp;quot;6&amp;quot;: &amp;quot;Six&amp;quot;,
  &amp;quot;7&amp;quot;: &amp;quot;Seven&amp;quot;,
  &amp;quot;8&amp;quot;: &amp;quot;Eight&amp;quot;,
  &amp;quot;9&amp;quot;: &amp;quot;Nine&amp;quot;
};

var num = parseInt(Math.random() * (9 - 1) + 1);
num //=&amp;gt; 3
numbers.num; //=&amp;gt; undefined
numbers[num]; //=&amp;gt; &amp;quot;Three&amp;quot;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;A good way to demonstrate what is happening is to test it’s equality.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;numbers.num === numbers[&amp;quot;num&amp;quot;]; //=&amp;gt; true&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If you actually think about this example, it shouldn’t even work because the key is supposed to be the string 3 and not the integer 3, but Javascript is not one for complaining about typing.&lt;/p&gt;
&lt;p&gt;Testing equality in Javascript can also be a task that’ll leave you scratching your head. Most programming languages use one equal sign for assignment and two for equality, but Javascript uses two and three for equality. Unfortunately, it isn’t always consistent knowing what is going to return true.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;1 == 1; //=&amp;gt; true
1 == &amp;quot;1&amp;quot;; //=&amp;gt; true
1 === &amp;quot;1&amp;quot;; //=&amp;gt; false
true == &amp;quot;true&amp;quot;; //=&amp;gt; false
[] == {}; //=&amp;gt; false
{} == []; //=&amp;gt; Uncaught SyntaxError: Unexpected token ==
{} === {}; //=&amp;gt; Uncaught SyntaxError: Unexpected token ===&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As a rule, you always want to use the triple equals sign for equality checking as the double equal sign sometimes casts the values to strings. True is not cast to a string, and while clearly an array is not the same thing as a literal object, you can’t check the equality of a literal object. You can however test equality after assignment for a literal object.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;var number = {};
var something = {};
number == something; //=&amp;gt; false
number === something; //=&amp;gt; false&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Another issue with Javascript’s object system is it’s Numeric prototype. In a lot of languages you have a number system where numbers can be either floats or integers. In static languages such as C++, the type must be declared when it is initialized so you must call it either a float or an integer. In dynamic languages such as Ruby, you can declare it literally, &lt;code class=&quot;language-text&quot;&gt;x = 3&lt;/code&gt; is an integer, but &lt;code class=&quot;language-text&quot;&gt;x = 3.0&lt;/code&gt; is a float. It does get converted in Ruby to the proper type if you need it.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;3 * 3.0 # =&amp;gt; 9.0
3.0 + 3 # =&amp;gt; 6.0&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In Javascript, there are no floats and integers, only numbers, which means when I called &lt;code class=&quot;language-text&quot;&gt;parseInt()&lt;/code&gt; up there to get a random number, it essentially just choped off the decimal place. This can lead to a gotcha if you need to match a number as a string from Ruby to Javascript. If you send a float in as JSON in Ruby that looks like &lt;code class=&quot;language-text&quot;&gt;9.0&lt;/code&gt;, Javascript would convert that to just a &lt;code class=&quot;language-text&quot;&gt;9&lt;/code&gt; because it chops of the decimal place when it sees that. To solve this issue you can make it a string on Ruby’s end so you don’t have to worry about it with Javascript. If you remember these features of Javascript, they can save you a lot of issues down the road.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[How to Debug Rails Apps]]></title><description><![CDATA[At any point in time, you can run into an error in your Rails App, but don’t worry as debugging can be easy with the help of multiple gems…]]></description><link>https://www.charliemassry.com/posts/48-how-to-debug-rails-apps/</link><guid isPermaLink="false">https://www.charliemassry.com/posts/48-how-to-debug-rails-apps/</guid><pubDate>Thu, 20 Nov 2014 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;At any point in time, you can run into an error in your Rails App, but don’t worry as debugging can be easy with the help of multiple gems. When I start a Rails App from scratch there are certain gems I like to include to help me debug, four come to mind immediately. These are &lt;a href=&quot;https://github.com/charliesome/better_errors&quot;&gt;better_errors&lt;/a&gt;, &lt;a href=&quot;https://github.com/banister/binding_of_caller&quot;&gt;binding_of_caller&lt;/a&gt;, &lt;a href=&quot;https://github.com/yuki24/did_you_mean&quot;&gt;did_you_mean&lt;/a&gt;, and &lt;a href=&quot;https://github.com/rweng/pry-rails&quot;&gt;pry-rails&lt;/a&gt;. Each of these gems have different uses but &lt;code class=&quot;language-text&quot;&gt;better_errors&lt;/code&gt; and &lt;code class=&quot;language-text&quot;&gt;binding_of_caller&lt;/code&gt; work in tandem.&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;better_errors&lt;/code&gt; is useful as it gives you a different error page in your web browser, this can be helpful as it lets you inspect files in the stack trace right in your browser. If you install &lt;code class=&quot;language-text&quot;&gt;binding_of_caller&lt;/code&gt;, then you can actually have a live shell to interact with to execute any arbitrary Ruby code to help you debug. This can help determining what each variable you set is equal to and what methods you have available.&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;did_you_mean&lt;/code&gt; is another awesome gem that gives autocompletion suggestions, so if you misspell a method or constant, it asks you if you meant something different. This is very useful if you are using obscure methods that you can’t remember the name of or if you are just bad at spelling.&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;pry-rails&lt;/code&gt; is the last great gem I’d like to cover in this post. It really does three very useful things. First, when you open up the console with &lt;code class=&quot;language-text&quot;&gt;rails c&lt;/code&gt; it automatically uses pry instead of irb, which means you get cool features like syntax highlighting, and better displayed results. Second, you have access to special helper methods like &lt;code class=&quot;language-text&quot;&gt;show-models&lt;/code&gt; to list all of your models, or &lt;code class=&quot;language-text&quot;&gt;show-middleware&lt;/code&gt; to print out all your middleware. Third, anywhere in your Rails stack you can add a line &lt;code class=&quot;language-text&quot;&gt;binding.pry&lt;/code&gt; and if your application hits that line, a shell gets created in your terminal so you can execute any Ruby code to help you debug with access to all the local variables at that breakpoint.&lt;/p&gt;
&lt;p&gt;While &lt;code class=&quot;language-text&quot;&gt;binding_of_caller&lt;/code&gt; and &lt;code class=&quot;language-text&quot;&gt;pry-rails&lt;/code&gt; sound similar, there is a important distinction. If you get an error message you can use &lt;code class=&quot;language-text&quot;&gt;binding_of_caller&lt;/code&gt; but if there is a logic error and the result is different than what you want, you would probably need something like pry. Also, &lt;code class=&quot;language-text&quot;&gt;binding_of_caller&lt;/code&gt; only works in the browser, but if you are doing TDD then &lt;code class=&quot;language-text&quot;&gt;pry-rails&lt;/code&gt; can help you in your tests as well, or even if you are experimenting with code in the console.&lt;/p&gt;
&lt;p&gt;There are many more tools to help you debug and they will be applicable to different environments, but these are good tools to help you get the job done.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Reduce Your SQL Queries With a Counter Cache]]></title><description><![CDATA[Counter caching is a technique to reduce the number or SQL queries when attempting to call count on a resources’ association. For example…]]></description><link>https://www.charliemassry.com/posts/47-reduce-your-sql-queries-with-a-counter-cache/</link><guid isPermaLink="false">https://www.charliemassry.com/posts/47-reduce-your-sql-queries-with-a-counter-cache/</guid><pubDate>Mon, 17 Nov 2014 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Counter caching is a technique to reduce the number or SQL queries when attempting to call count on a resources’ association. For example, on my blog, I have posts which have many comments, and on the index page, I am displaying the number of comments on each post. Originally it was firing off ten SQL queries for this plus one for all the posts, but I was able to reduce it to just one because I implemented a counter cache.&lt;/p&gt;
&lt;p&gt;This past weekend I taught at &lt;a href=&quot;https://www.bridgetroll.org/&quot;&gt;Railsbridge&lt;/a&gt; and towards the end the students seemed very enthusiastic about implementing this counter cache in order to add sorting functionality and performance. The app was called Suggestotron which was a simple app that lets a user add a topic such as &lt;code class=&quot;language-text&quot;&gt;&amp;quot;fruit&amp;quot;&lt;/code&gt; and then the user can vote on it and any other topics. While this app was simple, we were able to finish early and begin the extra suggested exercises. One was to sort the topics by the votes count. One idea that was tossed around was to implement a counter cache on the association. To add a counter cache to the Topic model we would need to generate a migration.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;$ rails generate migration AddVotesCountToTopic votes_count:integer&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This generates a migration with the appropriate timestamp.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;class AddVotesCountToTopic &amp;lt; ActiveRecord::Migration
  def change
    add_column :topics, :votes_count, :integer
  end
end&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This will add the right column, but if we think about it, this is not exactly what we want. Two problems come to mind. First, the column will default to &lt;code class=&quot;language-text&quot;&gt;nil&lt;/code&gt; which is bad as we can’t perform an operation like &lt;code class=&quot;language-text&quot;&gt;nil + 1&lt;/code&gt;. If we do, we will get something like &lt;code class=&quot;language-text&quot;&gt;NoMethodError: undefined method &amp;#39;+&amp;#39; for nil:NilClass&lt;/code&gt;. Ideally we’d like to start a zero. Also we would like to update the column for records that already have votes on them. To do this we will have to execute Ruby code to take the result of &lt;code class=&quot;language-text&quot;&gt;topic.votes.count&lt;/code&gt; and set it to &lt;code class=&quot;language-text&quot;&gt;topic.votes_count&lt;/code&gt;. We can do this with an iterator like &lt;code class=&quot;language-text&quot;&gt;#each&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;class AddVotesCountToTopic &amp;lt; ActiveRecord::Migration
  def change
    add_column :topics, :votes_count, :integer, default: 0

    topics = Topic.all

    topics.each do |topic|
    topic.update!(votes_count: topic.votes.count)
    end
  end
end&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The code &lt;code class=&quot;language-text&quot;&gt;default: 0&lt;/code&gt; will automatically set the &lt;code class=&quot;language-text&quot;&gt;votes_count&lt;/code&gt; column to &lt;code class=&quot;language-text&quot;&gt;0&lt;/code&gt; instead of &lt;code class=&quot;language-text&quot;&gt;nil&lt;/code&gt;, and the iterator will make sure &lt;code class=&quot;language-text&quot;&gt;votes_count&lt;/code&gt; accurately reflects the number of votes. Also we want to use &lt;code class=&quot;language-text&quot;&gt;#update!&lt;/code&gt; instead of &lt;code class=&quot;language-text&quot;&gt;#update&lt;/code&gt; because it will raise an error if it fails and undo the migration instead of a half finished migration.&lt;/p&gt;
&lt;p&gt;Now you can run that migration.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;$ rake db:migrate&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now that you have your database set up, how will Rails know to increment the counter every time? You could add it into your controller on vote creation, or you can use this &lt;a href=&quot;http://api.rubyonrails.org/classes/ActiveRecord/Associations/ClassMethods.html#method-i-belongs_to&quot;&gt;belongs_to&lt;/a&gt; option, &lt;code class=&quot;language-text&quot;&gt;counter_cache: true&lt;/code&gt;. In the model that is on the &lt;code class=&quot;language-text&quot;&gt;belongs_to&lt;/code&gt; end of the relationship, in this case Votes, we can add the counter cache association.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;class Vote &amp;lt; ActiveRecord::Base
  belongs_to :topic, counter_cache: true
end&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now every time the Topic receives a vote it increments the &lt;code class=&quot;language-text&quot;&gt;votes_count&lt;/code&gt; column. Also if you were to use the destroy method, it would decrement the &lt;code class=&quot;language-text&quot;&gt;votes_count&lt;/code&gt; column. Now we are ready to sort by votes.&lt;/p&gt;
&lt;p&gt;Adding the code for this is now easier and more efficient. In the controller to display topics by the number of votes, we can change the index method to finalize this feature.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;class TopicsController &amp;lt; ApplicationController
  def index
    @topics = Topic.order(votes_count: :desc)
  end
end&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now that your topics have their votes counted and ordered, you can display them in the view using embedded Ruby.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Metaprogramming with Method Missing]]></title><description><![CDATA[In Ruby, you can extend the language significantly to suit your preferences, and even overide methods already used by the language itself…]]></description><link>https://www.charliemassry.com/posts/46-metaprogramming-with-method-missing/</link><guid isPermaLink="false">https://www.charliemassry.com/posts/46-metaprogramming-with-method-missing/</guid><pubDate>Wed, 12 Nov 2014 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;In Ruby, you can extend the language significantly to suit your preferences, and even overide methods already used by the language itself. This is typically derogatorily called Monkey Patching as I had covered &lt;a href=&quot;http://www.charliemassry.com/posts/45-when-is-it-okay-to-monkey-patch&quot;&gt;previously&lt;/a&gt;. One significant feature that I think all Ruby developers should know about is how the error &lt;code class=&quot;language-text&quot;&gt;NoMethodError&lt;/code&gt; gets generated. Because Ruby uses classical inheritance, all classes have ancestors. And as you may already know, everything in Ruby is an object, even classes are objects. Because of this, classes you create come with methods already defined on them. One method is called &lt;code class=&quot;language-text&quot;&gt;#method_missing&lt;/code&gt;. This very important method is defined on &lt;code class=&quot;language-text&quot;&gt;BasicObject&lt;/code&gt;, which is the first Ruby object, and all of its children get access to this method. The way Ruby uses this method is if a method is called on a Ruby object that doesn’t have that method defined, it calls &lt;code class=&quot;language-text&quot;&gt;#method_missing&lt;/code&gt; which walks up the chain of inheritance to &lt;code class=&quot;language-text&quot;&gt;BasicObject&lt;/code&gt; to see where &lt;code class=&quot;language-text&quot;&gt;#method_missing&lt;/code&gt; is defined. The way it is defined on &lt;code class=&quot;language-text&quot;&gt;BasicObject&lt;/code&gt; would look something like this if Ruby was written in Ruby.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;class BasicObject
  def method_missing
  raise NoMethodError
  end
end&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The reason why the language works like this is so you can override it and even dynamically create an API so you can override &lt;code class=&quot;language-text&quot;&gt;#method_missing&lt;/code&gt; Let’s say you wanted to write an API where the user can type in a camelcased number to access its index in an array.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;class Array
  def method_missing(name)
    index = EnglishNumber.word_to_number(name.to_s) - 1
    self[index] || raise
    rescue
    super
  end
end&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;array = [1]
array.one # =&gt; 1
array.two # =&gt; NoMethodError undefined method ‘two’ for [1]:Array&lt;/p&gt;
&lt;p&gt;Let’s suppose that &lt;code class=&quot;language-text&quot;&gt;EnglishNumber.word_to_number&lt;/code&gt; takes a camelcased string, and converts it to a number. If you call a number on the array it will return the index or give a &lt;code class=&quot;language-text&quot;&gt;NoMethodError&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;When &lt;code class=&quot;language-text&quot;&gt;#one&lt;/code&gt; is called on an Array instance, the interpreter checks for &lt;code class=&quot;language-text&quot;&gt;#one&lt;/code&gt; and if it doesn’t find it, it then checks if &lt;code class=&quot;language-text&quot;&gt;#method_missing&lt;/code&gt; is defined, and if it is, it is called. This method, like all Ruby methods, can be overridden. In case there is no index on the array, you might want to throw an error, &lt;code class=&quot;language-text&quot;&gt;self[index]&lt;/code&gt; will return &lt;code class=&quot;language-text&quot;&gt;nil&lt;/code&gt; if the array doesn’t have that index. You can call &lt;code class=&quot;language-text&quot;&gt;raise&lt;/code&gt; to throw a generic error, but &lt;code class=&quot;language-text&quot;&gt;rescue&lt;/code&gt; will handle that error by passing it off up the chain of inheritance. This will make sure that you will get what you are expecting, as opposed to just getting nil, as that is very nondescript, and &lt;code class=&quot;language-text&quot;&gt;NoMethodError&lt;/code&gt; is very descriptive. While this can seem like a very contrived example, there are some very powerful libraries that take control of this feature such as ActiveRecord, specifically how &lt;code class=&quot;language-text&quot;&gt;.find_by&lt;/code&gt; worked in Rails 3.&lt;/p&gt;
&lt;p&gt;In Rails 3, there was no &lt;code class=&quot;language-text&quot;&gt;.find_by&lt;/code&gt; method but a &lt;code class=&quot;language-text&quot;&gt;.find_by_#{attribute}&lt;/code&gt; where attribute was defined by &lt;code class=&quot;language-text&quot;&gt;#method_missing&lt;/code&gt;. This was a very cool feature, but it can lead to a slowdown in performance as every time the Ruby interpreter has to call &lt;code class=&quot;language-text&quot;&gt;#method_missing&lt;/code&gt; and walk up the chain of inheritance. This code was removed for Rails 4 in favor of &lt;code class=&quot;language-text&quot;&gt;.find_by(attribute: attribute)&lt;/code&gt; for what I assume is slight performance gains.&lt;/p&gt;
&lt;p&gt;You can use &lt;code class=&quot;language-text&quot;&gt;#method_missing&lt;/code&gt; for some really cool programs, just be sure to stay out of trouble by using &lt;code class=&quot;language-text&quot;&gt;super&lt;/code&gt; to get its default behavior if the method doesn’t get what it wants.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[When Is It Okay to Monkey Patch?]]></title><description><![CDATA[Monkey Patching is a term in Object-Oriented Programming when you open up an existing class and add new methods to it. A good way to find…]]></description><link>https://www.charliemassry.com/posts/45-when-is-it-okay-to-monkey-patch/</link><guid isPermaLink="false">https://www.charliemassry.com/posts/45-when-is-it-okay-to-monkey-patch/</guid><pubDate>Mon, 03 Nov 2014 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Monkey Patching is a term in Object-Oriented Programming when you open up an existing class and add new methods to it. A good way to find cool Ruby tricks is to look into the implementation of the &lt;a href=&quot;https://github.com/rails/rails/tree/master/activesupport&quot;&gt;ActiveSupport&lt;/a&gt; gem included in Rails. They do have some Monkey Patching, although it was definitely done after careful consideration.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;class String
  def remove(pattern)
    gsub pattern, &amp;#39;&amp;#39;
  end
end&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;A lot of times you may want to remove characters from strings using &lt;code class=&quot;language-text&quot;&gt;#gsub&lt;/code&gt;, and it was decided that it may be a lot nicer to have &lt;code class=&quot;language-text&quot;&gt;#remove&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;&amp;quot;foo&amp;quot;.remove(/o/) # =&amp;gt; &amp;quot;f&amp;quot;
&amp;quot;foo&amp;quot;.gsub(/o/, &amp;quot;&amp;quot;) # =&amp;gt; &amp;quot;f&amp;quot;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You won’t find any bad examples of Monkey Patching in ActiveSupport, but if you were to try and add your own, it might not end well. The standard library in Ruby is so robust, you might find that it is not even useful to Monkey Patch classes as you can do more harm than good. With other languages, you might not be wrong to Monkey Patch. Take for example Javascript. There is no method on the string prototype &lt;code class=&quot;language-text&quot;&gt;#capitalize&lt;/code&gt; to turn the first letter in the string into a capital letter. If you need to use this functionality in your Javascript, you have two choices, Monkey Patch the string prototype, or add a method globally. First the former,&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;String.prototype.capitalize = function () {
  return this.charAt(0).toUpperCase() + this.slice(1);
};&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Next the latter,&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;function capitalize(string) {
  return string.charAt(0).toUpperCase() + string.slice(1);
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Neither of these options are great. The former is Monkey Patching, but it can be called in a very object-oriented manner.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;&amp;quot;foo&amp;quot;.capitalize(); // =&amp;gt; &amp;quot;Foo&amp;quot;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The latter can be called with any type of argument and will give you a runtime error.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;capitalize(42)
TypeError: Object 42 has no method &amp;#39;charAt&amp;#39;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Sure you can do a bunch of type checks, but that’s a code smell when dealing with a duck type language such as Javascript. In any event, it is really up to you to decide what to write, and either way, you will have conflicting viewpoints, but whatever you do, don’t redefine methods on classes unless that is the behavior you seek.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Taggable Rails]]></title><description><![CDATA[The popular social media website Twitter has made features such as tagging through their system of hashtags very intuitive and fun. You can…]]></description><link>https://www.charliemassry.com/posts/44-taggable-rails/</link><guid isPermaLink="false">https://www.charliemassry.com/posts/44-taggable-rails/</guid><pubDate>Thu, 30 Oct 2014 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;The popular social media website Twitter has made features such as tagging through their system of hashtags very intuitive and fun. You can add similar functionality in your Rails app with relative ease using a gem called &lt;a href=&quot;https://github.com/mbleigh/acts-as-taggable-on&quot;&gt;Acts-As-Taggable-On&lt;/a&gt;. First you must add the gem to your Gemfile.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;gem &amp;quot;acts-as-taggable-on&amp;quot;, &amp;quot;~&amp;gt; 3.4&amp;quot;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;$ bundle install&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now you can run the migration generator&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;rake acts_as_taggable_on_engine:install:migrations&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This copies some files from the gem to your &lt;code class=&quot;language-text&quot;&gt;db/migrations&lt;/code&gt; folder. When you look through these migrations, you’ll notice that the tags are polymorphic, which is good so you can easily just slap a &lt;code class=&quot;language-text&quot;&gt;acts_as_taggable&lt;/code&gt; on your taggable model. You should then go ahead and migrate your newly generated files.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;rake db:migrate&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now in the model you want taggable just add the aforementioned class method.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;class Post &amp;lt; ActiveRecord::Base
  acts_as_taggable
  ...
end&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now you can tag your posts, at least in the console. To get it working in the browser requires a little configuration but it shouldn’t be too difficult. In your form, just add&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;&amp;lt;p&amp;gt;
  &amp;lt;%= form.label :tag_list %&amp;gt;
  &amp;lt;%= form.text_field :tag_list %&amp;gt;
&amp;lt;/p&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now you must configure it for strong params&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;def post_params
  params.require(:post).permit(:title, :text, :tag_list)
end&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now you can add tags, but how do you display them?&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;&amp;lt;% @post.tags.each do |tag| %&amp;gt;
  &amp;lt;%= link_to tag, tag_path(tag.name) %&amp;gt;
&amp;lt;% end %&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So you are looping through your tags and making a separate &lt;code class=&quot;language-text&quot;&gt;tags#show&lt;/code&gt; page for each of them. this will generate paths like &lt;code class=&quot;language-text&quot;&gt;/tags/ruby&lt;/code&gt;. Next you need to make a path and a controller for the &lt;code class=&quot;language-text&quot;&gt;tags#show&lt;/code&gt; action. In &lt;code class=&quot;language-text&quot;&gt;config/routes.rb&lt;/code&gt; add&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;resources :tags, only: [:show]&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then make the controller.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;class TagsController &amp;lt; ApplicationController
  def show
   @posts = Post.tagged_with(params[:id]).page(params[:page]).includes(:tags)
  end
end&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;What this method chain is doing is finding the tags by their name, which is in &lt;code class=&quot;language-text&quot;&gt;params[:id]&lt;/code&gt;, which you’ll remember we linked to the tag name to give us paths like &lt;code class=&quot;language-text&quot;&gt;/tags/ruby&lt;/code&gt; and not &lt;code class=&quot;language-text&quot;&gt;tags/1&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;.tagged_with&lt;/code&gt; finds tags by name and probably uses polymorphism internally to determine the type of tags it should find. The &lt;code class=&quot;language-text&quot;&gt;#page&lt;/code&gt; method is for pagination with &lt;a href=&quot;https://github.com/amatsuda/kaminari&quot;&gt;Kaminari&lt;/a&gt; as this feature still works because a tag collection is just an ActiveRecord Relation object, albeit a modified one. And you’ll want to slap an &lt;code class=&quot;language-text&quot;&gt;#includes&lt;/code&gt; method to the end to get rid of any N+1 queries. The view would look the same as the posts view but you might want to add the name of the tag which you can get without even setting an instance variable of using a SQL query by just adding &lt;code class=&quot;language-text&quot;&gt;params[:id]&lt;/code&gt; where you want the name to be displayed. Now your Rails app can act as taggable.&lt;/p&gt;
&lt;p&gt;But wait, there’s more. This gem also includes this cool feature called a tag cloud which changes the css class based on the tags frequency. You can leverage this to create larger links for more frequent tags for a cool effect. You can see this result on my &lt;a href=&quot;/posts&quot;&gt;posts page&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;&amp;lt;% tag_cloud(@tags, %w(sm md lg xl)) do |tag, css_class| %&amp;gt;
  &amp;lt;%= link_to tag.name, tag_path(tag.name), class: css_class %&amp;gt;
&amp;lt;% end %&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;What this does is add the different css classes to your html links and you can style them by adding to your stylesheet.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;.sm {
  font-size: 1em;
}

.md {
  font-size: 1.33em;
}

.lg {
  font-size: 1.66em;
}

.xl {
  font-size: 2em;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now the more frequent tags will be larger and the less frequent will be smaller. Pretty cool feature I’d say.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[You Got Your Params in My URL]]></title><description><![CDATA[Oftentimes as Rails developers, we will run into a situation where we are making something polymorphic, and we won’t want to make any more…]]></description><link>https://www.charliemassry.com/posts/43-you-got-your-params-in-my-url/</link><guid isPermaLink="false">https://www.charliemassry.com/posts/43-you-got-your-params-in-my-url/</guid><pubDate>Wed, 29 Oct 2014 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Oftentimes as Rails developers, we will run into a situation where we are making something polymorphic, and we won’t want to make any more controllers than models. I had described in an &lt;a href=&quot;/posts/21&quot;&gt;earlier post&lt;/a&gt; to get around this by parsing the URL with a Regular Expression. This can get messy and confusing, so I want to show you an alternative. The popular URL helper method &lt;code class=&quot;language-text&quot;&gt;#button_to&lt;/code&gt; as well as &lt;code class=&quot;language-text&quot;&gt;#link_to&lt;/code&gt; can take a bunch of options, and when specified with a hash, passes that into the params hash, which is stored in the URL.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;button_to &amp;quot;Like&amp;quot;, like_path(likeable_type: &amp;quot;image&amp;quot;, likeable_id: 1)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This would produce a path like &lt;code class=&quot;language-text&quot;&gt;/likes?likeable_type=image&amp;amp;likeable_id=1&lt;/code&gt;. While this will look messy for the client, there is no more URL parsing.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;params[:likeable_type] # =&amp;gt; &amp;quot;image&amp;quot;
params[:likeable_id] # =&amp;gt; 1&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;All you have left to do is setup strong params with it and you’re good to go.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Don't use Metaprogramming When You Can Just Throw Classes at Things]]></title><description><![CDATA[Ruby has very powerful support for metaprogramming, which is also known as code that writes code, but it can be difficult to understand what…]]></description><link>https://www.charliemassry.com/posts/42-don-t-use-metaprogramming-when-you-can-just-throw-classes-at-things/</link><guid isPermaLink="false">https://www.charliemassry.com/posts/42-don-t-use-metaprogramming-when-you-can-just-throw-classes-at-things/</guid><pubDate>Tue, 28 Oct 2014 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Ruby has very powerful support for metaprogramming, which is also known as code that writes code, but it can be difficult to understand what is going on. One of the more obscure features of Object-Oriented Programming is the &lt;a href=&quot;http://en.wikipedia.org/wiki/Singleton_pattern&quot;&gt;Singleton Pattern&lt;/a&gt;, where you can add behavior to specific instances of classes and not all instances.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;x = &amp;quot;wombat&amp;quot;
y = &amp;quot;wobbegong&amp;quot;

def x.foo
  &amp;quot;foo&amp;quot;
end

x.foo # =&amp;gt; &amp;quot;foo&amp;quot;
y.foo # =&amp;gt; NoMethodError: undefined method `foo&amp;#39; for &amp;quot;wobbegong&amp;quot;:String&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;What’s going on here is you are defining &lt;code class=&quot;language-text&quot;&gt;#foo&lt;/code&gt; on the instance of String “wombat” but nothing else. When you define this method, internally Ruby is inserting a Singleton class with that method into the objects inheritance structure. When you call this method, Ruby doesn’t find it in the String class and it walks up the tree of inheritance till it either finds the method you called, or it calls &lt;code class=&quot;language-text&quot;&gt;#method_missing&lt;/code&gt; which defaults to raising that &lt;code class=&quot;language-text&quot;&gt;NoMethodError&lt;/code&gt; we saw earlier. This is not the only way to define Singleton methods.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;x = &amp;quot;wombat&amp;quot;

x.define_singleton_method(:foo) do
  &amp;quot;foo&amp;quot;
end

x.foo # =&amp;gt; &amp;quot;wombat&amp;quot;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You can even do this to a bunch of instances all at once.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;module Animals
  X = &amp;quot;wombat&amp;quot;
  Y = &amp;quot;wobbegong&amp;quot;
  Z = &amp;quot;giant salamander&amp;quot;

  constants.each do |constant|
    eval(constant.to_s).define_singleton_method(:foo) do
      &amp;quot;foo&amp;quot;
    end
  end
end&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;#each&lt;/code&gt; is looking through every constant defined in the module and adding a singleton class &lt;code class=&quot;language-text&quot;&gt;#foo&lt;/code&gt; to them. The way the &lt;code class=&quot;language-text&quot;&gt;.constants&lt;/code&gt; method works is it grabs all of the constants as symbols, which won’t work on &lt;code class=&quot;language-text&quot;&gt;#define_singleton_class&lt;/code&gt;, so they must be evaluating with &lt;code class=&quot;language-text&quot;&gt;eval&lt;/code&gt;, which executes any piece of code. If you use eval to parse something a client can enter, you open yourself up to code injection, which is marginally worse than SQL injection.&lt;/p&gt;
&lt;p&gt;You could probably think of a few different ways to do this, such as opening up classes, which is also derogatorily called &lt;a href=&quot;http://en.wikipedia.org/wiki/Monkey_patch&quot;&gt;Monkey Patching&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;class String
  def foo
    &amp;quot;foo&amp;quot;
  end
end&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now every time you call &lt;code class=&quot;language-text&quot;&gt;#foo&lt;/code&gt; on any String instance, you get &lt;code class=&quot;language-text&quot;&gt;&amp;quot;foo&amp;quot;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;While these features seem really cool, there really isn’t a great use for the Singleton Pattern here because we can just throw more classes at it.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;class Foo
  attr_reader :string

  def initialize(string)
    @string = string
  end

  def foo
    &amp;quot;foo&amp;quot;
  end

  def to_s
    string
  end
end

x = Foo.new(&amp;quot;wombat&amp;quot;)
x # =&amp;gt; wombat
x.foo # =&amp;gt; &amp;quot;foo&amp;quot;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The best parts about this is you can clearly see what is going on, and you can see that you didn’t break anything in any other classes.&lt;/p&gt;
&lt;p&gt;This is not to say don’t use metaprogramming, just don’t use it to take away clarity from what is going on.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Raw SQL on Rails]]></title><description><![CDATA[ActiveRecord is fantastic, but sometimes if you are doing complex joins and such, you may need to move away from ActiveRecord and write raw…]]></description><link>https://www.charliemassry.com/posts/41-raw-sql-on-rails/</link><guid isPermaLink="false">https://www.charliemassry.com/posts/41-raw-sql-on-rails/</guid><pubDate>Wed, 15 Oct 2014 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;ActiveRecord is fantastic, but sometimes if you are doing complex joins and such, you may need to move away from ActiveRecord and write raw SQL. Consider an application where you need to join three tables together with one SQL query. How would you write this in SQL?&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;SELECT locations.name AS location_name,
  locations.street_address,
  locations.city,
  locations.state,
  users.title,
  users.first_name,
  users.last_name,
  rooms.id,
  rooms.name AS room_name,
  rooms.room_number,
  rooms.location_id
  FROM locations
  INNER JOIN users
  ON users.location_id = locations.id
  INNER JOIN rooms
  ON rooms.location_id = locations.id
  WHERE locations.name ILIKE &amp;#39;%Empire%&amp;#39;
  AND users.last_name ILIKE &amp;#39;%Empire%&amp;#39;;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is a mouthful but what is going on is pretty straightforward; still a few questions come to mind: how do you turn it into an active record object, how to you make the search dynamic, and how do you prevent SQL injection.&lt;/p&gt;
&lt;p&gt;The answer to the first question is to wrap the SQL statement string so ActiveRecord will know how to understand it.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;ActiveRecord::Base.
  connection.
  execute(
  &amp;lt;&amp;lt;-SQL
    SELECT locations.name AS location_name,
    locations.street_address,
    locations.city,
    locations.state,
    users.title,
    users.first_name,
    users.last_name,
    rooms.id,
    rooms.name AS room_name,
    rooms.room_number,
    rooms.location_id
    FROM locations
    INNER JOIN users
    ON users.location_id = locations.id
    INNER JOIN rooms
    ON rooms.location_id = locations.id
    WHERE locations.name ILIKE &amp;#39;%Empire%&amp;#39;
    AND users.last_name ILIKE &amp;#39;%Empire%&amp;#39;;
  SQL
  )&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This will execute it and return an ActiveRecord Object, but it will not be dynamic. You can just make it dynamic with &lt;code class=&quot;language-text&quot;&gt;?&lt;/code&gt;, but it will be vulnerable to SQL injection, which is not something you &lt;a href=&quot;http://xkcd.com/327/&quot;&gt;want to do&lt;/a&gt;, so you will have to escape it.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;def sql_query
  ActiveRecord::Base.
    connection.
    execute(
      sanitized_sql_statement
    )
end

def sanitized_sql_statement
  ActiveRecord::Base.send(
    :sanitize_sql_array,
    [
      sql_string,
      &amp;quot;%#{query}%&amp;quot;,
      &amp;quot;%#{query}%&amp;quot;
    ]
  )
end

def sql_statement
  &amp;lt;&amp;lt;-SQL
    SELECT locations.name AS location_name,
      locations.street_address,
      locations.city,
      locations.state,
      users.title,
      users.first_name,
      users.last_name,
      rooms.id,
      rooms.name AS room_name,
      rooms.room_number,
      rooms.location_id
      FROM locations
      INNER JOIN users
      ON users.location_id = locations.id
      INNER JOIN rooms
      ON rooms.location_id = locations.id
      WHERE locations.name ILIKE ?
      AND users.last_name ILIKE ?;
  SQL
end&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Of course you can rewrite this in ActiveRecord, but it might not seem as intuitive as the SQL statement.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;Location.joins(:users, :rooms).select(
  &amp;quot;locations.name AS location_name&amp;quot;,
  &amp;quot;locations.street_address&amp;quot;,
  &amp;quot;locations.city&amp;quot;,
  &amp;quot;locations.state&amp;quot;,
  &amp;quot;users.title&amp;quot;,
  &amp;quot;users.first_name&amp;quot;,
  &amp;quot;users.last_name&amp;quot;,
  &amp;quot;rooms.id&amp;quot;,
  &amp;quot;rooms.name AS room_name&amp;quot;,
  &amp;quot;rooms.room_number&amp;quot;,
  &amp;quot;rooms.location_id&amp;quot;
).where(
  &amp;quot;locations.name ILIKE ? users.last_name ILIKE ?&amp;quot;,
  &amp;quot;%#{query}%&amp;quot;,
  &amp;quot;%#{query}%
)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here you can see that locations is the main table that you are joining with the other tables and you are only returning certain columns. If you did &lt;code class=&quot;language-text&quot;&gt;select(&amp;quot;*&amp;quot;)&lt;/code&gt; you would get everything, including the users encrypted password; you are then performing the search query. One of the main problems I had with this was to know exactly when each particular method was supposed to be called. When you call &lt;code class=&quot;language-text&quot;&gt;SELECT&lt;/code&gt; in SQL it has to be the first statement but in ActiveRecord you are chaining the methods together (and doing what looks like a violation of the &lt;a href=&quot;http://en.wikipedia.org/wiki/Law_of_Demeter&quot;&gt;Law of Demeter&lt;/a&gt;), and the ordering of the methods matter so ActiveRecord can properly construct the SQL query. &lt;/p&gt;</content:encoded></item><item><title><![CDATA[Mock external services with a VCR]]></title><description><![CDATA[When creating an Rails App using TDD, sometimes you will come across the need for an external service, for example, using the Google Maps…]]></description><link>https://www.charliemassry.com/posts/40-mock-external-services-with-a-vcr/</link><guid isPermaLink="false">https://www.charliemassry.com/posts/40-mock-external-services-with-a-vcr/</guid><pubDate>Fri, 10 Oct 2014 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;When creating an Rails App using TDD, sometimes you will come across the need for an external service, for example, using the Google Maps API. Over the course of testing, you will find that anything that accesses an external service, takes too long, doesn’t work without internet connection, and adds to your request limit. This can be very problematic if you do programming offline, say on a train, as those tests that use external services will all fail. How to solve this problem and still get your tests to pass can sound complicated at first, but there’s a gem for that.&lt;/p&gt;
&lt;p&gt;We will actually be using two gems for this, one to block the tests from contacting anything but &lt;code class=&quot;language-text&quot;&gt;localhost&lt;/code&gt; and one to grab the response once from the external service and refer to the original response on every subsequent test.&lt;/p&gt;
&lt;p&gt;The first gem is &lt;a href=&quot;https://github.com/bblimke/webmock&quot;&gt;WebMock&lt;/a&gt; to disable HTTP requests. To begin add to your &lt;code class=&quot;language-text&quot;&gt;Gemfile&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;gem &amp;quot;webmock&amp;quot;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;and run&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;$ bundle install&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;At the top of &lt;code class=&quot;language-text&quot;&gt;spec_helper.rb&lt;/code&gt;, you will need to add&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;require &amp;quot;webmock/rspec&amp;quot;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;WebMock.disable&lt;em&gt;net&lt;/em&gt;connect!(allow_localhost: true)&lt;/p&gt;
&lt;p&gt;This inserts WebMock into your tests so now you can’t access any external services and the tests will yell at you when you try with an error message like&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;WebMock::NetConnectNotAllowedError:
Real HTTP connections are disabled. Unregistered request: GET &amp;quot;http://maps.googleapis.com/maps/api/geocode/json?address=350%205th%20Avenue%20New%20York,%20NY%2010118&amp;amp;language=en&amp;amp;sensor=false&amp;quot; with headers {&amp;#39;Accept&amp;#39;=&amp;gt;&amp;#39;*/*&amp;#39;, &amp;#39;Accept-Encoding&amp;#39;=&amp;gt;&amp;#39;gzip;q=1.0,deflate;q=0.6,identity;q=0.3&amp;#39;, &amp;#39;User-Agent&amp;#39;=&amp;gt;&amp;#39;Ruby&amp;#39;}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; You can stub this request with the following snippet:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;stub_request(:get, &amp;quot;http://maps.googleapis.com/maps/api/geocode/json?address=350%205th%20Avenue%20New%20York,%20NY%2010118&amp;amp;language=en&amp;amp;sensor=false&amp;quot;).
  with(:headers =&amp;gt; {&amp;#39;Accept&amp;#39;=&amp;gt;&amp;#39;*/*&amp;#39;, &amp;#39;Accept-Encoding&amp;#39;=&amp;gt;&amp;#39;gzip;q=1.0,deflate;q=0.6,identity;q=0.3&amp;#39;, &amp;#39;User-Agent&amp;#39;=&amp;gt;&amp;#39;Ruby&amp;#39;}).
  to_return(:status =&amp;gt; 200, :body =&amp;gt; &amp;quot;&amp;quot;, :headers =&amp;gt; {})

registered request stubs:

stub_request(:get, &amp;quot;http://maps.googleapis.com/&amp;quot;).
  with(:headers =&amp;gt; {&amp;#39;Accept&amp;#39;=&amp;gt;&amp;#39;*/*&amp;#39;, &amp;#39;User-Agent&amp;#39;=&amp;gt;&amp;#39;Ruby&amp;#39;})

============================================================&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This gem is cool that it tells you how to fix it, but you would have to type out exactly what you want to get from the external service, as it doesn’t know what is supposed to be in the body. Wouldn’t it be cool to just run the test once and all of the response gets copied for later usage. The &lt;a href=&quot;https://github.com/vcr/vcr&quot;&gt;VCR&lt;/a&gt; gem does just that. To get that working, in your &lt;code class=&quot;language-text&quot;&gt;Gemfile&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;gem &amp;quot;vcr&amp;quot;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;and run&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;$ bundle install&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now we must configure VCR to stop WebMock once to record, and then stub out the request every subsequent time. To configure make a &lt;code class=&quot;language-text&quot;&gt;vcr_setup.rb&lt;/code&gt; file in &lt;code class=&quot;language-text&quot;&gt;spec/support&lt;/code&gt; and you will add the configuration details like&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;require &amp;quot;vcr&amp;quot;

VCR.configure do |c|
  c.cassette_library_dir = &amp;quot;vcr_cassettes&amp;quot;
  c.hook_into :webmock
end&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;What this is doing is creating a directory called &lt;code class=&quot;language-text&quot;&gt;vcr_cassettes&lt;/code&gt; and creating a response YAML file for each unique request in that directory. Since it is a very modular gem, it allows you to interact with not just WebMock but other gems as well, so we need to tell it which gem we are using.&lt;/p&gt;
&lt;p&gt;When you run the tests it will then tell you where it is failing and give you an idea of how to fix it, but the error message can seem a little unnecessary. All it really wants you to do is every time you are making a request to the same external service, just wrap it in a VCR block. For example,&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;describe Location do
  context &amp;quot;.search&amp;quot; do
    it &amp;quot;returns a correct search result&amp;quot; do
      VCR.use_cassette(&amp;quot;geolocate&amp;quot;) do
        @location = create(:location)
      end

      expect(Location.search(&amp;quot;Empire State Building&amp;quot;)).to include(@location)
    end
  end
end&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The first time you run the test it will contact Google Maps and record the response in a YAML file in &lt;code class=&quot;language-text&quot;&gt;vcr_cassettes/geolocate.yml&lt;/code&gt; and will grab that response on every subsequent test where the name passed in to &lt;code class=&quot;language-text&quot;&gt;.use_cassette&lt;/code&gt; is the same. One thing to note is when you are running an integration test, you only need to wrap whatever creates the location in the &lt;code class=&quot;language-text&quot;&gt;VCR.use_cassette&lt;/code&gt; block, so with Capybara&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;...
fill_in &amp;quot;Name&amp;quot;, with: location.name

VCR.use_cassette(&amp;quot;geolocate&amp;quot;) do
  click_button &amp;quot;Add Location&amp;quot;
end
...&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Your tests will now pass on a plane or a train, almost like you have a cassette player with you.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Devise Guest User]]></title><description><![CDATA[Using Devise in Ruby on Rails can be very convenient for authentication, but there are some necessary workarounds that you must be aware of…]]></description><link>https://www.charliemassry.com/posts/39-devise-guest-user/</link><guid isPermaLink="false">https://www.charliemassry.com/posts/39-devise-guest-user/</guid><pubDate>Thu, 09 Oct 2014 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Using Devise in Ruby on Rails can be very convenient for authentication, but there are some necessary workarounds that you must be aware of, specifically when you introduce the Null Object Pattern. I had described in a &lt;a href=&quot;/posts/27&quot;&gt;previous post&lt;/a&gt; how to use the Null Object Pattern with &lt;a href=&quot;https://github.com/halogenandtoast/monban&quot;&gt;Monban&lt;/a&gt;, which was very simple. Using this pattern with &lt;a href=&quot;http://devise.plataformatec.com.br/&quot;&gt;Devise&lt;/a&gt; however is not so simple.&lt;/p&gt;
&lt;p&gt;If you follow the Devise guide on &lt;a href=&quot;https://github.com/plataformatec/devise/wiki/How-To:-Create-a-guest-user&quot;&gt;how to create a guest user&lt;/a&gt; it encourages you to create a guest user in the database, which can be useful for certain circumstances, like when you need your Guest User transfer over information when they actually sign up, but if not, we can just create a Null User.  &lt;/p&gt;
&lt;p&gt;You might have in your app a bunch of checks like &lt;code class=&quot;language-text&quot;&gt;&amp;lt;% if current_user.admin %&amp;gt;&lt;/code&gt; and if you allow guest users, with Devise, you need to either wrap everything in a &lt;code class=&quot;language-text&quot;&gt;&amp;lt;% if user_signed_in? %&amp;gt;&lt;/code&gt;, or create a Guest User. Having a Guest User object with all the same method names return false can be very helpful for this situation, as you can just create a dummy method everytime you get a &lt;code class=&quot;language-text&quot;&gt;NoMethodError: undefined method admin? for nil:NilClass&lt;/code&gt;. To begin, we would write in our &lt;code class=&quot;language-text&quot;&gt;ApplicationController&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;def current_user
  super || GuestUser.new
end&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;There is still a Devise gotcha here. The method &lt;code class=&quot;language-text&quot;&gt;user_signed_in?&lt;/code&gt; only returns a falsy value if &lt;code class=&quot;language-text&quot;&gt;current_user&lt;/code&gt; is falsy. Since a Guest User is not nil it won’t return nil. What we must do is create &lt;code class=&quot;language-text&quot;&gt;User#signed_in?&lt;/code&gt; and &lt;code class=&quot;language-text&quot;&gt;GuestUser#signed_in?&lt;/code&gt; methods that respond with true and false respectively. and use that for our checks, which will look like&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;&amp;lt;% if current_user.signed_in? %&amp;gt;
  &amp;lt;% link_to &amp;quot;Sign out&amp;quot;, destroy_user_session_path %&amp;gt;
&amp;lt;% end %&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This will help keep your code &lt;a href=&quot;http://en.wikipedia.org/wiki/SOLID_(object-oriented_design)&quot;&gt;SOLID&lt;/a&gt; and you won’t even touch your database.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Devise on Rails]]></title><description><![CDATA[With most web apps, you’ll want to have some type of authentication system so your users’ data is secure. The question then shifts of how to…]]></description><link>https://www.charliemassry.com/posts/38-devise-on-rails/</link><guid isPermaLink="false">https://www.charliemassry.com/posts/38-devise-on-rails/</guid><pubDate>Tue, 07 Oct 2014 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;With most web apps, you’ll want to have some type of authentication system so your users’ data is secure. The question then shifts of how to implement user authentication, while you can roll your own, like I described in an earlier &lt;a href=&quot;/posts/13&quot;&gt;post&lt;/a&gt;, it can become a time sink really quickly but fortunately there’s a gem for that. There are actually many gems for authentication, in fact, if you look at the &lt;a href=&quot;https://www.ruby-toolbox.com/categories/rails_authentication&quot;&gt;Ruby Toolbox page&lt;/a&gt;, there are 19 to be exact. Topping the charts is the popular gem &lt;a href=&quot;http://devise.plataformatec.com.br/&quot;&gt;Devise&lt;/a&gt; from our friends over at &lt;a href=&quot;http://plataformatec.com.br/&quot;&gt;Plataformatec&lt;/a&gt; in Brazil.&lt;/p&gt;
&lt;p&gt;Devise provides many features and has 10 different modules such as the Omniauth support. It can however be difficult to set up, and even the documentation explicitly states to look into how authentication works in Rails and provides some links to sources that detail how to roll your own. To get started, add to your Gemfile&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;gem &amp;quot;devise&amp;quot;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Next run the Devise generate command&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;$ rails generate devise:install&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This generates two files, &lt;code class=&quot;language-text&quot;&gt;config/initializers/devise.rb&lt;/code&gt; and &lt;code class=&quot;language-text&quot;&gt;config/locales/devise.en.yml&lt;/code&gt;. &lt;code class=&quot;language-text&quot;&gt;devise.rb&lt;/code&gt; holds different configuration values, such as password length or email validation and &lt;code class=&quot;language-text&quot;&gt;devise.en.yml&lt;/code&gt; holds different Devise messages such as confirmation instructions. Now that you have these files, you can create users. You can call your users anything you want, but if you are just getting started you would probably just want to call them users. To do that you must make sure your database is created and then you can generate your User model with Devise.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;$ rails generate devise User&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This generates a couple of files, the migration and the User model. When you check the migration you will see a lot of cool database columns that will be created and auto-tracked, such as from the Trackable module, like &lt;code class=&quot;language-text&quot;&gt;last_sign_in_ip&lt;/code&gt; or &lt;code class=&quot;language-text&quot;&gt;last_sign_in_at&lt;/code&gt;. You can add your own as you please like &lt;code class=&quot;language-text&quot;&gt;username&lt;/code&gt; or &lt;code class=&quot;language-text&quot;&gt;first_name&lt;/code&gt; and &lt;code class=&quot;language-text&quot;&gt;last_name&lt;/code&gt; for example. This however requires some configuration due to the Strong Params in Rails 4. For example, lets add first name and last name support for the users. In our created migration&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;class DeviseCreateUsers &amp;lt; ActiveRecord::Migration
  def change
    create_table(:users) do |t|
      ...
      t.string :first_name
      t.string :last_name
      ...
    end
    ...
  end
end&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now that we’ve finished the migration&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;$ rake db:migrate&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To add the new columns to our view forms we must enter into the forms located in &lt;code class=&quot;language-text&quot;&gt;app/views/devise/registrations/new.html.erb&lt;/code&gt;. To even see the Devise created views within your app enter&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;$ rails generate devise:views&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This creates the Devise views in the &lt;code class=&quot;language-text&quot;&gt;views/devise&lt;/code&gt; directory.&lt;/p&gt;
&lt;p&gt;Within the &lt;code class=&quot;language-text&quot;&gt;form_for&lt;/code&gt; block add&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;&amp;lt;div&amp;gt;
  &amp;lt;%= f.label :first_name %&amp;gt;
  &amp;lt;%= f.text_field :first_name %&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;div&amp;gt;
  &amp;lt;%= f.label :last_name %&amp;gt;
  &amp;lt;%= f.text_field :last_name %&amp;gt;
&amp;lt;/div&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;When we submit this form however, it will not work because of the Strong Parameters I mentioned earlier, which really highlights what I think is one of the main problems with Devise, as opposed to a simpler gem like &lt;a href=&quot;https://github.com/halogenandtoast/monban&quot;&gt;Monban&lt;/a&gt;, it hides too much of what is going on which makes modification difficult. To add the first name and last name fields, we won’t create a Devise controller like we did with the views, instead we will modify the &lt;code class=&quot;language-text&quot;&gt;ApplicationController&lt;/code&gt; with a &lt;code class=&quot;language-text&quot;&gt;before_action&lt;/code&gt; to modify a hidden Devise controller&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;class ApplicationController &amp;lt; ActionController::Base
  ...
  before_action :configure_permitted_parameters, if: :devise_controller?

  protected

  def configure_permitted_parameters
    devise_parameter_sanitizer.for(:sign_up) &amp;lt;&amp;lt; [:first_name, :last_name]
  end
end&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You can create your own controller using the Devise controller generator which you might want to switch to if your application grows and needs more customization or different types of users with different sign in processes. But for now, your User model is ready to roll with Devise and any extra fields you care to add to users.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Don't Use Your Mouse for Text Editing with Vim]]></title><description><![CDATA[Sublime Text is a very popular editor, but you must use your mouse at times, which takes some time away from your hands being at the…]]></description><link>https://www.charliemassry.com/posts/37-don-t-use-your-mouse-for-text-editing-with-vim/</link><guid isPermaLink="false">https://www.charliemassry.com/posts/37-don-t-use-your-mouse-for-text-editing-with-vim/</guid><pubDate>Mon, 06 Oct 2014 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Sublime Text is a very popular editor, but you must use your mouse at times, which takes some time away from your hands being at the keyboard, thus slowing you down. &lt;a href=&quot;http://www.vim.org&quot;&gt;Vim&lt;/a&gt; solves this problem and so much more. As you do not use your mouse, Vim has a steep learning curve, to get started with vim&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;$ vimtutor&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This introduces you to the basic movement commands, like moving around with &lt;code class=&quot;language-text&quot;&gt;h&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;j&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;k&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;l&lt;/code&gt;, or moving forward or backwards in words with &lt;code class=&quot;language-text&quot;&gt;e&lt;/code&gt; and &lt;code class=&quot;language-text&quot;&gt;b&lt;/code&gt; and combine these commands with numbers so you’ll DRY up your keystrokes. It also shows you the basics of entering insert mode to enter characters into the buffer, visual mode, which allows you to select characters, and replace mode, where you can replace the character your cursor is over with your keypress.  &lt;/p&gt;
&lt;p&gt;Once you have the basics down, you’ll realize you can combine motions, for example &lt;code class=&quot;language-text&quot;&gt;ciw&lt;/code&gt;(change in word) lets you start typing and when you press &lt;code class=&quot;language-text&quot;&gt;ESC&lt;/code&gt; the word you typed replaces the word the cursor was over. Another cool command is &lt;code class=&quot;language-text&quot;&gt;A&lt;/code&gt;, which brings you into insert mode at the end of the line, and &lt;code class=&quot;language-text&quot;&gt;I&lt;/code&gt;, which brings you into insert mode at the beginning of the line.&lt;/p&gt;
&lt;p&gt;Once you get a little more advanced, you might want to create macros that run shell commands for you. For example, I’d like a command that run all my tests for me in a Rails project. I use &lt;a href=&quot;https://github.com/rails/spring&quot;&gt;Spring&lt;/a&gt; so my Rails environment doesn’t have to start up every time I run RSpec, so I would just type in Vim when I want to run my tests&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;:!spring rspec&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This can get annoying as that is 14 keystrokes not including &lt;code class=&quot;language-text&quot;&gt;SHIFT&lt;/code&gt;. Fortunately you can write macros using VimScript. While not nearly as elegant as Ruby, VimScript gets the job done easily enough. In your .vimrc file&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;function RunSpringRSpec()
  execute &amp;quot;!spring rspec&amp;quot;
endfunction
map &amp;lt;Leader&amp;gt;s :call RunSpringRSpec()&amp;lt;CR&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;function&lt;/code&gt; declares a new function and its name is &lt;code class=&quot;language-text&quot;&gt;RunSpringRSpec&lt;/code&gt; and the parentheses are necessary. It executes &lt;code class=&quot;language-text&quot;&gt;!spring rspec&lt;/code&gt;, the &lt;code class=&quot;language-text&quot;&gt;!&lt;/code&gt; is to execute terminal commands in vim and anything after that gets executed. After the function is declared, &lt;code class=&quot;language-text&quot;&gt;&amp;lt;LEADER&amp;gt;s&lt;/code&gt; is mapped to the function. &lt;code class=&quot;language-text&quot;&gt;&amp;lt;LEADER&amp;gt;&lt;/code&gt; is whatever key you designate as the &lt;code class=&quot;language-text&quot;&gt;&amp;lt;LEADER&amp;gt;&lt;/code&gt; key, &lt;code class=&quot;language-text&quot;&gt;\\&lt;/code&gt; by default. Every time I press &lt;code class=&quot;language-text&quot;&gt;\\s&lt;/code&gt; the function gets executed. &lt;code class=&quot;language-text&quot;&gt;&amp;lt;CR&amp;gt;&lt;/code&gt; or carriage return is simply the enter key. Once you get the hang of it, Vim is very intuitive, robust, text editor.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Using Redis for Autocompletion on Rails]]></title><description><![CDATA[For a website that has search functionality, you might want to have autocompletion, so when the user starts typing it automatically pops up…]]></description><link>https://www.charliemassry.com/posts/36-using-redis-for-autocompletion-on-rails/</link><guid isPermaLink="false">https://www.charliemassry.com/posts/36-using-redis-for-autocompletion-on-rails/</guid><pubDate>Tue, 30 Sep 2014 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;For a website that has search functionality, you might want to have autocompletion, so when the user starts typing it automatically pops up suggestions. This is actually pretty tricky to implement because of a couple of reasons, namely performance. The actual Javascript function of getting the text to pop up is actually really easy if you use the &lt;a href=&quot;http://jqueryui.com/autocomplete/&quot;&gt;JQuery-UI autocomplete&lt;/a&gt; library.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;$(function(){
  $(&amp;quot;#q&amp;quot;).autocomplete({
    source: &amp;quot;/search_suggestions&amp;quot;
  });
});&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Your application would need to have a &lt;code class=&quot;language-text&quot;&gt;/search_suggestion&lt;/code&gt; path and JSON data at that path. The main question is how to model this data, specifically knowing that SQL queries can take a lot of time. Enter Redis.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.redis.io&quot;&gt;Redis&lt;/a&gt; is an in memory key-value store, which is exactly what we need. You can even try using Redis for free from &lt;a href=&quot;http://try.redis.io/&quot;&gt;your browser&lt;/a&gt; The idea is to take all the searchable items, make an AJAX request when the user types each letter and render the results as JSON.&lt;/p&gt;
&lt;p&gt;First you must setup Redis which is easy enough if you are on Mac OSX.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;$ brew install redis&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Next you can start the Redis server in a separate terminal tab.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;$ redis-server&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Once that is done you must configure Redis to work with Rails. Luckily, there’s a gem for that. In your Gemfile&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;gem &amp;quot;redis&amp;quot;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;$ bundle install&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now in &lt;code class=&quot;language-text&quot;&gt;config/initializers/redis.rb&lt;/code&gt; you can have Redis work globally by assigning the instance to a global variable like&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;$redis = Redis.new&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Since Redis is now configured, we must get Redis to work with the search suggestions.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;class SearchSuggestion
  def self.terms_for(prefix)
    $redis.zrevrange(&amp;quot;search-suggestion:#{prefix.downcase}&amp;quot;, 0, 9)
  end
end&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In controller you can just render the model as JSON.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;class SearchSuggestionsController &amp;lt; ApplicationController
  def index
    render json: SearchSuggestion.terms_for(params[:term])
  end
end&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Nothing will be displayed however right now as &lt;code class=&quot;language-text&quot;&gt;#zrevrange&lt;/code&gt; is equivalent to a &lt;code class=&quot;language-text&quot;&gt;SELECT&lt;/code&gt; statement. So to insert the data, I recommend writing a rake task to index the terms, as you don’t want to have Rails process all of the indexing and get hung up.&lt;/p&gt;
&lt;p&gt;You can write a rake task by creating a file in the &lt;code class=&quot;language-text&quot;&gt;lib/tasks&lt;/code&gt; directory ending in &lt;code class=&quot;language-text&quot;&gt;.rake&lt;/code&gt;, we’ll call it &lt;code class=&quot;language-text&quot;&gt;search_suggestion.rake&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;namespace :search_suggestions do
  desc &amp;quot;Generate search suggestions from location&amp;quot;
  task index: :environment do
    SearchSuggestion.index_location
  end
end&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now when you type in &lt;code class=&quot;language-text&quot;&gt;$ rake -T&lt;/code&gt; you will see your rake task on the rake task list. You can run this task by simply typing&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;$ rake search_suggestions:index&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now how do we form that &lt;code class=&quot;language-text&quot;&gt;.index_location&lt;/code&gt; class method. We can take all of the locations and index each of them by their combined letters up to but not including their last letter. We also want to make each individual word indexed by its letters.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;def self.index_locations
  Location.find_each do |location|
    index_term(location.name)
    location.name.split.each { |term| index_term(term) }
  end
end

def self.index_term(term)
  1.upto(term.length - 1) do |n|
    prefix = term[0, n]
    $redis.zincrby(&amp;quot;search-suggestion:#{prefix.downcase}&amp;quot;, 1, term.downcase)
  end
end&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The entire location name is being indexed in the &lt;code class=&quot;language-text&quot;&gt;.index_term&lt;/code&gt; method, and then the individual words are being indexed.&lt;/p&gt;
&lt;p&gt;This will be much faster than just using &lt;code class=&quot;language-text&quot;&gt;SQL&lt;/code&gt; queries, but you still probably want to squeeze out that last bit of performance. Well there is a way that involves modifying the Rack Middleware. If you’re not familiar with Rack Middleware, what happens when a request comes to your Rails application, the request passes through the Rack Middleware and each piece of Middleware changes the request on the way down until it finally reaches your application. We will want to change this because each piece of Middleware can add some time to the request. First, we must create the Middleware we want to add. We can make a new directory called &lt;code class=&quot;language-text&quot;&gt;app/middleware&lt;/code&gt;. In this directory we can make the Middleware file &lt;code class=&quot;language-text&quot;&gt;search_suggestions.rb&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;class SearchSuggestions
  def initialize(app)
    @app = app
  end

  def call(env)
    if env[&amp;quot;PATH_INFO&amp;quot;] == &amp;quot;/search_suggestions&amp;quot;
      request = Rack::Request.new(env)
      terms = SearchSuggestion.terms_for(request.params[&amp;quot;term&amp;quot;])
      [200, {&amp;quot;Content-Type&amp;quot; =&amp;gt; &amp;quot;application/json&amp;quot;}, [terms.to_json]]
    else
      @app.call(env)
    end
  end
end&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Each Middleware is initialized with the Application object and each middleware uses the &lt;code class=&quot;language-text&quot;&gt;#call&lt;/code&gt; method on the Application. This is a form of polymorphism as all each Middleware must do is respond to &lt;code class=&quot;language-text&quot;&gt;#call&lt;/code&gt;. Here the request is instantiated with the Application object and the &lt;code class=&quot;language-text&quot;&gt;params[&amp;quot;term&amp;quot;]&lt;/code&gt; is extracted to call the search suggestion. The result is then sent back to the client as JSON. To add the Middleware to the top of the stack, you want to go into &lt;code class=&quot;language-text&quot;&gt;config/application.rb&lt;/code&gt;, and inside of the Application class, add&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;config.middleware.insert_before(0, &amp;quot;SearchSuggestions&amp;quot;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This inserts the middleware at the front, and now you are all setup with fast autocompletion. There is still some CSS issues that you will run into as the JQuery-UI autocomplete doesn’t add any CSS, but I’ll leave that to you.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Google Maps on Rails]]></title><description><![CDATA[Previously, I had blogged about how to set up your website to make requests to match string addresses to latitude and longitude coordinates…]]></description><link>https://www.charliemassry.com/posts/35-google-maps-on-rails/</link><guid isPermaLink="false">https://www.charliemassry.com/posts/35-google-maps-on-rails/</guid><pubDate>Mon, 29 Sep 2014 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Previously, I had blogged about how to set up your website to make requests to match string addresses to latitude and longitude coordinates. I had &lt;a href=&quot;/posts/34&quot;&gt;wrote about&lt;/a&gt; how to use the &lt;a href=&quot;http://www.rubygeocoder.com&quot;&gt;Geocoder&lt;/a&gt; gem to accomplish this task. Now, to pull it all together with &lt;a href=&quot;https://developers.google.com/maps/web/&quot;&gt;Google Maps&lt;/a&gt;. Getting started is simple, first I recommend getting an API key from Google Maps. I also recommend installing the &lt;a href=&quot;https://github.com/bkeepers/dotenv&quot;&gt;dotenv-rails&lt;/a&gt; gem for easy API key management. Now simply create a &lt;code class=&quot;language-text&quot;&gt;.env&lt;/code&gt; file in the root of your Rails directory and enter your Google Maps API key in it like&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;GOOGLE_MAPS_API_KEY=your_api_key&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now, in the file where you want to display the map, you would want the files in your &lt;code class=&quot;language-text&quot;&gt;&amp;lt;head&amp;gt;&lt;/code&gt; tag so to easily do that in rails you can add a &lt;code class=&quot;language-text&quot;&gt;content_for&lt;/code&gt; erb tag which takes a block like&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;&amp;lt;% content_for :google_maps do %&amp;gt;
  ...
&amp;lt;% end %&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In &lt;code class=&quot;language-text&quot;&gt;layouts/application&lt;/code&gt; add &lt;code class=&quot;language-text&quot;&gt;&amp;lt;%= yield :google_maps %&amp;gt;&lt;/code&gt; to above the standard &lt;code class=&quot;language-text&quot;&gt;javascript_include_tag&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Inside this block, you’ll want to add the Google Maps logic and styling to get the map working. You’ll need to have a starting point, how deep of a zoom, and optionally markers that display location of specific items. As for the actual &lt;code class=&quot;language-text&quot;&gt;&amp;lt;body&amp;gt;&lt;/code&gt; tag, you’ll need to set a div with a particular id and reference that in your javascript to display the map at that part of the page like &lt;code class=&quot;language-text&quot;&gt;&amp;lt;div id=&amp;quot;map-canvas&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;You’ll want to add something for the style so it displays, like&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;html, body, #map-canvas {
  height: 100%; margin: 0; padding: 0;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And for your Javascript&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;var latLng = new google.maps.LatLng(
  &amp;lt;%= @current_location.latitude %&amp;gt;,
  &amp;lt;%= @current_location.latitude %&amp;gt;
);
var mapOptions = {
  center: latLng,
  zoom: 12
};

var map = new google.maps.Map(
  document.getElementById(&amp;#39;map-canvas&amp;#39;),
  mapOptions
);

setMarkers(map, locations);&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;A few things of note, you can get the user’s current location a few ways, one of which is to get the request object and call location on it like &lt;code class=&quot;language-text&quot;&gt;request.location&lt;/code&gt;. The request object is an instance of the &lt;code class=&quot;language-text&quot;&gt;ActionDispatch::Request&lt;/code&gt; class that has a lot of data about the request such as the IP address and the path, as well as a bunch of constants like what url the request was coming from. If you have the &lt;code class=&quot;language-text&quot;&gt;pry-rails&lt;/code&gt; gem installed, you can simple add &lt;code class=&quot;language-text&quot;&gt;binding.pry&lt;/code&gt; into your controller, refresh the page, go into your terminal and type in &lt;code class=&quot;language-text&quot;&gt;request&lt;/code&gt; to see the entire object. Additionally, Geocoder adds a location method to this object which looks up the object based on the IP address, which is an expensive lookup but is not obtrusive to the user. Also it won’t work in development as &lt;code class=&quot;language-text&quot;&gt;request.location&lt;/code&gt; will return &lt;code class=&quot;language-text&quot;&gt;[0.0, 0.0]&lt;/code&gt; because it is coming from &lt;code class=&quot;language-text&quot;&gt;127.0.0.1&lt;/code&gt; or &lt;code class=&quot;language-text&quot;&gt;localhost&lt;/code&gt;. It will put you at those coordinates which is where the Equator and the Prime Meridian intersect; off the coast of Africa in the Atlantic Ocean.&lt;/p&gt;
&lt;p&gt;Another thing to note is the &lt;code class=&quot;language-text&quot;&gt;locations&lt;/code&gt; variable that I show being passed into the &lt;code class=&quot;language-text&quot;&gt;setMarkers&lt;/code&gt; function. Ideally this locations variable is valid JSON and &lt;code class=&quot;language-text&quot;&gt;setMarkers&lt;/code&gt; iterates through the JSON feed.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;function setMarkers(map, locations) {
  for (var i = 0; i &amp;lt; locations.length; i++) {
    var location = locations[i];
    var locationLatLng = new google.maps.LatLng(location[1], location[2]);

    var marker = new google.maps.Marker({
      position: locationLatLng,
      map: map,
      title: location[0],
      zIndex: location[3]
    });

    var contentString = &amp;#39;&amp;lt;a href=&amp;quot;/locations/&amp;#39; + location[4] + &amp;#39;&amp;quot;&amp;gt;&amp;#39; + location[0] + &amp;#39;&amp;lt;/a&amp;gt;&amp;#39;

    var infoWindow = new google.maps.InfoWindow({
      content: contentString
    });

    google.maps.event.addListener(marker, &amp;#39;click&amp;#39;, function(){
      infoWindow.open(map, marker);
    });

    marker.setMap(map);
  };
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You can the nearby locations using the Geocoder method &lt;code class=&quot;language-text&quot;&gt;#near&lt;/code&gt; which takes two arguments, one of which is where it originates from and the other one is the number of miles in the radius. So in your controller you might have&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;def index
  @current_location = request.location
  @locations = Location.near(@current_location.coordinates, 15)
end&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Once you have all of this set up you can call&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;google.maps.event.addDomListener(window, &amp;#39;load&amp;#39;, initialize);&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;and your all set.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Geolocating on Rails]]></title><description><![CDATA[In this day in age, 2014, websites using location services are becoming more and more common to better serve customers as they can provide a…]]></description><link>https://www.charliemassry.com/posts/34-geolocating-on-rails/</link><guid isPermaLink="false">https://www.charliemassry.com/posts/34-geolocating-on-rails/</guid><pubDate>Tue, 23 Sep 2014 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;In this day in age, 2014, websites using location services are becoming more and more common to better serve customers as they can provide a quicker, cleaner user interface. But how is geolocation integrated into a Rails app? Well there are a couple of steps, first you must get the latitude and longitude coordinates as computers need these to be able to plot on a map, almost like the &lt;a href=&quot;http://en.wikipedia.org/wiki/Cartesian_coordinate_system&quot;&gt;Cartesian Coordinate System&lt;/a&gt; which you may or may not remember as the x y graph from Algebra in grade school. To turn an address into longitude and latitude coordinates, there’s a gem for that; I like the &lt;a href=&quot;http://www.rubygeocoder.com&quot;&gt;Geocoder&lt;/a&gt; gem. The Geocoder gem is simple to set up and has good documentation. To begin, in your Gemfile&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;gem &amp;quot;geocoder&amp;quot;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then run&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;$ bundle install&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The next part might be a little tricky as Geocoder depends on the database to store latitude and longitude coordinates, so you must create columns in your database as such. You can do this fairly easily with a migration&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;$ rails generate migration AddLocationDataToSchools latitude:float longitude:float&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;When you check the migration that is generated, you will get exactly what you want, just replace &lt;code class=&quot;language-text&quot;&gt;Schools&lt;/code&gt; in &lt;code class=&quot;language-text&quot;&gt;AddLocationDataToSchools&lt;/code&gt; to whatever your model name is; isn’t Rails awesome! Next, you must add it to your database, so run&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;$ rake db:migrate&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now that you have the database set up you can set it to work automatically, so in your model&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;geocoded_by :address
after_validation :geocode, if: :address_changed?&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now, your address will be converted to latitude and longitude coordinates after the record is created. A couple of things to note, you are limited in your number of requests per day for geolocating, also you must be connected to the Internet, which can be a pain during development. Stay tuned for tips on how to display a map with these coordinates. &lt;/p&gt;</content:encoded></item><item><title><![CDATA[AngularJS on Rails]]></title><description><![CDATA[Recently, I have started looking into AngularJS, a popular front-end Javascript MVC, to help me write cleaner, better, front-end code…]]></description><link>https://www.charliemassry.com/posts/33-angularjs-on-rails/</link><guid isPermaLink="false">https://www.charliemassry.com/posts/33-angularjs-on-rails/</guid><pubDate>Tue, 16 Sep 2014 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Recently, I have started looking into AngularJS, a popular front-end Javascript MVC, to help me write cleaner, better, front-end code. &lt;a href=&quot;https://angularjs.org/&quot;&gt;AngularJS&lt;/a&gt;, developed by &lt;a href=&quot;https://www.google.com/&quot;&gt;Google&lt;/a&gt;, enhances your HTML by providing useful HTML attributes, data-binding, and helpful methods to pull it all together. &lt;/p&gt;
&lt;p&gt;To get started on an existing Rails project, you should create a JSON feed, I like to use &lt;a href=&quot;https://github.com/rails/jbuilder&quot;&gt;jbuilder&lt;/a&gt;. For example, if your controller looks like:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;class PlayerStatsController &amp;lt; ApplicationController
  ...
  def show
    team = find_team
    @player_stat_column = team.player_stat_columns
    @players = team.players
  end
  ...
end&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Your jbuilder file would look like:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;json.player_stat_column @player_stat_column.names

json.players @players do |player|
  json.email player.email
  json.stats player.player_stat.statistics
end&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This would create a JSON page at whatever the URL is, plus &lt;code class=&quot;language-text&quot;&gt;.json&lt;/code&gt;. The JSON page would look then render something that looks like this:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;{
  player_stat_column: [
    &amp;quot;completions&amp;quot;,
    &amp;quot;attempts&amp;quot;,
    &amp;quot;goals&amp;quot;
  ],
  players: [
    {
      email: &amp;quot;me@charliemassry.com&amp;quot;,
      stats: {
        completions: 77,
        attempts: 90,
        goals: 24
      }
    },
    {
      email: &amp;quot;something1@charliemassry.com&amp;quot;,
      stats: []
    }
  ]
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now you have your data, but how do you pass that into the view using AngularJS. Well first, you must require the AngularJS file by typing&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;&amp;lt;%= javascript_include_tag &amp;quot;https://ajax.googleapis.com/ajax/libs/angularjs/1.2.24/angular.min.js&amp;quot; %&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;in either &lt;code class=&quot;language-text&quot;&gt;application.html.erb&lt;/code&gt; or typing in&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;&amp;lt;% content_for :angular do %&amp;gt;
  &amp;lt;%= javascript_include_tag &amp;quot;https://ajax.googleapis.com/ajax/libs/angularjs/1.2.24/angular.min.js&amp;quot; %&amp;gt;
&amp;lt;% end %&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;in the current file and then adding &lt;code class=&quot;language-text&quot;&gt;&amp;lt;%= yield :angular %&amp;gt;&lt;/code&gt; in the &lt;code class=&quot;language-text&quot;&gt;application.html.erb&lt;/code&gt; file. In both cases, you must require AngularJS before the standard &lt;code class=&quot;language-text&quot;&gt;javascript_include_tag&lt;/code&gt;. One problem with using a “Content Delivery Network” to include the AngularJS library is if you need to work on the project offline, say on a train or such, it won’t work so you will have to manually include the project in your application.&lt;/p&gt;
&lt;p&gt;Now that you have AngularJS and you JSON feed set up you can finally begin. First, you need to create the scope of the AngularJS app, so if you are not creating an entire AngularJS app and it will be local to one particular site simply make a div tag that holds the entire partial and pass in the attribute &lt;code class=&quot;language-text&quot;&gt;ng-app&lt;/code&gt; and create a module name for it.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;&amp;lt;div ng-app=&amp;quot;playerStats&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Next, you must require the AngularJS module, so in a Javascript file, let’s call it &lt;code class=&quot;language-text&quot;&gt;main.js&lt;/code&gt; and let’s put it in &lt;code class=&quot;language-text&quot;&gt;app/assets/javascripts/&lt;/code&gt;. Let’s also make sure to require it before the rest of the Javascript files. So in your &lt;code class=&quot;language-text&quot;&gt;application.js&lt;/code&gt; file&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;...
//= require main
//= require tree .&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now that that’s out of the way we can write our module file, for now it is just a one liner in the &lt;code class=&quot;language-text&quot;&gt;main.js&lt;/code&gt; file.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;var playerStats = angular.module(&amp;#39;playerStats&amp;#39;, []);&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now we can move on to our controller.  &lt;/p&gt;
&lt;p&gt;What I’d like to happen is take our JSON feed and display it on the page and map the players’ stats to the column names. This can be done fairly easily with AngularJS. First you must scope the controller to a particular part of a page. So now your page should look like&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;&amp;lt;div ng-app=&amp;quot;playerStats&amp;quot;&amp;gt;
  &amp;lt;div ng-controller=&amp;quot;playerStatsController&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Second, create a controller, we’ll put it in &lt;code class=&quot;language-text&quot;&gt;app/assets/javascripts/angular/controllers&lt;/code&gt;, and we will call it &lt;code class=&quot;language-text&quot;&gt;playerStatsController.js&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;playerStats.controller(&amp;quot;playerStatsController&amp;quot;, [&amp;quot;$scope&amp;quot;, &amp;quot;$http&amp;quot;, function($scope, $http){
  var path = location.pathname + &amp;quot;.json&amp;quot;;
  $http.get(path).success(function(data){
  $scope.columns = data.player_stat_column;
  $scope.players = data.players;
  });
}]);&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;What is happening in this controller is, its name is being assigned and then it is passed in two variables that it has access to, &lt;code class=&quot;language-text&quot;&gt;$scope&lt;/code&gt; and &lt;code class=&quot;language-text&quot;&gt;$http&lt;/code&gt;. &lt;code class=&quot;language-text&quot;&gt;$scope&lt;/code&gt; allows you to pass variables to the view for easy data-binding, and &lt;code class=&quot;language-text&quot;&gt;$http&lt;/code&gt; allows you to access other websites. Within the controller, the url plus &lt;code class=&quot;language-text&quot;&gt;.json&lt;/code&gt; is being assigned to the &lt;code class=&quot;language-text&quot;&gt;path&lt;/code&gt; variable to retrieve data from the JSON feed we created earlier. Once it retrieves the data, it then assigns the Javascript objects to the &lt;code class=&quot;language-text&quot;&gt;$scope&lt;/code&gt; so the view will have access to them.&lt;/p&gt;
&lt;p&gt;So we will change the view to loop through each of the &lt;code class=&quot;language-text&quot;&gt;player&lt;/code&gt; objects and show their stats in the view.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;&amp;lt;div ng-app=&amp;quot;playerStats&amp;quot;&amp;gt;
  &amp;lt;div ng-controller=&amp;quot;playerStatsController&amp;quot;&amp;gt;
    &amp;lt;h3&amp;gt;Player Statsheet&amp;lt;/h3&amp;gt;
    player &amp;lt;span ng-repeat=&amp;quot;column in columns&amp;quot;&amp;gt;{{column}} &amp;lt;/span&amp;gt;
    &amp;lt;div ng-repeat=&amp;quot;player in players&amp;quot;&amp;gt;
      {{player.email}} &amp;lt;span ng-repeat=&amp;quot;column in columns&amp;quot;&amp;gt;{{player.stats[column]}} &amp;lt;/span&amp;gt;
    &amp;lt;/div&amp;gt;
  &amp;lt;/div&amp;gt; 
&amp;lt;/div&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;First, using the &lt;code class=&quot;language-text&quot;&gt;ng-repeat&lt;/code&gt; attribute, it is looping over all the columns. Calling it columns is important, so it knows where to grab the variable from the scope. It will repeat each column and print it out to the document using the &lt;code class=&quot;language-text&quot;&gt;{{}}&lt;/code&gt; AngularJS tags. It then loops through each player and calls each column name in the stat and prints out the result using a nested loop. And that’s all there is to getting started with AngularJS on Rails. Stay tuned for a future update on some more advanced functionality.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[PostgreJSON]]></title><description><![CDATA[In PostgreSQL version 9.2, JSON storage functionality was introduced, so now it has the capability to be schema-less. From the outside…]]></description><link>https://www.charliemassry.com/posts/32-postgrejson/</link><guid isPermaLink="false">https://www.charliemassry.com/posts/32-postgrejson/</guid><pubDate>Mon, 15 Sep 2014 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;In PostgreSQL version 9.2, JSON storage functionality was introduced, so now it has the capability to be schema-less. From the outside looking in, JSON is just another type of column: text, integer, and now JSON. This creates one big advantage over using a database like MongoDB, you can have benefits of both databases. For example, if you want to allow the user to create his own spreadsheet with any number of columns, you might want to think about using a JSON column. To have this joined to each user though, you might want to use a foreign key to link it to the user, whereas using a fully schema-less database you would have to tack it on to each user, bloating the amount of data for each entry, or doing extra work to keep your database normalized. &lt;/p&gt;
&lt;p&gt;This is great, but how do you actually make use of this JSON feature? Well, in Rails 4, JSON support has been added. So you can simply generate a migration with a JSON type.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;class CreatePlayerStats &amp;lt; ActiveRecord::Migration
  def change
    create_table :player_stats do |t|
      t.belongs_to :team, index: true
      t.belongs_to :player, index: true
      t.json :stats

      t.timestamps
    end
  end
end&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If you wanted to allow users to create a statsheet, you can easily create it and link it to your existing database without having to switch between ORMs and still keeping a somewhat normalized database.  &lt;/p&gt;
&lt;p&gt;While taking this approach won’t lend itself to some of the other advantages of using a fully schema-less database, such as sharding, you can still use JSON storage to solve some crucial needs.&lt;/p&gt;
&lt;p&gt;PostgreSQL version 9.4 should be released any day now, which introduces JSONB, PostgreSQL’s answer to BSON, which should significantly improve JSON retrieval times but for now it’s still the go to solution for adding schema-less functionality to your schema-full database.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Send Email on Rails with ActionMailer]]></title><description><![CDATA[In Ruby on Rails, ActionMailer allows you to email users from your server with processed Ruby code, which can serve any number of uses…]]></description><link>https://www.charliemassry.com/posts/31-send-email-on-rails-with-actionmailer/</link><guid isPermaLink="false">https://www.charliemassry.com/posts/31-send-email-on-rails-with-actionmailer/</guid><pubDate>Wed, 03 Sep 2014 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;In Ruby on Rails, ActionMailer allows you to email users from your server with processed Ruby code, which can serve any number of uses. There is some configuration required on the back-end to actually set up ActionMailer to actually send mail, but you can fake it for development purposes. There are certain things to be aware of when using ActionMailer. Specifically, you must define instance methods in the mailer class and you must call the instance methods on the mailer class when attempting to send the mail.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;# app/mailers/user_mailer.rb
class UserMailer &amp;lt; ActionMailer::Base
  ...
  def welcome(user)
    @user = user
    mail to: @user.email,
      subject: &amp;quot;Welcome to My Fabulous Web App!&amp;quot;
  end
  ...
end

# app/controllers/users_controller.rb
class UsersController &amp;lt; ApplicationController
  ...
  def create
    user = sign_up(user_params)

    if user.valid?
      UserMailer.welcome(user).deliver
      redirect_to user
    else
      render :new
    end
  end
  ...
end

# app/views/user_mailer/welcome.html.erb
&amp;lt;h1&amp;gt;Welcome &amp;lt;%= @user.email %&amp;gt; to my &amp;lt;em&amp;gt;Fabulous&amp;lt;/em&amp;gt; Web App.&amp;lt;/h1&amp;gt;
&amp;lt;p&amp;gt;Visit &amp;lt;%= link_to &amp;quot;my site&amp;quot;, root_url %&amp;gt; as much as you can.&amp;lt;/p&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;There are quite a few things going on here, not the least of which is the &lt;code class=&quot;language-text&quot;&gt;UserMailer.welcome(user)&lt;/code&gt; call. In this particular snippet of code, the user is created and sent a welcoming email. The view is also noteworthy, as it is being called by the mailer, which functions as a sort of controller and renders its view. Another thing about the view is when you include links, you must use url helper instead of path helper as the user’s computer has no base reference of the path to the site, and so, you must configure Rails to know what the domain name it is being hosted at.  &lt;/p&gt;
&lt;p&gt;Testing emails can be difficult as you have to check that the mail got sent, and that the view contains the appropriate text. Rails provides a method for testing if mail was sent, which is &lt;code class=&quot;language-text&quot;&gt;ActionMailer::Base.deliveries&lt;/code&gt;. This returns an array of the different mail that was sent, but testing the views won’t be so easy. Luckily there’s a gem for that. The &lt;a href=&quot;https://github.com/bmabey/email-spec&quot;&gt;email_spec&lt;/a&gt; gem makes testing the email contents really simple, so you can write your expectations clearly about the mailer and not worry about your tests failing but your code actually working.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Nested Comments with Active Record]]></title><description><![CDATA[There are a couple of ways to let your users nest comments with Active Record. The main issue is the comments must start from somewhere…]]></description><link>https://www.charliemassry.com/posts/30-nested-comments-with-active-record/</link><guid isPermaLink="false">https://www.charliemassry.com/posts/30-nested-comments-with-active-record/</guid><pubDate>Fri, 29 Aug 2014 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;There are a couple of ways to let your users nest comments with Active Record. The main issue is the comments must start from somewhere, such as the first comment on a post. What would that database look like?&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;Column     | Type    | Modifiers
-----------------+-----------------------------+---------------------
id         | integer | not null
body       | text    | not null
user_id    | integer | not null
comment_id | integer | not null&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;But wait, &lt;code class=&quot;language-text&quot;&gt;comment_id&lt;/code&gt; can’t be null because the comment tree won’t be able to start. Lets try that again.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;Column     | Type    | Modifiers
-----------------+-----------------------------+---------------------
id         | integer | not null
body       | text    | not null
user_id    | integer | not null
comment_id | integer | &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;There. We’ll also need a post_id to reference the post it falls under, so lets do that right quick.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;Column     | Type    | Modifiers
-----------------+-----------------------------+---------------------
id         | integer | not null
body       | text    | not null
user_id    | integer | not null
comment_id | integer |
post_id    | integer | not null&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This’ll work, but there is a column that is guaranteed to be null for quite a few records as it will apply to all top-level comments. Surely Active Record has a better way to model this data.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/vZqytd1.png?1&quot; alt=&quot;Polymorphism&quot;&gt;&lt;/p&gt;
&lt;p&gt;A new challenger approaches.&lt;/p&gt;
&lt;p&gt;Polymorphism can allow the users to comment on multiple types of records and are very easily extendable, so you can start off with users being able to comment on posts or other comments, and then you can let them comment on any other database table by just changing a few lines of code around (just don’t forget to update your &lt;a href=&quot;http://en.wikipedia.org/wiki/Entity%E2%80%93relationship_model&quot;&gt;ERD&lt;/a&gt;).&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;Column           | Type                   | Modifiers
-----------------+-----------------------------+---------------------
id               | integer                | not null 
body             | text                   | not null
user_id          | integer                | not null
commentable_id   | integer                | not null
commentable_type | character varying(255) | not null&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now doesn’t that look a lot better. We don’t have any records that can be null, and the &lt;code class=&quot;language-text&quot;&gt;not null&lt;/code&gt; lines up a lot better. There is one downside to this method; when &lt;code class=&quot;language-text&quot;&gt;comment.comments&lt;/code&gt; is called, it fires off an extra query:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;SELECT &amp;quot;comments&amp;quot;.* FROM &amp;quot;comments&amp;quot;
  WHERE &amp;quot;comments&amp;quot;.&amp;quot;commentable_id&amp;quot; = $1
  AND &amp;quot;comments&amp;quot;.&amp;quot;commentable_type&amp;quot; = $2
  [[&amp;quot;commentable_id&amp;quot;, 1], [&amp;quot;commentable_type&amp;quot;, &amp;quot;Comment&amp;quot;]].&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This can be taxing on a server, but there are ways around it, such as adding a column to identify how far deep the nest is that defaults to 0 and only display a certain number of comments initially, but force the user to request more comments.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Testing Paperclip with RSpec, Capybara, and Factory Girl]]></title><description><![CDATA[Recently I’ve been working on a project that allows users to upload photos or videos with the twist of using the same form and determining…]]></description><link>https://www.charliemassry.com/posts/29-testing-paperclip-with-rspec-capybara-and-factory-girl/</link><guid isPermaLink="false">https://www.charliemassry.com/posts/29-testing-paperclip-with-rspec-capybara-and-factory-girl/</guid><pubDate>Fri, 22 Aug 2014 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Recently I’ve been working on a project that allows users to upload photos or videos with the twist of using the same form and determining file type on the server. I decided to go this route because of the positive user experience a form that tells you to add either media type gives you. Regardless, manually testing the form can be a pain because it must be a photo or a video and the form can’t be blank. This can involve a lot of work to test manually, between the clicking of the form, and clicking through to the path to the file. Enter feature specs.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;require &amp;quot;rails_helper&amp;quot;

feature &amp;quot;Media creation&amp;quot; do
  before(:each) do
    @team = create(:team)
    @user = create(:user, team: @team)
    @play = create(:play, team: @team)
    sign_in(@user)
    visit team_play_path(@team, @play)
    click_link &amp;quot;Add photo or video&amp;quot;
  end

  scenario &amp;quot;I can add a photo to plays&amp;quot; do
    medium = build(:photo_medium)

    attach_file &amp;quot;File&amp;quot;, &amp;quot;spec/asset_specs/photos/photo.jpg&amp;quot;
    fill_in &amp;quot;Caption&amp;quot;, with: medium.caption
    click_button &amp;quot;Add photo or video&amp;quot;

    expect(page).to have_selector(&amp;quot;img&amp;quot;)
  end

  scenario &amp;quot;I can add a video to plays&amp;quot; do
    medium = build(:video_medium)

    attach_file &amp;quot;File&amp;quot;, &amp;quot;spec/asset_specs/videos/video.MOV&amp;quot;
    fill_in &amp;quot;Caption&amp;quot;, with: medium.caption
    click_button &amp;quot;Add photo or video&amp;quot;

    expect(page).to have_selector(&amp;quot;video&amp;quot;)
  end

  scenario &amp;quot;I cannot submit a blank file field&amp;quot; do
    click_button &amp;quot;Add photo or video&amp;quot;

    expect(page).to have_selector(&amp;quot;form&amp;quot;)
    expect(page).to have_css(&amp;quot;#new_medium&amp;quot;)
  end

  scenario &amp;quot;I cannot submit an invalid file type&amp;quot; do
    attach_file &amp;quot;File&amp;quot;, &amp;quot;spec/asset_specs/fail/erd.pdf&amp;quot;
    fill_in &amp;quot;Caption&amp;quot;, with: &amp;quot;should not work&amp;quot;
    click_button &amp;quot;Add photo or video&amp;quot;

    expect(page).to have_selector(&amp;quot;form&amp;quot;)
    expect(page).to have_css(&amp;quot;#new_medium&amp;quot;)
  end
end  &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;What is happening here is before each test is run, a team, user, and play are all created and the user is then signed in and visits the &lt;code class=&quot;language-text&quot;&gt;plays#show&lt;/code&gt; page. Each test is then run, testing the 4 different possibilities of photo, video, wrong file type, and blank field. The main benefit of using &lt;a href=&quot;http://rspec.info/&quot;&gt;RSpec&lt;/a&gt; and &lt;a href=&quot;http://jnicklas.github.io/capybara/&quot;&gt;Capybara&lt;/a&gt; is that this reads almost like pure English. The RSpec sections are the end of each test that compares the expectations with the result and the Capybara sections are the beginning of each test that describes the interaction with a web browser. &lt;a href=&quot;https://github.com/thoughtbot/factory_girl&quot;&gt;Factory Girl&lt;/a&gt;, (the Ruby Gem not the 2006 movie starring Sienna Miller) creates the data in the test database before each test is run with data referenced from a separate file. Now you can make all the changes to the site that you want and you’ll know if they’ll work now, and in the future.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Multiple Images with PaperClip]]></title><description><![CDATA[For any given web application, you probably want your users to be able to embed pictures or other types of multimedia for a richer…]]></description><link>https://www.charliemassry.com/posts/28-multiple-images-with-paperclip/</link><guid isPermaLink="false">https://www.charliemassry.com/posts/28-multiple-images-with-paperclip/</guid><pubDate>Thu, 14 Aug 2014 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;For any given web application, you probably want your users to be able to embed pictures or other types of multimedia for a richer experience. This can be difficult to do as you &lt;strong&gt;NEVER&lt;/strong&gt; want to store files in the database (this is one of those rare absolute cases where there are no exceptions). Fortunately for you Ruby on Rails developers, there’s a gem for that. &lt;a href=&quot;https://www.github.com/thoughtbot/paperclip&quot;&gt;Paperclip&lt;/a&gt;, made by &lt;a href=&quot;http://thoughtbot.com&quot;&gt;thoughtbot&lt;/a&gt;, makes it easy to store files in your file system (or AWS if you want) and simply have the database store the path to the file. Another benefit of Paperclip is it integrates very nicely with &lt;a href=&quot;http://www.imagemagick.org/&quot;&gt;imagemagick&lt;/a&gt;, so you can process uploaded files with relative ease. If you aren’t sold on Paperclip yet, I should probably tell you that Paperclip is really simple to get up and running thanks to the robust documentation. While the documentation doesn’t go into detail about having a model that has many attachments, it can also be done with relative ease.&lt;/p&gt;
&lt;p&gt;If the main product of your website needs multiple photos, you can create a new table that just has the foreign key of your main product. For example, if the main product is &lt;code class=&quot;language-text&quot;&gt;Listing&lt;/code&gt;, and you want each &lt;code class=&quot;language-text&quot;&gt;Listing&lt;/code&gt; to have many photos, you can create a new table called &lt;code class=&quot;language-text&quot;&gt;photos&lt;/code&gt; and make sure it has a &lt;code class=&quot;language-text&quot;&gt;listing_id&lt;/code&gt; in your migration. In the listing model, you can add &lt;code class=&quot;language-text&quot;&gt;has_many :photos&lt;/code&gt; and you are ready to add attachments to photos with Paperclip, so simply read Paperclip documentation and you are good to go.&lt;/p&gt;
&lt;p&gt;One thing of note, the location that Paperclip stores files is in the &lt;code class=&quot;language-text&quot;&gt;public/system/:class/:attachment/:id_partition/:style&lt;/code&gt; folder, where the colons represent variables. You may want to add one of these subdirectories to your &lt;code class=&quot;language-text&quot;&gt;.gitignore&lt;/code&gt; file if you are using git as it will upload all your development files to your git server, such as Github.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[NullUser On Rails]]></title><description><![CDATA[The Null Object Pattern is a popular software pattern that can be very useful as it can get rid of many nil checks in Ruby. Throughout your…]]></description><link>https://www.charliemassry.com/posts/27-nulluser-on-rails/</link><guid isPermaLink="false">https://www.charliemassry.com/posts/27-nulluser-on-rails/</guid><pubDate>Mon, 11 Aug 2014 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;The Null Object Pattern is a popular software pattern that can be very useful as it can get rid of many nil checks in Ruby. Throughout your application, you may have many clauses like &lt;code class=&quot;language-text&quot;&gt;if current_user.admin?&lt;/code&gt;. If you require everyone who uses your application to log in, you won’t have any problems, but if you don’t, &lt;code class=&quot;language-text&quot;&gt;NoMethodError: undefined method &amp;#39;admin?&amp;#39; for nil:NilClass&lt;/code&gt;. So how would you get rid of this error? Well, you could simply wrap your &lt;code class=&quot;language-text&quot;&gt;if current_user.admin?&lt;/code&gt; in a &lt;code class=&quot;language-text&quot;&gt;if current_user&lt;/code&gt; check, but you have to do this everywhere &lt;code class=&quot;language-text&quot;&gt;if current_user.admin?&lt;/code&gt; is called. This can be annoying and time consuming to track down and fix. Luckily, the aforementioned Null Object Pattern can get rid of all these checks. Depending on which authentication system you used, you may have to tweak this method a little bit but in &lt;a href=&quot;https://www.github.com/halogenandtoast/monban&quot;&gt;Monban&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;class ApplicationController &amp;lt; ActionController::Base
  include Monban::ControllerHelpers

  ...

  def current_user
    super || NullUser.new
  end
end

class NullUser
  def admin?
    false
  end
end&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;What’s happening is in &lt;code class=&quot;language-text&quot;&gt;ApplicationController&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;current_user&lt;/code&gt; is being redefined to either the superclass of &lt;code class=&quot;language-text&quot;&gt;current_user&lt;/code&gt;, or a new instance of &lt;code class=&quot;language-text&quot;&gt;NullUser&lt;/code&gt;, if the superclass returns nil. The reason why this works is because in Ruby, when you include a module in your class, the chain of inheritance actually gets changed so it checks the module first, then the parent object, so feel free to call &lt;code class=&quot;language-text&quot;&gt;super&lt;/code&gt; as much as you want. Now, throughout the application, you won’t have to change anything, and you won’t get that ugly &lt;code class=&quot;language-text&quot;&gt;NoMethodError&lt;/code&gt; message.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[You're so vain, you probably think this URL is about you.]]></title><description><![CDATA[In Ruby on Rails, when you want to make a particular route that has a parameter with spaces in it, you would typically get something like…]]></description><link>https://www.charliemassry.com/posts/26-you-re-so-vain-you-probably-think-this-url-is-about-you/</link><guid isPermaLink="false">https://www.charliemassry.com/posts/26-you-re-so-vain-you-probably-think-this-url-is-about-you/</guid><pubDate>Fri, 08 Aug 2014 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;In Ruby on Rails, when you want to make a particular route that has a parameter with spaces in it, you would typically get something like /regions/new%20york for a region named new york. This however looks terrible and your users would be very upset about typing this out. Fortunately, there is a way to remedy this by creating a URL slug.&lt;/p&gt;
&lt;p&gt;First add a column called slug to the table of the resource you want to fix.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;rails generate migration AddSlugToRegion slug&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This creates the migration that you MUST edit before running &lt;code class=&quot;language-text&quot;&gt;rake db:migrate&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The preferred way is to copy and parameterize the name column of each entry after the column is created.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;class AddSlugToRegion &amp;lt; ActiveRecord::Migration
  class Region &amp;lt; ActiveRecord::Base
  end

  def change
    add_column :regions, :slug, :string, index: true

    Region.all.each do |region|
      region.slug = region.name.parameterize
      region.save
    end
  end
end&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You don’t have to open up the Region model as you are just adding to a new column and you shouldn’t have any validations affecting it, but it can be a good habit to use. Then, you are adding a column called slug which is a string and is indexed. Lastly, you are iterating through each row and changing the column to the parameterized name.&lt;/p&gt;
&lt;p&gt;You must also edit the corresponding model.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;class Region &amp;lt; ActiveRecord::Base
  validates :name, uniqueness: true, presence: true
  after_create :generate_slug
  before_update :assign_slug

  def to_param
    slug
  end

  private

  def assign_slug
    self.slug = to_slug
  end

  def generate_slug
    update_attributes(slug: to_slug)
  end

  def to_slug
    name.parameterize
  end
end&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This seems like a lot to add, but what is happening, during record creation, is it is updating the slug after the record is created. For updating, it must be before the record is saved because it would already have a url assigned to it.&lt;/p&gt;
&lt;p&gt;The controller must also be edited.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;class RegionsController &amp;lt; ApplicationController
  ...
  def show
    @region = Region.find_by(slug: params[:id])
  end
  ...
end&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here it is finding the region by its slug value. So the slug value &lt;code class=&quot;language-text&quot;&gt;new-york&lt;/code&gt; would be equal to the record that has &lt;code class=&quot;language-text&quot;&gt;new york&lt;/code&gt; in the name field. Now you know how to combine &lt;a href=&quot;http://www.charliemassry.com/posts/18-to_param-the-best-method-ever&quot;&gt;this post&lt;/a&gt; to use the &lt;code class=&quot;language-text&quot;&gt;to_param&lt;/code&gt; method with the current post to really generate nice routes with any number of named records. I should note, make sure you validate that the name would not equal a path you would use, like &lt;code class=&quot;language-text&quot;&gt;new&lt;/code&gt; or &lt;code class=&quot;language-text&quot;&gt;edit&lt;/code&gt;. Look for more dynamic routes in a future post.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Ruby Enumerable, Part 2]]></title><description><![CDATA[The Enumerable module can be used for all of your Ruby classes as long as they implement their own each method. A good example of this are…]]></description><link>https://www.charliemassry.com/posts/25-ruby-enumerable-part-2/</link><guid isPermaLink="false">https://www.charliemassry.com/posts/25-ruby-enumerable-part-2/</guid><pubDate>Wed, 06 Aug 2014 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;The Enumerable module can be used for all of your Ruby classes as long as they implement their own each method. A good example of this are the Active Record Collection Objects. The Rails team has each defined in ActiveRecord.&lt;/p&gt;
&lt;h3&gt;each&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;#each&lt;/code&gt; can be implemented on any object and what it does is it iterates through a collection and performs the block on each element of the collection.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;User.all.each { |user| puts user.email }
charlesdmassry@gmail.com
wombat@example.com&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;For every method in Enumerable, it turns to &lt;code class=&quot;language-text&quot;&gt;#each&lt;/code&gt; for every method and uses each to perform the method.&lt;/p&gt;
&lt;h3&gt;each_cons&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;#each_cons&lt;/code&gt; returns a group of arrays of consecutive indices with the length specified by the number in the parameter. It then performs the block operation on each array.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;[1, 2, 3, 4].each_cons(2) { |a| p a }
[1, 2]
[2, 3]
[3, 4]

{ name: 4, age: 5, ssn: 6 }.each_cons(2) { |a| p a }
[[:name, 4], [:age, 5]]
[[:age, 5], [:ssn, 6]]&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;One collection is turned into an array that contains the number of objects in an argument and performs the operation of the block on each array.&lt;/p&gt;
&lt;h3&gt;each_entry&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;#each_entry&lt;/code&gt; you can just use &lt;code class=&quot;language-text&quot;&gt;#each&lt;/code&gt; for similar results.&lt;/p&gt;
&lt;h3&gt;each_slice&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;#each_slice&lt;/code&gt; takes an argument and similar to &lt;code class=&quot;language-text&quot;&gt;#each_cons&lt;/code&gt;, performs an operation on a new sub-array. This method however, doesn’t make consecutive arrays but makes slices of arrays.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;[1, 2, 3, 4].each_cons(2) { |a| p a }
[1, 2]
[3, 4]

{ name: 4, age: 5, ssn: 6 }.each_cons(2) { |a| p a }
[[:name, 4], [:age, 5]]
[[:ssn, 6]]&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here you can see it can return an uneven output for mismatched elements.&lt;/p&gt;
&lt;h3&gt;each&lt;em&gt;with&lt;/em&gt;index&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;#each_with_index&lt;/code&gt; performs each on the collection and also keeps track of the current index.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;user = []
%w(name age ssn).each_with_index do |element, index|
    user &amp;lt;&amp;lt; element * index
end
[&amp;quot;&amp;quot;, &amp;quot;age&amp;quot;, &amp;quot;ssnssn&amp;quot;]&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It can be used for a lot more complicated operations that this and will make your code a lot nicer that this.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;user = []
count = 0
%w(name age ssn).each do |element|
    user &amp;lt;&amp;lt; element
    count += 1
end&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;each&lt;em&gt;with&lt;/em&gt;object&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;#each_with_object&lt;/code&gt; works by taking a block and a parameter and performing the block operation on the current element and the parameter.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;(1..3).each_with_object([]) { |a, i| p a, i }
1
[]
2
[]
3
[]&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This method can be used almost identically to &lt;code class=&quot;language-text&quot;&gt;#each&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;numbers = [1,2,6]
(1..3).each_with_object(numbers) { |a, i| i &amp;lt;&amp;lt; a } #=&amp;gt; [1, 2, 6, 1, 2, 3]&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The second element in the block argument here is the parameter.&lt;/p&gt;
&lt;h3&gt;entries&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;#entries&lt;/code&gt; can be used as an alias for &lt;code class=&quot;language-text&quot;&gt;#to_a&lt;/code&gt;. In some instances, it reads a little bit better than &lt;code class=&quot;language-text&quot;&gt;#to_a&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;find&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;#find&lt;/code&gt; returns the first entry where the block conditions are true. It is aliased to detect.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;[1,2,5,7,6].find { |a| a &amp;gt; 5 } #=&amp;gt; 7&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As you can see, &lt;code class=&quot;language-text&quot;&gt;#find&lt;/code&gt; returns an a number for the first one it finds, for this example it is 7 and not 6 because of the ordered array, so it breaks out. Generally, it would be a good idea to sort this array first if you are using the find method.&lt;/p&gt;
&lt;h3&gt;find_all&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;#find_all&lt;/code&gt; is similar to &lt;code class=&quot;language-text&quot;&gt;#find&lt;/code&gt; except it returns an array where the given conditions are true.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;[1,2,5,7,6].find_all { |a| a &amp;gt; 5 } #=&amp;gt; [7, 6]&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;find_index&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;#find_index&lt;/code&gt; returns the index of &lt;code class=&quot;language-text&quot;&gt;#find&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;[1,2,5,7,6].find_index { |a| a &amp;gt; 5 } #=&amp;gt; 3&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here it would find the number 7 and see that it is at index 3 and return that number. Stay tuned for more.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Keep Your Queries DRY with Eager Loading]]></title><description><![CDATA[The N + 1 query problem can be very tricky to deal with or even find because you won’t be typically dealing with a lot of data in…]]></description><link>https://www.charliemassry.com/posts/24-keep-your-queries-dry-with-eager-loading/</link><guid isPermaLink="false">https://www.charliemassry.com/posts/24-keep-your-queries-dry-with-eager-loading/</guid><pubDate>Fri, 01 Aug 2014 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;The N + 1 query problem can be very tricky to deal with or even find because you won’t be typically dealing with a lot of data in development mode. Luckily, there’s a gem for that. The &lt;a href=&quot;https://github.com/flyerhzm/bullet&quot;&gt;Bullet&lt;/a&gt; gem solves that problem. It is easy to install and can alert you in any number of ways if you have an N + 1 query problem and gives you hints on how to fix them. The problem mostly occurs with Active Record Associations. For example, if you want to select all of the shouts that belong to their respective users, it would have to select all of the shouts and then all of the users, instead of just every association.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/6WHcHdo.jpg&quot; alt=&quot;Not eagerly loading&quot;&gt;&lt;/p&gt;
&lt;p&gt;In this request, every shout is being loaded independently because it must match up with it’s respective user. The way of getting around this is to use the eager loading technique. Luckily, Ruby on Rails makes this easy with the &lt;a href=&quot;http://api.rubyonrails.org/classes/ActiveRecord/QueryMethods.html#method-i-includes&quot;&gt;includes&lt;/a&gt; method&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;Shout.where(user_id: [id] + followed_user_ids).order(created_at: :desc).includes(:content, :user)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This can be used to create a query for a page that displayed the current user’s shouts and the shouts of the users she is following, in chronological order and store the content of the shout and who shouted it in memory so it doesn’t have to keep making queries. This changes the above to this.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/b4GO8Wr.jpg&quot; alt=&quot;Eagerly loading&quot;&gt;&lt;/p&gt;
&lt;p&gt;This is so much quicker, your queries won’t repeat themselves, and it just looks a lot cleaner, so use eager loading whenever you can.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Ruby Enumerable, Part 1]]></title><description><![CDATA[The Enumerable module in Ruby can be used for arrays and hashes and can save you from writing complex, nested if statements and loops. all…]]></description><link>https://www.charliemassry.com/posts/23-ruby-enumerable-part-1/</link><guid isPermaLink="false">https://www.charliemassry.com/posts/23-ruby-enumerable-part-1/</guid><pubDate>Thu, 31 Jul 2014 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;The Enumerable module in Ruby can be used for arrays and hashes and can save you from writing complex, nested if statements and loops.&lt;/p&gt;
&lt;h3&gt;all?&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;#all?&lt;/code&gt; takes a collection and returns true if all objects in the collection return true in the block. The example that the RubyDocs give is:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;%w(ant bear cat).all? { |word| word.length &amp;gt;= 3 } # =&amp;gt; true
%w(ant bear cat).all? { |word| word.length &amp;gt;= 4 } # =&amp;gt; false&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This can be really useful if you are looking into returning a boolean based on all the elements matching a conditional.&lt;/p&gt;
&lt;h3&gt;any?&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;#any?&lt;/code&gt;, similar to &lt;code class=&quot;language-text&quot;&gt;#all?&lt;/code&gt;, also takes a collection and returns a boolean. This time it just returns true if one of the elements matches a conditional.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;%w(ant bear cat).any? { |word| word.length &amp;gt;= 3 } # =&amp;gt; true
%w(ant bear cat).any? { |word| word.length &amp;gt;= 4 } # =&amp;gt; true&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;chunk&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;#chunk&lt;/code&gt; method returns an Enumerable object that creates sub-arrays and injects the result of the chunk block into each sub-array.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;[1, 2, 4, 3, 5, 1, 6].chunk { |number| number + 1 } # =&amp;gt; #&amp;lt;Enumerator: #&amp;lt;Enumerator::Generator:0x007ffac426adb0&amp;gt;:each&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This does not seem super helpful nor did it return what I said it would but it is still an Enumerable object so you can call any Enumerable method on it, like:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;[1, 2, 4, 3, 5, 1, 6].chunk { |number| number + 1 }.map { |n| n } # =&amp;gt; [[2, [1]], [3, [2]], [5, [4]], [4, [3]], [6, [5]], [2, [1]], [7, [6]]]&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As you can see, this creates a new array with each value that was created in chunk inserted into the new array before the original array value which was turned into a sub-array. In this example, the original element has 1 added to it and that value gets inserted into a new sub-array with the original element.&lt;/p&gt;
&lt;h3&gt;collect&lt;/h3&gt;
&lt;p&gt;Just use map&lt;/p&gt;
&lt;h3&gt;count&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;#count&lt;/code&gt; method is very useful and very simple. All it does is count the number of elements in the array.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;[1, 2, 4, 6].count # =&amp;gt; 4&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;cycle&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;#cycle&lt;/code&gt; method is like each but it never stops and continuously loops through the array executes the block and repeats after a full go around, use with caution.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;[1, 2, 4, 6].cycle { |x| print x } # =&amp;gt; 124612461246124612461246...&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;There is one caveat. You can optionally pass an argument to tell it how many times to loop through which can prove to be very useful.  &lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;[1, 2, 4, 6].cycle(2) { |x| print x } # =&amp;gt; 12461246&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;detect&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;#detect&lt;/code&gt; method is similar to &lt;code class=&quot;language-text&quot;&gt;#any?&lt;/code&gt; except instead of returning a boolean, it returns the value where &lt;code class=&quot;language-text&quot;&gt;#any?&lt;/code&gt; would return true. Very handy.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;%w(ant bear cat).detect { |word| word.length &amp;gt;= 4 } # =&amp;gt; &amp;quot;bear&amp;quot;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If it doesn’t detect any of the elements, it simply outputs &lt;code class=&quot;language-text&quot;&gt;nil&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;drop&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;#drop&lt;/code&gt; method returns the array after getting rid of the number of elements in the beginning passed into it as an argument.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;[1, 2, 3, 4, 5, 6].drop(2) # =&amp;gt; [3, 4, 5, 6]&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This can be useful if you know you don’t need the first couple or so of elements in the array.&lt;/p&gt;
&lt;h3&gt;drop_while&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;#drop_while&lt;/code&gt; method is similar to the detect method, except it returns an array of the objects that were not dropped, and ends when it reaches the first nil or false value of the block.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;%w(ant bear cat).drop_while { |word| word.length &amp;gt;= 4 } # =&amp;gt; [&amp;quot;bear&amp;quot;, &amp;quot;cat&amp;quot;]&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[Javascript on Rails]]></title><description><![CDATA[The Javascript syntax is not nearly as fun as Ruby’s but you must use it if you want to do anything dynamic on the client-side. Fortunately…]]></description><link>https://www.charliemassry.com/posts/22-javascript-on-rails/</link><guid isPermaLink="false">https://www.charliemassry.com/posts/22-javascript-on-rails/</guid><pubDate>Thu, 24 Jul 2014 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;The Javascript syntax is not nearly as fun as Ruby’s but you must use it if you want to do anything dynamic on the client-side. Fortunately, Ruby on Rails comes with some built in Javascript helpers, such as easy AJAX support.&lt;/p&gt;
&lt;p&gt;AJAX, Asynchronous Javascript and XML, is a way to send and receive data from the server without refreshing the page. This can be very useful depending on what the client wants to do, such as post a comment to the bottom of the page which would normally require a page refresh, sending you back to the top. Programming this can be quite difficult but as luck would have it, Ruby on Rails comes prepackaged with jQuery, the premier Javascript library.&lt;/p&gt;
&lt;p&gt;To easily AJAXify your web app with Rails, first you must add &lt;code class=&quot;language-text&quot;&gt;remote:
true&lt;/code&gt; to your form tag, then you must make your controller respond to JSON and render a Javascript/ERB view. It sounds like a few steps but there is only 4 lines of code that need to be added to get it working.&lt;/p&gt;
&lt;p&gt;If you want to write more complex web apps like one that dynamically renders an edit form based on user click position, you must write Javascript and use the jQuery library yourself as opposed to just having Rails use it in the background. You need to create a &lt;code class=&quot;language-text&quot;&gt;PATCH&lt;/code&gt; request using the &lt;code class=&quot;language-text&quot;&gt;$.ajax(...);&lt;/code&gt; method. You would also have to render the form using jQuery and you can get rid of the form with the AJAX success callback.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Polymorphic Controllers???]]></title><description><![CDATA[That’s right, polymorphic controllers in Ruby on Rails. You made your model polymorphic, but now you would have to make a controller for…]]></description><link>https://www.charliemassry.com/posts/21-polymorphic-controllers/</link><guid isPermaLink="false">https://www.charliemassry.com/posts/21-polymorphic-controllers/</guid><pubDate>Mon, 21 Jul 2014 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;That’s right, polymorphic controllers in Ruby on Rails. You made your model polymorphic, but now you would have to make a controller for each use case of the association. But what if I told you that you can simply make your one controller function for each of the different associations. I say simply, but it can actually become quite complex as you have to get the correct model depending on how the URL looks and turn that string into a constant and then find the correct record.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;class HatesController &amp;lt; ApplicationController
  def create
    this_route = request.fullpath
    this_route.sub!(/\\/comments.*|\\/hate/, &amp;#39;&amp;#39;)
    Hate.create(user: current_user, hateable: hateable)
    redirect_to this_route
  end
  ...
  private

  def hateable
    route_to_hate = request.fullpath
    klass = [&amp;quot;comments&amp;quot;, &amp;quot;images&amp;quot;, &amp;quot;galleries&amp;quot;, &amp;quot;groups&amp;quot;, &amp;quot;users&amp;quot;].detect do |k|
      route_to_hate.include?(k)
    end
    klass.singularize.classify.constantize.find(params[:id])
  end
end&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;There is a lot going on in this controller. First, in the hateable method, it gets the URL and detects which model the user is hating, and returns just the first one it finds. For nested resources you must put the deepest one at the front. Once it gets the correct string, it then must turn it into the model by calling classify on the string, which makes the string into a camelcased string. Next up is constantize, which turns that camelcased string into an actual model call. Then it just finds by the id in the params hash.&lt;/p&gt;
&lt;p&gt;The next issue is the create method, which gets the path and scrubs it to something that exists as an actual &lt;code class=&quot;language-text&quot;&gt;GET&lt;/code&gt; route, using a fairly complex regular expression. What this regular expression &lt;code class=&quot;language-text&quot;&gt;/\\/comments.*|\\/hate/&lt;/code&gt; is doing is it is getting the comments path if the word comments is in the path, then it gets the slash and the digits, but it will always get the word hate for the purposes of this controller action. This is necessary to know where to redirect the user to. It then creates the hate by using &lt;code class=&quot;language-text&quot;&gt;@hateable&lt;/code&gt; from earlier, and redirects to the afformentioned route.&lt;/p&gt;
&lt;p&gt;Depending on your type of path and resource you may have to change the way you get the model from the route but it can be done with much less code then making a seperate controller for each polymorphic relationship.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Polymorphism, Very Difficult? Or Suprisingly Simple?]]></title><description><![CDATA[I have heard of a polymorphic relationship before, and it was difficult to wrap my head around but it is actually very simple, as it has…]]></description><link>https://www.charliemassry.com/posts/20-polymorphism-very-difficult-or-suprisingly-simple/</link><guid isPermaLink="false">https://www.charliemassry.com/posts/20-polymorphism-very-difficult-or-suprisingly-simple/</guid><pubDate>Fri, 18 Jul 2014 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;I have heard of a polymorphic relationship before, and it was difficult to wrap my head around but it is actually very simple, as it has similarities with inheritance in object oriented programming and is an instance of don’t repeat yourself. The main problem that polymorphism solves is don’t repeat yourself.&lt;/p&gt;
&lt;p&gt;Suppose an Entity Relationship Diagram has many different models, but have one common model relationship, an image, a gallery and a group all have likes. The easiest way to express this would be to make three new models of likes that all correspond to their respective likable content. However, this would only be easiest if you don’t know how to express a polymorphic relationship. The true easiest way would be to have one like model that corresponds to many different likable models.  &lt;/p&gt;
&lt;p&gt;Alright, so how do you do this in Ruby on Rails? Simple, you make a like table that has a user_id that corresponds to the user who did the liking, the content_type that is the same name as the corresponding model, and the content_id that corresponds to the primary key of the corresponding table. All you need to do next is add the appropriate ActiveRecord methods to your models and you are good to go.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[User has_many selfies]]></title><description><![CDATA[When creating a self referential join through another table, you must think of each entry as a new row even if two of the columns have the…]]></description><link>https://www.charliemassry.com/posts/19-user-has_many-selfies/</link><guid isPermaLink="false">https://www.charliemassry.com/posts/19-user-has_many-selfies/</guid><pubDate>Wed, 16 Jul 2014 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;When creating a self referential join through another table, you must think of each entry as a new row even if two of the columns have the same number, but in reverse position. For example, if you are creating an app where a user is a follower of other users that may or may not follow him, you must have two rows, one where the follower is person A and the following is person B, and the second where the follower is person B and the following is person A.&lt;/p&gt;
&lt;p&gt;This can be problematic to think of in terms of what each column should be called, but you can find this out through trial and error in Ruby on Rails by listing the methods that your model responds to, and sorting by that alphabetically on each line through the Rails console.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;class User &amp;lt; ActiveRecord::Base
  ...
  has_many :followed_user_relationships,
    class_name: &amp;quot;FollowingRelationship&amp;quot;,
    foreign_key: :follower_id
    has_many :followed_users,
    through: :followed_user_relationships
  ...
end&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This code would give you the ability to look at the users that are following you by calling the method &lt;code class=&quot;language-text&quot;&gt;followed_users&lt;/code&gt;. You can then manipulate that data by linking to their page or displaying some type of information about them.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[to_param, the Best Method Ever]]></title><description><![CDATA[If you want to create vanity URLs, and who doesn’t, then to_param is the method for you. In fact it is my personal favorite method in Ruby…]]></description><link>https://www.charliemassry.com/posts/18-to_param-the-best-method-ever/</link><guid isPermaLink="false">https://www.charliemassry.com/posts/18-to_param-the-best-method-ever/</guid><pubDate>Tue, 15 Jul 2014 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;If you want to create vanity URLs, and who doesn’t, then to_param is the method for you. In fact it is my personal favorite method in Ruby on Rails, narrowly edging out time_ago_in_words.&lt;/p&gt;
&lt;p&gt;On Twitter, the link for a users profile  would look something like &lt;a href=&quot;https://twitter.com/charlesmassry&quot;&gt;https://twitter.com/charlesmassry&lt;/a&gt; which would call  the to_param method on the user model, if in fact Twitter used Rails. There is  one difficulty in this, users can’t have their usernames as certain reserved words,  like sign-out, or search. This can be remedied in two ways, one, you can check validation on the  usernames, or two, you can make it a part of the user resources,  /users/charlesmassry. The second way is much easier because you would  have to check validation on every reserved route if you chose the first one, however, I think the first way looks a lot cleaner.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;app/models/user.rb

class User &amp;lt; ActiveRecord::Base
  ...
  validates_exclusion_of :username, in: %w{ sign-out search }
  ...
end&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As for the to_param method itself, you would just redefine it in your model.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;app/models/user.rb

class User &amp;lt; ActiveRecord::Base
  ...
  def to_param
    username
  end
  ...
end&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;By default, it is just an instance method that essentially returns a string  with the id of that resource to give you routes like &lt;a href=&quot;https://twitter.com/1&quot;&gt;https://twitter.com/1&lt;/a&gt; as  opposed to the username at the end.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[What's the Point of TDD]]></title><description><![CDATA[At Metis, we haven’t been using test driven development to help develop our Ruby on Rails apps. Instead of learning TDD, we’ve been using…]]></description><link>https://www.charliemassry.com/posts/17-what-s-the-point-of-tdd/</link><guid isPermaLink="false">https://www.charliemassry.com/posts/17-what-s-the-point-of-tdd/</guid><pubDate>Mon, 14 Jul 2014 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;At Metis, we haven’t been using test driven development to help develop our Ruby on Rails apps. Instead of learning TDD, we’ve been using &lt;a href=&quot;http://www.halogenandtoast.com/error-driven-development&quot;&gt;Error Driven Development&lt;/a&gt;, the baby brother of test driven development. Error driven development is the method of development where you write code till you don’t get an error, and you know which errors you are looking for. There is one main problem with this, in Ruby on Rails, the procedure would be: you make a link, make a route, make a controller, make an action, make a template, and then there are no errors, but you have a blank page, so you would have to know to display the Active Record instance on the page.&lt;/p&gt;
&lt;p&gt;With test driven development, this is not the case. You can write tests that simulate all of this behavior that a user would have. An added benefit of this is if you want to upgrade a Gem, you can run your tests and see if they pass, else you can just rollback to the previous version of the Gem.&lt;/p&gt;
&lt;p&gt;There are benefits to error driven development as opposed to test driven development, one of which is, it is much more welcoming to newcomers because it is much easier to set up, especially if you want to try and set up your tests to run automatically.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[How to Work With Le Gems in Ruby on Rails]]></title><description><![CDATA[In Ruby, there is a huge community of packages, a lot of which interact with Ruby on Rails. These are called Gems, and they are hosted at…]]></description><link>https://www.charliemassry.com/posts/16-how-to-work-with-le-gems-in-ruby-on-rails/</link><guid isPermaLink="false">https://www.charliemassry.com/posts/16-how-to-work-with-le-gems-in-ruby-on-rails/</guid><pubDate>Fri, 11 Jul 2014 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;In Ruby, there is a huge community of packages, a lot of which interact with Ruby on Rails. These are called Gems, and they are hosted at &lt;a href=&quot;http://rubygems.org&quot;&gt;RubyGems&lt;/a&gt;. Being a Turing Complete language, there are Gems for just about any problem you could have in Ruby, and almost 80,000 of them are hosted at RubyGems. One of the most underrated aspects of Gems is, the documentation. While some Gems such as &lt;a href=&quot;https://github.com/macournoyer/thin&quot;&gt;Thin&lt;/a&gt; are pretty self explanatory and easy to get working, others require a lot more work to use the API and understand the documentation. Some big companies, such as &lt;a href=&quot;http://thoughtbot.com&quot;&gt;thoughtbot&lt;/a&gt; provide very extensive documentation with their Gems, like &lt;a href=&quot;https://github.com/thoughtbot/clearance&quot;&gt;Clearance&lt;/a&gt; or &lt;a href=&quot;https://github.com/thoughtbot/paperclip&quot;&gt;Paperclip&lt;/a&gt;. For others however, you must read the source code and experiment with it to fully understand how it works. Happy Wiki Diving.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Three Tables Are Better Than Two]]></title><description><![CDATA[In SQL, you can’t have two tables that have each other’s foreign key, you must use a third table to hold the foreign keys of the…]]></description><link>https://www.charliemassry.com/posts/15-three-tables-are-better-than-two/</link><guid isPermaLink="false">https://www.charliemassry.com/posts/15-three-tables-are-better-than-two/</guid><pubDate>Thu, 10 Jul 2014 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;In SQL, you can’t have two tables that have each other’s foreign key, you must use a third table to hold the foreign keys of the relationship. There are two ways to do this when using Ruby on Rails.&lt;/p&gt;
&lt;p&gt;The first and most common way is to use the &lt;code class=&quot;language-text&quot;&gt;has_many :through&lt;/code&gt; Active Record Association. You must create the third table and create an &lt;code class=&quot;language-text&quot;&gt;ActiveRecord::Base&lt;/code&gt; model. This is beneficial because you can add to it later if you need to.&lt;/p&gt;
&lt;p&gt;The other, less popular way is to use the &lt;code class=&quot;language-text&quot;&gt;has_and_belongs_to_many&lt;/code&gt; Active Record Association. This requires just a database migration and not a new model. The main problem with this is you cannot customize the association with any business logic, such as validations and callbacks, so it doesn’t lend itself to future-proofing code. Either method however, will allow you to call a getter method on the other tables objects it is associated with. &lt;/p&gt;</content:encoded></item><item><title><![CDATA[Light Authentication With Monban]]></title><description><![CDATA[If you want to have user authentication on Rails, but don’t require something as hard hitting as Devise or Clearance, Monban is the way to…]]></description><link>https://www.charliemassry.com/posts/14-light-authentication-with-monban/</link><guid isPermaLink="false">https://www.charliemassry.com/posts/14-light-authentication-with-monban/</guid><pubDate>Tue, 08 Jul 2014 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;If you want to have user authentication on Rails, but don’t require something as hard hitting as Devise or Clearance, Monban is the way to go. &lt;a href=&quot;https://www.github.com/halogenandtoast/Monban&quot;&gt;Monban&lt;/a&gt;, like Clearance, is also developed by the folks over at &lt;a href=&quot;http://thoughtbot.com&quot;&gt;thoughtbot&lt;/a&gt;. This gem provides some nifty, intuitive DSL.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;authenticate_session(session_params)`  
sign_in(user)
signed_in?
sign_out
sign_up
current_user&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;These methods all do what you would think that they do, except maybe &lt;code class=&quot;language-text&quot;&gt;authenticate_session&lt;/code&gt;, which fetches the necessary keys from strong params during assignment to the user, &lt;code class=&quot;language-text&quot;&gt;user = authenticate_session(session_params)&lt;/code&gt;. You can then call &lt;code class=&quot;language-text&quot;&gt;sign_in&lt;/code&gt; on the result of this, to sign in the user. Monban also provides some neat callback methods, such as &lt;code class=&quot;language-text&quot;&gt;require_login&lt;/code&gt;, which is useful if you want to force user authentication before a particular action.&lt;/p&gt;
&lt;p&gt;Unlike Devise, it doesn’t provide you with specific Monban views or create large migration file for you. However, it still uses Warden and BCrypt for security, so while it is lightweight, it is by no means underpowered.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Cookie Monster Would Not Be Impressed By These Cookies]]></title><description><![CDATA[In every Internet Browser, there are what are called cookies. These are a way of overriding the fact that HTTP is a stateless protocol…]]></description><link>https://www.charliemassry.com/posts/13-cookie-monster-would-not-be-impressed-by-these-cookies/</link><guid isPermaLink="false">https://www.charliemassry.com/posts/13-cookie-monster-would-not-be-impressed-by-these-cookies/</guid><pubDate>Mon, 07 Jul 2014 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;In every Internet Browser, there are what are called cookies. These are a way of overriding the fact that HTTP is a stateless protocol, meaning that each HTTP request stands on its own. Without cookies, you would have to manually type in your login information with every HTTP request, which would make the Internet a lot less fun. Cookies store this information in your browser so you don’t have to and send this information with every request.  &lt;/p&gt;
&lt;p&gt;Although this seems pretty simple, the web developer must include special code to tell your browser what to store as cookies. For example, in Ruby on Rails, a new &lt;code class=&quot;language-text&quot;&gt;SessionsController&lt;/code&gt; must be created to manage user sessions, and instead of creating a &lt;code class=&quot;language-text&quot;&gt;Session&lt;/code&gt; model to store information in the database, the information must be stored in the user’s browser as an encrypted string. this information must also be accessed when the user signs out.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;class SessionsController &amp;lt; ApplicationController
  def new
  end

  def create
    user = User.find_by(email: params[:session][:email])
    cookies.signed[:user_id] = user.id
    redirect_to galleries_path
  end

    def destroy
      cookies.delete(:user_id)
      redirect_to galleries_path
    end
  end&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;What’s happening here is the new method just directs the user to the sign in form. Then, once the user signs in, it finds the user by the email address, which is stored in the session hash inside of the params hash as an encrypted string. This is then checked to see if the &lt;code class=&quot;language-text&quot;&gt;user_id&lt;/code&gt; is the same as the decrypted string. When signing out, &lt;code class=&quot;language-text&quot;&gt;destroy&lt;/code&gt; is called and the &lt;code class=&quot;language-text&quot;&gt;user_id&lt;/code&gt; field in the cookies is deleted.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;class ApplicationController &amp;lt; ActionController::Base
  def current_user
    @user ||= User.find_by(id: cookies.signed[:user_id])
  end
  helper_method :current_user

  def signed_in?
    current_user
  end
  helper_method :signed_in?
end&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here we have the application controller, which uses the cookies in the browser to tell the views which user is currently signed in, and if a user is signed in. It is helpful to have these two methods even though they do the same thing because you can use &lt;code class=&quot;language-text&quot;&gt;current_user&lt;/code&gt; to display the name of the current user, while you can use &lt;code class=&quot;language-text&quot;&gt;signed_in?&lt;/code&gt; for conditionals in &lt;code class=&quot;language-text&quot;&gt;.erb&lt;/code&gt;. Being the &lt;code class=&quot;language-text&quot;&gt;ApplicationController&lt;/code&gt;, it can be called from any view application wide by including &lt;code class=&quot;language-text&quot;&gt;helper_method&lt;/code&gt;, this leads to keeping your code DRY.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Yo Dawg, I Heard You Like Partials So I Put a Partial In Your Partial So You Can Refactor While You Refactor.]]></title><description><![CDATA[One of the founding principles of Ruby on Rails is “Don’t Repeat Yourself”, or DRY. There are many reasons to follow this principle, not the…]]></description><link>https://www.charliemassry.com/posts/12-yo-dawg-i-heard-you-like-partials-so-i-put-a-partial-in-your-partial-so-you-can-refactor-while-you-refactor/</link><guid isPermaLink="false">https://www.charliemassry.com/posts/12-yo-dawg-i-heard-you-like-partials-so-i-put-a-partial-in-your-partial-so-you-can-refactor-while-you-refactor/</guid><pubDate>Thu, 03 Jul 2014 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;One of the founding principles of Ruby on Rails is “Don’t Repeat Yourself”, or DRY. There are many reasons to follow this principle, not the least of which is if you change one instance of repetition, you change the other. One way to insure this in your views is to use partials.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;&amp;lt;%= render form %&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This would render a file in the current directory called ”_form.html.erb”. This is useful because you can use the same view for your new form as well as your edit form. But wait, there’s more. Partials aren’t just limited to forms, you can refactor anything, just have it’s name start with an underscore and call it with the render method in your view. You can then render another partial in your partial so you can have a partial inside of your partial.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;&amp;lt;%= render &amp;quot;errors&amp;quot;, object: form.object %&amp;gt;
&amp;lt;div&amp;gt;
  &amp;lt;%= form.label :name %&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;      &amp;#x3C;%= form.text_field :name %&gt;
&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;This would first look in the current directory for a ”_errors.html.erb” file, and then it would look in the “app/views/application” directory. Once found, it will render that form’s errors with the failed validations. So that’s three layers deep for those of you keeping score at home.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;&amp;lt;% if object.errors.any? %&amp;gt;
  &amp;lt;p&amp;gt;Could not save:&amp;lt;/p&amp;gt;
  &amp;lt;% object.errors.full_messages.each do |error| %&amp;gt;
    &amp;lt;li&amp;gt;&amp;lt;%= error %&amp;gt;&amp;lt;/li&amp;gt;
  &amp;lt;% end %&amp;gt;
&amp;lt;% end %&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This would be the third layer of the form and would only display if there was a failed validation. The source code can be found on &lt;a href=&quot;https://github.com/CharlesMassry/pixtr_on_rails&quot;&gt;Github&lt;/a&gt;.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Nested Resources on Rails]]></title><description><![CDATA[There are a few key things you must remember when working with nested resources in Ruby on Rails. The first thing to do is edit your routes…]]></description><link>https://www.charliemassry.com/posts/11-nested-resources-on-rails/</link><guid isPermaLink="false">https://www.charliemassry.com/posts/11-nested-resources-on-rails/</guid><pubDate>Wed, 02 Jul 2014 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;There are a few key things you must remember when working with nested resources in Ruby on Rails. The first thing to do is edit your routes file.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;resources :galleries do
  resources :images
end &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This creates all of those routes with the HTTP verbs that point to the controller#action and creates the URL helpers. Much less typing than Sinatra.&lt;/p&gt;
&lt;p&gt;The next thing to do is work through the same process you would do without nested resources with some minor exceptions. For example, you have to create the controller with the actions and then the views. One thing to remember is when you make a form in a nested resource, you have to include both resources in the controller.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;def new
  @gallery = Gallery.find(params[:gallery_id])
  @image = Image.new
end &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is because &lt;code class=&quot;language-text&quot;&gt;#new&lt;/code&gt; needs to have both gallery and image objects to pass into the &lt;code class=&quot;language-text&quot;&gt;form_for&lt;/code&gt; helper method. &lt;code class=&quot;language-text&quot;&gt;form_for&lt;/code&gt; needs the information about the parent resource in order to create a hidden field for the foreign key.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;&amp;lt;%= form_for [@gallery, @image] do |form| %&amp;gt;
  ...
&amp;lt;% end %&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;[@gallery, @image]&lt;/code&gt; gives it the new gallery image post path, which Rails knows that it is the path that you want because you are coming from the GET new gallery image path. If this was in the edit method, then you would pass the same arguments in, except for you would pass in an existing image instance in the images controller and not a new one.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[MVC...R?]]></title><description><![CDATA[Ruby on Rails follows the popular Model, View, Controller paradigm. One thing of note about this is Rails’s separation of the routes from…]]></description><link>https://www.charliemassry.com/posts/10-mvc-r/</link><guid isPermaLink="false">https://www.charliemassry.com/posts/10-mvc-r/</guid><pubDate>Tue, 01 Jul 2014 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Ruby on Rails follows the popular Model, View, Controller paradigm. One thing of note about this is Rails’s separation of the routes from the controller. While frameworks like Sinatra and Express have the routes and controllers as one, Ruby on Rails separates this into separate files. This can be confusing but I feel that it leads to cleaner code. Consider the show page.&lt;/p&gt;
&lt;p&gt;The route: &lt;code class=&quot;language-text&quot;&gt;get &amp;quot;/galleries/:id&amp;quot; =&amp;gt; &amp;quot;galleries#show&amp;quot;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;The controller:  &lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;class GalleriesController &amp;lt; ApplicationController
  def show&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;        @gallery = Gallery.find(params[:id])
  end
end&lt;/p&gt;
&lt;p&gt;In Sinatra identical code would look like:  &lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;get &amp;quot;/galleries/:id&amp;quot; do
  @gallery = Gallery.find(params[:id])
end&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;While there doesn’t really seem to be much of a benefit to doing this with Rails as there is objectively more keystrokes that must be typed, Rails does have some shortcuts that use the “Convention over Configuration” principle. This means that you don’t have to do trivial things that Rails assumes you are going to do, so you would think there would be a shortcut in Rails to create all 7 HTTP requests for a given model. According to the Rails documentation, you can simply type &lt;code class=&quot;language-text&quot;&gt;resources :galleries&lt;/code&gt; and Rails will create all of the 7 HTTP requests needed for the CRUD operations, along with methods that point to the GET paths, called path helpers, such as &lt;code class=&quot;language-text&quot;&gt;gallery_path(gallery.id)&lt;/code&gt;. This would be useful in your views when you type in a link_to helper, you can type in &lt;code class=&quot;language-text&quot;&gt;instead of&lt;/code&gt;. This creates much cleaner looking code without using messy strings. Also this illustrates how important the &lt;code class=&quot;language-text&quot;&gt;config/routes.rb&lt;/code&gt; is in your Rails app, even though it is not in your app directory like your models, views, and controllers are. &lt;/p&gt;</content:encoded></item><item><title><![CDATA[Designing a Flash Card App in Sinatra]]></title><description><![CDATA[During the first week of Metis, we were tasked to build a flash card game playable from the command line. We kept adding features, and what…]]></description><link>https://www.charliemassry.com/posts/9-designing-a-flash-card-app-in-sinatra/</link><guid isPermaLink="false">https://www.charliemassry.com/posts/9-designing-a-flash-card-app-in-sinatra/</guid><pubDate>Mon, 30 Jun 2014 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;During the first week of Metis, we were tasked to build a flash card game playable from the command line. We kept adding features, and what started out as a one deck flash card game, turned into a game that read the contents of a separate text file and entered that into the game each time it was played. The second week, we learned all about SQL, Sinatra, and Active Record, so for the weekend project we were tasked to create the flash card game for the web. As I was thinking about how to create this game, I thought the best design pattern would be to use a Model-View-Controller pattern, or MVC, which separates a lot of the code into distinct files. Being Sinatra and not Ruby on Rails, makes for trivial things to be potential mistakes, such as creating a database or creating a form, but it does illustrate fundamentals which do a great job of uncovering how everything works.&lt;/p&gt;
&lt;p&gt;Specifically, you need to be able to perform the CRUD operations on the cards and decks, but you also need to be able to play the game, which can be implemented in a variety of ways. The way I used was I created a dummy route which would redirect the user to a random card and then be prompted for an input.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;get &amp;quot;/decks/:id/cards/random&amp;quot; do
  deck = Deck.find(params[:id])
  cards = Card.where(deck_id: deck.id)
  card = cards.sample
  redirect to(&amp;quot;/decks/#{deck.id}/cards/#{card.id}&amp;quot;)
end

get &amp;quot;/decks/:id/cards/:card_id&amp;quot;do
  @card = Card.find(params[:card_id])
  erb :front
end

post &amp;quot;/decks/:id/cards/:card_id/back&amp;quot; do
  card = Card.find(params[:card_id])
  input = params[:card][:back]
  if input.downcase == card.back.downcase
    redirect to(&amp;quot;/decks/#{card.deck_id}/cards/#{card.id}/right&amp;quot;)
  else
    redirect to(&amp;quot;/decks/#{card.deck_id}/cards/#{card.id}/wrong&amp;quot;)
  end
end&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;For example, what this does is it creates a route called “/decks/1/cards/random” and creates an array of cards that have the FOREIGN KEY the same as the &lt;code class=&quot;language-text&quot;&gt;deck.id&lt;/code&gt;, which would be “1”. It then picks one card by using &lt;code class=&quot;language-text&quot;&gt;#sample&lt;/code&gt;. Then it redirects to the front of the card it picked. The reason for this roundabout way is to hide the next card from the user.&lt;/p&gt;
&lt;p&gt;The next thing this does render &lt;code class=&quot;language-text&quot;&gt;views/front.erb&lt;/code&gt;. On the front.erb page, there is the contents of the front of the card along with an input box that uses a POST method.&lt;/p&gt;
&lt;p&gt;Finally, the post method receives the input from the front.erb page, and checks if that input is the same as the back of the card and redirects to the appropriate page. A thing to note is the POST method does not necessarily have to save anything so you can use it as an input processor. You can view the source code on &lt;a href=&quot;https://github.com/CharlesMassry/flash_card_sinatra&quot;&gt;Github&lt;/a&gt;.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[HTTP Requests in Sinatra]]></title><description><![CDATA[In HTTP, there are four common request actions that are used by servers, GET, POST, PUT, and DELETE. This maps to CRUD, Create, Read, Update…]]></description><link>https://www.charliemassry.com/posts/8-http-requests-in-sinatra/</link><guid isPermaLink="false">https://www.charliemassry.com/posts/8-http-requests-in-sinatra/</guid><pubDate>Fri, 27 Jun 2014 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;In HTTP, there are four common request actions that are used by servers, GET, POST, PUT, and DELETE. This maps to CRUD, Create, Read, Update, and Delete. Unfortunately, the browsers can only send the GET and POST requests and not PUT and DELETE. To combat this, the server must fake the requests by using a hidden field to change the type of request in the browser. Consider the PUT request. The server file would have to have a GET method to a new page that has a form for updating, and that new page must have a form that uses the PUT method.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;# server.rb 
get &amp;quot;/galleries/:id/edit&amp;quot; do
  @gallery = Gallery.find(params[:id])
  erb :edit_gallery
end

put &amp;quot;/galleries/:id&amp;quot; do
  gallery = Gallery.find(params[:id])
  gallery.update(params[:gallery])
  redirect to(&amp;quot;/galleries/#{params[:id]}&amp;quot;)
end

views/edit_gallery.erb
&amp;lt;form action=&amp;quot;/galleries/&amp;lt;%= @gallery.id %&amp;gt;&amp;quot; method=&amp;quot;POST&amp;quot;&amp;gt;
  &amp;lt;input type=&amp;quot;hidden&amp;quot; name=&amp;quot;_method&amp;quot; value=&amp;quot;put&amp;quot;&amp;gt;
  ...
&amp;lt;/form&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;While you have to do the same for the POST request as far as the server.rb file is concerned, you must add that second line in the edit_gallery.erb file. One thing of note is the &lt;code class=&quot;language-text&quot;&gt;name=“_method” value=“put”&lt;/code&gt; snippet. This is how Sinatra determines that you wanted it to be a PUT request and not a POST request and looks for a route that matches a put method.&lt;/p&gt;
&lt;p&gt;The DELETE method is easier as you just need to create a delete input button as opposed to a creating a new GET request and new erb file. Just don’t forget to add the hidden input field.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Database Control in Ruby]]></title><description><![CDATA[Active Record is the preferred method of interacting with a database. Being a Ruby Gem independent of Ruby on Rails, Active Record can work…]]></description><link>https://www.charliemassry.com/posts/7-database-control-in-ruby/</link><guid isPermaLink="false">https://www.charliemassry.com/posts/7-database-control-in-ruby/</guid><pubDate>Thu, 26 Jun 2014 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Active Record is the preferred method of interacting with a database. Being a Ruby Gem independent of Ruby on Rails, Active Record can work with other frameworks such as Sinatra. &lt;a href=&quot;https://github.com/rails/rails/tree/master/activerecord&quot;&gt;Active Record&lt;/a&gt; is simple to setup and the commands are not confusing at all.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;SELECT galleries.*
FROM galleries
WHERE (name = &amp;#39;Cats&amp;#39;);&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This would return all database entries in the galleries table that have name equal to ‘Cats’. This is good, but it is kind of a long statement to type out and you can’t interact with it much by just using SQL. For example, putting it on the web would be a lot more difficult.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;Gallery.where(&amp;quot;name = &amp;#39;Cats&amp;#39;&amp;quot;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This gives you the same result as the previous SQL statement, except you can now interact with it in Ruby, and thus Sinatra and put it on the web.&lt;/p&gt;
&lt;p&gt;But Charlie, that’s all well and good but how do you use a &lt;code class=&quot;language-text&quot;&gt;JOIN&lt;/code&gt; command with Active Record, you ask? Well if you want to join a galleries to an images table you would write:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;class Image &amp;lt; ActiveRecord::Base
end

class Gallery &amp;lt; ActiveRecord::Base
  has_many :images
end  &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The has many method returns all of the images that are associated with the gallery where the Foreign ID of the images is equal to the ID of the gallery, only when you call the images getter method. Active Record automagically creates all these different methods for the database, such as all getter and setter attribute methods, just never use the ID or Foreign ID setter methods otherwise you’ll ruin your database.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;@gallery = Gallery.find_by(name: “Cats”)` &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This Ruby query would return &lt;code class=&quot;language-text&quot;&gt;#&amp;lt;Gallery id: 1, name: &amp;quot;Cats&amp;quot;, description: &amp;quot;Funky cats”&amp;gt;&lt;/code&gt;. If you then wrote &lt;code class=&quot;language-text&quot;&gt;@images = @gallery.images&lt;/code&gt;, the return value would be a long listing of every image that matches its Foreign ID to the ID of the gallery. You can then iterate through the &lt;code class=&quot;language-text&quot;&gt;@images&lt;/code&gt; instance variable and post each image to the web using Sinatra and an ERB template.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;@galleries = Gallery.where(&amp;quot;name = &amp;#39;Cats’”)
@images = @galleries.map { |gallery| gallery.images }
@images.flatten!
@images.each { |image| image.url }&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This would return a list of all the URLs that correspond to the Cats gallery. The reason for this seemingly complex code is because &lt;code class=&quot;language-text&quot;&gt;.where(“name = ‘Cats’”)&lt;/code&gt; returns an array that needs to be iterated through to find the images and then flatten the array that &lt;code class=&quot;language-text&quot;&gt;.map&lt;/code&gt; returns. You are then left with one array and can iterate through that array to return each image URL.&lt;/p&gt;
&lt;p&gt;In any event, just make sure that your casing is correct.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[When in Doubt, Restart Your Server]]></title><description><![CDATA[This line of advice should always come in handy when working with Sinatra. We learned about the popular Domain Specific Language, Sinatra…]]></description><link>https://www.charliemassry.com/posts/6-when-in-doubt-restart-your-server/</link><guid isPermaLink="false">https://www.charliemassry.com/posts/6-when-in-doubt-restart-your-server/</guid><pubDate>Wed, 25 Jun 2014 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;This line of advice should always come in handy when working with Sinatra. We learned about the popular Domain Specific Language, Sinatra, yesterday at &lt;a href=&quot;http://www.thisismetis.com&quot;&gt;Metis&lt;/a&gt;. Often overshadowed by the behemoth that is Ruby on Rails, &lt;a href=&quot;http://www.sinatrarb.com/&quot;&gt;Sinatra&lt;/a&gt; is a RubyGem to start a web server quickly with syntax that looks like http requests.&lt;/p&gt;
&lt;p&gt;There are a few issues however, to running a Sinatra application. One of which that I mentioned earlier, is if you change the main Ruby file that you start to start the server, you must restart your server, which can lead to a lot of confusing error messages. Fortunately, you can pull out a bit of logic out of your server file and edit other files without issue, but always leave restarting your server in your back pocket.&lt;/p&gt;
&lt;p&gt;Another thing that was a little confusing was the URL parameter.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;require “sinatra”

get &amp;quot;/galleries/:name&amp;quot; do
  ...
  @name = params[:name]
  ...
end&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;By putting the colon in front of name, you can turn that into whatever the user inputs, which I like to think of as the URL equivalent to &lt;code class=&quot;language-text&quot;&gt;gets.chomp&lt;/code&gt;. You then insert that as a key to the “params hash” and set an instance variable equal to its value, and now you can extract that into other files such as embedded Ruby, or erb.&lt;/p&gt;
&lt;p&gt;If the user were to type into the URL &lt;code class=&quot;language-text&quot;&gt;localhost:4567/galleries/cats&lt;/code&gt;, “cats” would be set to &lt;code class=&quot;language-text&quot;&gt;@name&lt;/code&gt;. This can enable you to do complex stuff, or you could just create a cat gallery.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[The SQL is Never as Good as the Original]]></title><description><![CDATA[Writing in SQL can be daunting at first, but the more you practice the more it seems like it’s its own programming language. For example…]]></description><link>https://www.charliemassry.com/posts/5-the-sql-is-never-as-good-as-the-original/</link><guid isPermaLink="false">https://www.charliemassry.com/posts/5-the-sql-is-never-as-good-as-the-original/</guid><pubDate>Tue, 24 Jun 2014 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Writing in SQL can be daunting at first, but the more you practice the more it seems like it’s its own programming language. For example, the &lt;code class=&quot;language-text&quot;&gt;SELECT&lt;/code&gt; statement can be confusing as to what it actually does but when you realize it is the equivalent of the return statement in many languages it started to make sense. Another thing to worry about is the columns of the table I like to think of it as a hash or dictionary, where the key is the column name and the value is what is in each row’s corresponding column.&lt;/p&gt;
&lt;p&gt;One main problem I kept running into was using &lt;code class=&quot;language-text&quot;&gt;JOIN&lt;/code&gt; tables. I finally realized that the table with the foreign key is the table that gets joined to the main table.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;SELECT galleries.name, images.name
FROM galleries
JOIN images ON galleries.id = images.gallery_id;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This would return a seemingly new table with the gallery name linked to its corresponding image name. You can further refine the results using &lt;code class=&quot;language-text&quot;&gt;WHERE&lt;/code&gt; to enter a conditional and &lt;code class=&quot;language-text&quot;&gt;LIKE&lt;/code&gt; or &lt;code class=&quot;language-text&quot;&gt;ILIKE&lt;/code&gt; to search text similar to a regular expression.&lt;/p&gt;
&lt;p&gt;Another powerful SQL is a collection of methods called “aggregate functions”. These so called functions are very similar to the functions or methods of conventional programming languages like Javascript or Ruby. These can be functions such as &lt;code class=&quot;language-text&quot;&gt;SUM&lt;/code&gt; which can return the sum of the column, or &lt;code class=&quot;language-text&quot;&gt;COUNT&lt;/code&gt; which can return how many of a particular query would be returned. One problem with these functions is if you want to return at least an additional column along with the aggregate function you must use the &lt;code class=&quot;language-text&quot;&gt;GROUP BY&lt;/code&gt; clause. Also, if you are returning multiple columns you must specify it in the group clause when using aggregate functions.&lt;/p&gt;
&lt;p&gt;The most difficult problem I ran into was finding the first unique name in a join table. To do this you must use the &lt;code class=&quot;language-text&quot;&gt;SELECT DISTINCT ON(x)&lt;/code&gt; statement, where x is the distinct element that you want. One note with this is your &lt;code class=&quot;language-text&quot;&gt;ORDER BY&lt;/code&gt; argument must match the distinct element that you passed in.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Recursion != Loop]]></title><description><![CDATA[I used to think that this statement would evaluate to true, until very recently, which is the reason for this blog post, and hopefully this…]]></description><link>https://www.charliemassry.com/posts/4-recursion-loop/</link><guid isPermaLink="false">https://www.charliemassry.com/posts/4-recursion-loop/</guid><pubDate>Mon, 23 Jun 2014 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;I used to think that this statement would evaluate to true, until very recently, which is the reason for this blog post, and hopefully this will help those who don’t quite get it yet. Last week I started going to &lt;a href=&quot;http://www.thisismetis.com&quot;&gt;Metis&lt;/a&gt;, a Ruby On Rails Bootcamp in New York City, it’s run by the popular web development company &lt;a href=&quot;http://www.thoughtbot.com&quot;&gt;thoughtbot&lt;/a&gt;. So I was a little ahead of the other students as I have a little programming experience with Ruby and was able to complete the pre-work without too much trouble. One of the instructors suggested I try and implement “quicksort” in Ruby.&lt;/p&gt;
&lt;p&gt;Quicksort is a sorting algorithm that takes a random number, called a pivot, in an array and makes sure that every other number in an array is either in a higher or lower position than the pivot. The way to do this is recursion. The problem was I kept getting an error message “Stack Level Too Deep” which is the error message if there is no exit condition on recursion, similar to an infinite loop. This was the first clue that they were different.&lt;/p&gt;
&lt;p&gt;Having trouble, the instructor told me to think of recursion as a series of nested method calls.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;quicksort(quicksort(quicksort(quicksort(array))))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If it hits a return statement, it then starts breaking out of the nest till it’s gone. It nests itself, unlike a loop, which doesn’t add any layers dynamically.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Opening up Hashes with a Key]]></title><description><![CDATA[In Ruby, Hashes are a very powerful class that can store a key value pair. This is very useful if you need to create a database as you make…]]></description><link>https://www.charliemassry.com/posts/3-opening-up-hashes-with-a-key/</link><guid isPermaLink="false">https://www.charliemassry.com/posts/3-opening-up-hashes-with-a-key/</guid><pubDate>Fri, 20 Jun 2014 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;In Ruby, Hashes are a very powerful class that can store a key value pair. This is very useful if you need to create a database as you make one object point to a different type of object and every time you enter the first object, otherwise known as the key, you get the object it points to, otherwise known as the value.&lt;/p&gt;
&lt;p&gt;  &lt;code class=&quot;language-text&quot;&gt;db[&amp;quot;Taylor Swift&amp;quot;] = [&amp;quot;You Belong With Me&amp;quot;]&lt;/code&gt; &lt;/p&gt;
&lt;p&gt;To create a Hash.&lt;/p&gt;
&lt;p&gt; &lt;code class=&quot;language-text&quot;&gt;db[&amp;quot;Taylor Swift&amp;quot;] &amp;lt;&amp;lt; &amp;quot;I Knew You Were Trouble&amp;quot;&lt;/code&gt; &lt;/p&gt;
&lt;p&gt;This adds the song “I Knew You Were Trouble” to the value which holds an array.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;db[&amp;quot;Taylor Swift&amp;quot;]&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This returns an array with the string “You Belong With Me”, and “I Knew You Were Trouble”.&lt;/p&gt;
&lt;p&gt;Then you can easily print out an array of Taylor Swift songs, or really whatever you want to store. Pretty powerful stuff. Also, if you’re using a CSV file, make sure to put &lt;code class=&quot;language-text&quot;&gt;require &amp;#39;csv&amp;#39;&lt;/code&gt; at the top.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[SASS, the Sassy CSS Preprocessor]]></title><description><![CDATA[I have updated the site with SASS which has greatly cleaned up my CSS code and you should use it too. When I first started designing the…]]></description><link>https://www.charliemassry.com/posts/2-sass-the-sassy-css-preprocessor/</link><guid isPermaLink="false">https://www.charliemassry.com/posts/2-sass-the-sassy-css-preprocessor/</guid><pubDate>Wed, 23 Apr 2014 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;I have updated the site with SASS which has greatly cleaned up my CSS code and you should use it too. When I first started designing the colors of the site, I was troubled by the number of steps necessary to change the main colors of the site for each particular use. For example, every time I wanted to change a single color, I would have to change the hexadecimal value in each spot that it is in, as opposed to either changing the value variable with &lt;a href=&quot;http://sass-lang.com/&quot;&gt;SASS&lt;/a&gt; or changing the spot of the variable.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;$primary-color: #E3E7F2;
body{
 background-color: $primary-color;
 font: 14px Helvetica, Arial, sans-serif;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Another, slightly less problematic issue, was using nested CSS statements. The problem was always repeating the CSS Selector. When I just simply wanted to change how something is supposed to behave when hovering the whole CSS Selector needs to be repeated.&lt;/p&gt;
&lt;p&gt;These problems stem from repeating myself, which is against the rules of SASS, as the founders subscribe to the “Don’t Repeat Yourself” principle of programming, which I am a big proponent of myself, and am trying to implement it as much as I can.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Welcome.]]></title><description><![CDATA[I built this blog to showcase problems, solutions and thoughts about web development, web design and technology. That being said I did run…]]></description><link>https://www.charliemassry.com/posts/1-welcome/</link><guid isPermaLink="false">https://www.charliemassry.com/posts/1-welcome/</guid><pubDate>Sun, 22 Dec 2013 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;I built this blog to showcase problems, solutions and thoughts about web development, web design and technology. That being said I did run into a number of problems and their solutions while actually building this site. &lt;/p&gt;
&lt;p&gt;In my attempts to make this site as responsive as possible I ran into a few problems, such as the browser caching the webpage dependencies, the scroll effect for the blog posts not being responsive, and having a side navigation turn into a top navigation bar on smaller devices.&lt;/p&gt;
&lt;p&gt;I also ran into some problems on the back end such as setting up my virtual private server for hosting, converting my SQLite database to a MySQL database for production, and finally running the website using Nginx.&lt;/p&gt;
&lt;p&gt;Rails 4 implemented turbolinks.js by default, which is good if you don’t have any differences in CSS or Javascript throughout your website. I ran into this problem because my front page style is drastically different from the rest of my pages and didn’t realize it at first because Google Chrome automatically didn’t cache the dependencies. Once I tested it on multiple browsers I realized something was afoot. I then figured out that it was &lt;a href=&quot;https://github.com/rails/turbolinks&quot;&gt;turbolinks.js&lt;/a&gt; and read the documentation which is a simple HTML attribute, “data-no-turbolink,” in any ancestor element of that particular link. &lt;/p&gt;
&lt;p&gt;The scroll effect was not designed for full page usage, so I had to change the height of the list. I then discovered that the CSS property height default is set to the document height and not the window height. This means that to make the height of the document the height of the window you need to use Javascript. Using &lt;a href=&quot;http://jquery.com/&quot;&gt;jQuery&lt;/a&gt; makes this much easier to do, but I had to get the height of the window which was converted to both a string and a float and needed to be an integer. Once I did this everything fell into place. &lt;/p&gt;
&lt;p&gt;When I originally designed the site I wanted a side navigation panel that spanned the length of the window, however I realized that this practice did not lend itself to responsive web design which is necessary in this day in age. I figured the easiest way to do this was to use &lt;a href=&quot;http://getbootstrap.com/&quot;&gt;Bootstrap&lt;/a&gt;, specifically a horizontal navigation. This didn’t work when I tried to make my own side navigation panel and then switch to the Bootstrap navigation bar for smaller screens. What I ended up doing was changing the Bootstrap navigation bar to the side navigation panel that I wanted, which worked except the links were still in the original top navigation bar position. This was fixed with a simple jQuery class change and some CSS modification. &lt;/p&gt;
&lt;p&gt;Once I was done with these issues I then moved on to launching this website for production. This proved more difficult than I thought. I set up a virtual private server with &lt;a href=&quot;https://www.digitalocean.com/&quot;&gt;Digital Ocean&lt;/a&gt;, and installed all the necessary dependencies until it came time to set up a proxy server and decided to go with &lt;a href=&quot;http://nginx.org/&quot;&gt;Nginx&lt;/a&gt; with &lt;a href=&quot;https://www.phusionpassenger.com/&quot;&gt;Passenger&lt;/a&gt;. My virtual private server wouldn’t let me set it up at first because there was not enough memory, and I needed to create a swapfile, which is to use hard drive space as RAM. This didn’t work as the commands I gave my swapfile to change the priority proved useless. I gave up for the day and checked back the next and it just worked without even a swapfile. &lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.mysql.com/&quot;&gt;MySQL&lt;/a&gt; is a very powerful database system that I wanted to use for the database for this site. For Ruby on Rails, the gem is called mysql2, however the documentation is not ideal as it doesn’t say how to set up for production. The problem I had was within the database.yml file options. I looked around for the answer and couldn’t find one until I consulted the &lt;a href=&quot;http://pragprog.com/book/rails4/agile-web-development-with-rails-4&quot;&gt;Agile Web Development with Rails 4&lt;/a&gt;, which gave very detailed information on how to setup MySQL for production while still using SQLite for developing and specifically how to edit the database.yml file. &lt;/p&gt;
&lt;p&gt;My last issue was with Nginx and how to set up the domain name, specifically how to make it run on port 80 while the Nginx was running on port 80, with a cryptic warning that further configuration was required. Once I figured out what the issue was, it was simply a matter of closing Nginx and starting passenger on port 80 as Nginx was already configured. &lt;/p&gt;
&lt;p&gt;In a future update I would like to rewrite the CSS in SASS as I haven’t discovered it until after this site was launched and so far, it looks very organized and intuitive. Stay tuned…&lt;/p&gt;</content:encoded></item></channel></rss>